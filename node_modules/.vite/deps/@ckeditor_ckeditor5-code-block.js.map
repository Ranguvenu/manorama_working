{
  "version": 3,
  "sources": ["../../@ckeditor/ckeditor5-code-block/src/utils.js", "../../@ckeditor/ckeditor5-code-block/src/codeblockcommand.js", "../../@ckeditor/ckeditor5-code-block/src/indentcodeblockcommand.js", "../../@ckeditor/ckeditor5-code-block/src/outdentcodeblockcommand.js", "../../@ckeditor/ckeditor5-code-block/src/converters.js", "../../@ckeditor/ckeditor5-code-block/src/codeblockediting.js", "../../@ckeditor/ckeditor5-code-block/src/codeblockui.js", "../../@ckeditor/ckeditor5-code-block/src/codeblock.js"],
  "sourcesContent": ["/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { first } from 'ckeditor5/src/utils.js';\n/**\n * Returns code block languages as defined in `config.codeBlock.languages` but processed:\n *\n * * To consider the editor localization, i.e. to display {@link module:code-block/codeblockconfig~CodeBlockLanguageDefinition}\n * in the correct language. There is no way to use {@link module:utils/locale~Locale#t} when the user\n * configuration is defined because the editor does not exist yet.\n * * To make sure each definition has a CSS class associated with it even if not specified\n * in the original configuration.\n */\nexport function getNormalizedAndLocalizedLanguageDefinitions(editor) {\n    const t = editor.t;\n    const languageDefs = editor.config.get('codeBlock.languages');\n    for (const def of languageDefs) {\n        if (def.label === 'Plain text') {\n            def.label = t('Plain text');\n        }\n        if (def.class === undefined) {\n            def.class = `language-${def.language}`;\n        }\n    }\n    return languageDefs;\n}\n/**\n * Returns an object associating certain language definition properties with others. For instance:\n *\n * For:\n *\n * ```ts\n * const definitions = {\n * \t{ language: 'php', class: 'language-php', label: 'PHP' },\n * \t{ language: 'javascript', class: 'js', label: 'JavaScript' },\n * };\n *\n * getPropertyAssociation( definitions, 'class', 'language' );\n * ```\n *\n * returns:\n *\n * ```ts\n * {\n * \t'language-php': 'php',\n * \t'js': 'javascript'\n * }\n * ```\n *\n * and\n *\n * ```ts\n * getPropertyAssociation( definitions, 'language', 'label' );\n * ```\n *\n * returns:\n *\n * ```ts\n * {\n * \t'php': 'PHP',\n * \t'javascript': 'JavaScript'\n * }\n * ```\n */\nexport function getPropertyAssociation(languageDefs, key, value) {\n    const association = {};\n    for (const def of languageDefs) {\n        if (key === 'class') {\n            // Only the first class is considered.\n            const newKey = (def[key]).split(' ').shift();\n            association[newKey] = def[value];\n        }\n        else {\n            association[def[key]] = def[value];\n        }\n    }\n    return association;\n}\n/**\n * For a given model text node, it returns white spaces that precede other characters in that node.\n * This corresponds to the indentation part of the code block line.\n */\nexport function getLeadingWhiteSpaces(textNode) {\n    return textNode.data.match(/^(\\s*)/)[0];\n}\n/**\n * For plain text containing the code (a snippet), it returns a document fragment containing\n * view text nodes separated by `<br>` elements (in place of new line characters \"\\n\"), for instance:\n *\n * Input:\n *\n * ```ts\n * \"foo()\\n\n * bar()\"\n * ```\n *\n * Output:\n *\n * ```html\n * <DocumentFragment>\n * \t\"foo()\"\n * \t<br/>\n * \t\"bar()\"\n * </DocumentFragment>\n * ```\n *\n * @param text The raw code text to be converted.\n */\nexport function rawSnippetTextToViewDocumentFragment(writer, text) {\n    const fragment = writer.createDocumentFragment();\n    const textLines = text.split('\\n');\n    const items = textLines.reduce((nodes, line, lineIndex) => {\n        nodes.push(line);\n        if (lineIndex < textLines.length - 1) {\n            nodes.push(writer.createElement('br'));\n        }\n        return nodes;\n    }, []);\n    writer.appendChild(items, fragment);\n    return fragment;\n}\n/**\n * Returns an array of all model positions within the selection that represent code block lines.\n *\n * If the selection is collapsed, it returns the exact selection anchor position:\n *\n * ```html\n * <codeBlock>[]foo</codeBlock>        ->     <codeBlock>^foo</codeBlock>\n * <codeBlock>foo[]bar</codeBlock>     ->     <codeBlock>foo^bar</codeBlock>\n * ```\n *\n * Otherwise, it returns positions **before** each text node belonging to all code blocks contained by the selection:\n *\n * ```html\n * <codeBlock>                                <codeBlock>\n *     foo[bar                                   ^foobar\n *     <softBreak></softBreak>         ->        <softBreak></softBreak>\n *     baz]qux                                   ^bazqux\n * </codeBlock>                               </codeBlock>\n * ```\n *\n * It also works across other nonâ€“code blocks:\n *\n * ```html\n * <codeBlock>                                <codeBlock>\n *     foo[bar                                   ^foobar\n * </codeBlock>                               </codeBlock>\n * <paragraph>text</paragraph>         ->     <paragraph>text</paragraph>\n * <codeBlock>                                <codeBlock>\n *     baz]qux                                   ^bazqux\n * </codeBlock>                               </codeBlock>\n * ```\n *\n * **Note:** The positions are in reverse order so they do not get outdated when iterating over them and\n * the writer inserts or removes elements at the same time.\n *\n * **Note:** The position is located after the leading white spaces in the text node.\n */\nexport function getIndentOutdentPositions(model) {\n    const selection = model.document.selection;\n    const positions = [];\n    // When the selection is collapsed, there's only one position we can indent or outdent.\n    if (selection.isCollapsed) {\n        return [selection.anchor];\n    }\n    // When the selection is NOT collapsed, collect all positions starting before text nodes\n    // (code lines) in any <codeBlock> within the selection.\n    // Walk backward so positions we are about to collect here do not get outdated when\n    // inserting or deleting using the writer.\n    const walker = selection.getFirstRange().getWalker({\n        ignoreElementEnd: true,\n        direction: 'backward'\n    });\n    for (const { item } of walker) {\n        if (!item.is('$textProxy')) {\n            continue;\n        }\n        const { parent, startOffset } = item.textNode;\n        if (!parent.is('element', 'codeBlock')) {\n            continue;\n        }\n        const leadingWhiteSpaces = getLeadingWhiteSpaces(item.textNode);\n        // Make sure the position is after all leading whitespaces in the text node.\n        const position = model.createPositionAt(parent, startOffset + leadingWhiteSpaces.length);\n        positions.push(position);\n    }\n    return positions;\n}\n/**\n * Checks if any of the blocks within the model selection is a code block.\n */\nexport function isModelSelectionInCodeBlock(selection) {\n    const firstBlock = first(selection.getSelectedBlocks());\n    return !!firstBlock && firstBlock.is('element', 'codeBlock');\n}\n/**\n * Checks if an {@link module:engine/model/element~Element Element} can become a code block.\n *\n * @param schema Model's schema.\n * @param element The element to be checked.\n * @returns Check result.\n */\nexport function canBeCodeBlock(schema, element) {\n    if (element.is('rootElement') || schema.isLimit(element)) {\n        return false;\n    }\n    return schema.checkChild(element.parent, 'codeBlock');\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command } from 'ckeditor5/src/core.js';\nimport { first } from 'ckeditor5/src/utils.js';\nimport { getNormalizedAndLocalizedLanguageDefinitions, canBeCodeBlock } from './utils.js';\n/**\n * The code block command plugin.\n */\nexport default class CodeBlockCommand extends Command {\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        this._lastLanguage = null;\n    }\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        this.value = this._getValue();\n        this.isEnabled = this._checkEnabled();\n    }\n    /**\n     * Executes the command. When the command {@link #value is on}, all topmost code blocks within\n     * the selection will be removed. If it is off, all selected blocks will be flattened and\n     * wrapped by a code block.\n     *\n     * @fires execute\n     * @param options Command options.\n     * @param options.language The code block language.\n     * @param options.forceValue If set, it will force the command behavior. If `true`, the command will apply a code block,\n     * otherwise the command will remove the code block. If not set, the command will act basing on its current value.\n     * @param options.usePreviousLanguageChoice If set on `true` and the `options.language` is not specified, the command\n     * will apply the previous language (if the command was already executed) when inserting the `codeBlock` element.\n     */\n    execute(options = {}) {\n        const editor = this.editor;\n        const model = editor.model;\n        const selection = model.document.selection;\n        const normalizedLanguagesDefs = getNormalizedAndLocalizedLanguageDefinitions(editor);\n        const firstLanguageInConfig = normalizedLanguagesDefs[0];\n        const blocks = Array.from(selection.getSelectedBlocks());\n        const value = options.forceValue == undefined ? !this.value : options.forceValue;\n        const language = getLanguage(options, this._lastLanguage, firstLanguageInConfig.language);\n        model.change(writer => {\n            if (value) {\n                this._applyCodeBlock(writer, blocks, language);\n            }\n            else {\n                this._removeCodeBlock(writer, blocks);\n            }\n        });\n    }\n    /**\n     * Checks the command's {@link #value}.\n     *\n     * @returns The current value.\n     */\n    _getValue() {\n        const selection = this.editor.model.document.selection;\n        const firstBlock = first(selection.getSelectedBlocks());\n        const isCodeBlock = !!(firstBlock && firstBlock.is('element', 'codeBlock'));\n        return isCodeBlock ? firstBlock.getAttribute('language') : false;\n    }\n    /**\n     * Checks whether the command can be enabled in the current context.\n     *\n     * @returns Whether the command should be enabled.\n     */\n    _checkEnabled() {\n        if (this.value) {\n            return true;\n        }\n        const selection = this.editor.model.document.selection;\n        const schema = this.editor.model.schema;\n        const firstBlock = first(selection.getSelectedBlocks());\n        if (!firstBlock) {\n            return false;\n        }\n        return canBeCodeBlock(schema, firstBlock);\n    }\n    _applyCodeBlock(writer, blocks, language) {\n        this._lastLanguage = language;\n        const schema = this.editor.model.schema;\n        const allowedBlocks = blocks.filter(block => canBeCodeBlock(schema, block));\n        for (const block of allowedBlocks) {\n            writer.rename(block, 'codeBlock');\n            writer.setAttribute('language', language, block);\n            schema.removeDisallowedAttributes([block], writer);\n            // Remove children of the  `codeBlock` element that are not allowed. See #9567.\n            Array.from(block.getChildren())\n                .filter(child => !schema.checkChild(block, child))\n                .forEach(child => writer.remove(child));\n        }\n        allowedBlocks.reverse().forEach((currentBlock, i) => {\n            const nextBlock = allowedBlocks[i + 1];\n            if (currentBlock.previousSibling === nextBlock) {\n                writer.appendElement('softBreak', nextBlock);\n                writer.merge(writer.createPositionBefore(currentBlock));\n            }\n        });\n    }\n    _removeCodeBlock(writer, blocks) {\n        const codeBlocks = blocks.filter(block => block.is('element', 'codeBlock'));\n        for (const block of codeBlocks) {\n            const range = writer.createRangeOn(block);\n            for (const item of Array.from(range.getItems()).reverse()) {\n                if (item.is('element', 'softBreak') && item.parent.is('element', 'codeBlock')) {\n                    const { position } = writer.split(writer.createPositionBefore(item));\n                    const elementAfter = position.nodeAfter;\n                    writer.rename(elementAfter, 'paragraph');\n                    writer.removeAttribute('language', elementAfter);\n                    writer.remove(item);\n                }\n            }\n            writer.rename(block, 'paragraph');\n            writer.removeAttribute('language', block);\n        }\n    }\n}\n/**\n * Picks the language for the new code block. If any language is passed as an option,\n * it will be returned. Else, if option usePreviousLanguageChoice is true and some\n * code block was already created (lastLanguage is not null) then previously used\n * language will be returned. If not, it will return default language.\n */\nfunction getLanguage(options, lastLanguage, defaultLanguage) {\n    if (options.language) {\n        return options.language;\n    }\n    if (options.usePreviousLanguageChoice && lastLanguage) {\n        return lastLanguage;\n    }\n    return defaultLanguage;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module code-block/indentcodeblockcommand\n */\nimport { Command } from 'ckeditor5/src/core.js';\nimport { getIndentOutdentPositions, isModelSelectionInCodeBlock } from './utils.js';\n/**\n * The code block indentation increase command plugin.\n */\nexport default class IndentCodeBlockCommand extends Command {\n    constructor(editor) {\n        super(editor);\n        this._indentSequence = editor.config.get('codeBlock.indentSequence');\n    }\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        this.isEnabled = this._checkEnabled();\n    }\n    /**\n     * Executes the command. When the command {@link #isEnabled is enabled}, the indentation of the\n     * code lines in the selection will be increased.\n     *\n     * @fires execute\n     */\n    execute() {\n        const editor = this.editor;\n        const model = editor.model;\n        model.change(writer => {\n            const positions = getIndentOutdentPositions(model);\n            // Indent all positions, for instance assuming the indent sequence is 4x space (\"    \"):\n            //\n            //\t\t<codeBlock>^foo</codeBlock>        ->       <codeBlock>    foo</codeBlock>\n            //\n            //\t\t<codeBlock>foo^bar</codeBlock>     ->       <codeBlock>foo    bar</codeBlock>\n            //\n            // Also, when there is more than one position:\n            //\n            //\t\t<codeBlock>\n            //\t\t\t^foobar\n            //\t\t\t<softBreak></softBreak>\n            //\t\t\t^bazqux\n            //\t\t</codeBlock>\n            //\n            //\t\t->\n            //\n            //\t\t<codeBlock>\n            //\t\t\t    foobar\n            //\t\t\t<softBreak></softBreak>\n            //\t\t\t    bazqux\n            //\t\t</codeBlock>\n            //\n            for (const position of positions) {\n                const indentSequenceTextElement = writer.createText(this._indentSequence);\n                // Previously insertion was done by writer.insertText(). It was changed to insertContent() to enable\n                // integration of code block with track changes. It's the easiest way of integration because insertContent()\n                // is already integrated with track changes, but if it ever cause any troubles it can be reverted, however\n                // some additional work will be required in track changes integration of code block.\n                model.insertContent(indentSequenceTextElement, position);\n            }\n        });\n    }\n    /**\n     * Checks whether the command can be enabled in the current context.\n     */\n    _checkEnabled() {\n        if (!this._indentSequence) {\n            return false;\n        }\n        // Indent (forward) command is always enabled when there's any code block in the selection\n        // because you can always indent code lines.\n        return isModelSelectionInCodeBlock(this.editor.model.document.selection);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command } from 'ckeditor5/src/core.js';\nimport { getLeadingWhiteSpaces, getIndentOutdentPositions, isModelSelectionInCodeBlock } from './utils.js';\n/**\n * The code block indentation decrease command plugin.\n */\nexport default class OutdentCodeBlockCommand extends Command {\n    constructor(editor) {\n        super(editor);\n        this._indentSequence = editor.config.get('codeBlock.indentSequence');\n    }\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        this.isEnabled = this._checkEnabled();\n    }\n    /**\n     * Executes the command. When the command {@link #isEnabled is enabled}, the indentation of the\n     * code lines in the selection will be decreased.\n     *\n     * @fires execute\n     */\n    execute() {\n        const editor = this.editor;\n        const model = editor.model;\n        model.change(() => {\n            const positions = getIndentOutdentPositions(model);\n            // Outdent all positions, for instance assuming the indent sequence is 4x space (\"    \"):\n            //\n            //\t\t<codeBlock>^foo</codeBlock>         ->       <codeBlock>foo</codeBlock>\n            //\n            //\t\t<codeBlock>    ^bar</codeBlock>     ->       <codeBlock>bar</codeBlock>\n            //\n            // Also, when there is more than one position:\n            //\n            //\t\t<codeBlock>\n            //\t\t\t    ^foobar\n            //\t\t\t<softBreak></softBreak>\n            //\t\t\t    ^bazqux\n            //\t\t</codeBlock>\n            //\n            //\t\t->\n            //\n            //\t\t<codeBlock>\n            //\t\t\tfoobar\n            //\t\t\t<softBreak></softBreak>\n            //\t\t\tbazqux\n            //\t\t</codeBlock>\n            for (const position of positions) {\n                const range = getLastOutdentableSequenceRange(model, position, this._indentSequence);\n                if (range) {\n                    // Previously deletion was done by writer.remove(). It was changed to deleteContent() to enable\n                    // integration of code block with track changes. It's the easiest way of integration because deleteContent()\n                    // is already integrated with track changes, but if it ever cause any troubles it can be reverted, however\n                    // some additional work will be required in track changes integration of code block.\n                    model.deleteContent(model.createSelection(range));\n                }\n            }\n        });\n    }\n    /**\n     * Checks whether the command can be enabled in the current context.\n     *\n     * @private\n     * @returns {Boolean} Whether the command should be enabled.\n     */\n    _checkEnabled() {\n        if (!this._indentSequence) {\n            return false;\n        }\n        const model = this.editor.model;\n        if (!isModelSelectionInCodeBlock(model.document.selection)) {\n            return false;\n        }\n        // Outdent command can execute only when there is an indent character sequence\n        // in some of the lines.\n        return getIndentOutdentPositions(model).some(position => {\n            return getLastOutdentableSequenceRange(model, position, this._indentSequence);\n        });\n    }\n}\n// For a position coming from `getIndentOutdentPositions()`, it returns the range representing\n// the last occurrence of the indent sequence among the leading whitespaces of the code line the\n// position represents.\n//\n// For instance, assuming the indent sequence is 4x space (\"    \"):\n//\n//\t\t<codeBlock>foo^</codeBlock>                                 ->          null\n//\t\t<codeBlock>foo^<softBreak></softBreak>bar</codeBlock>       ->          null\n//\t\t<codeBlock>  ^foo</codeBlock>                               ->          null\n//\t\t<codeBlock>        ^foo</codeBlock>                         ->          <codeBlock>    [    ]foo</codeBlock>\n//\t\t<codeBlock>    ^foo    bar</codeBlock>                      ->          <codeBlock>[    ]foo    bar</codeBlock>\n//\n// @param {<module:engine/model/model~Model>} model\n// @param {<module:engine/model/position~Position>} position\n// @param {String} sequence\n// @returns {<module:engine/model/range~Range>|null}\nfunction getLastOutdentableSequenceRange(model, position, sequence) {\n    // Positions start before each text node (code line). Get the node corresponding to the position.\n    const nodeAtPosition = getCodeLineTextNodeAtPosition(position);\n    if (!nodeAtPosition) {\n        return null;\n    }\n    const leadingWhiteSpaces = getLeadingWhiteSpaces(nodeAtPosition);\n    const lastIndexOfSequence = leadingWhiteSpaces.lastIndexOf(sequence);\n    // For instance, assuming the indent sequence is 4x space (\"    \"):\n    //\n    //\t\t<codeBlock>    \t^foo</codeBlock>           ->             null\n    //\n    if (lastIndexOfSequence + sequence.length !== leadingWhiteSpaces.length) {\n        return null;\n    }\n    // For instance, assuming the indent sequence is 4x space (\"    \"):\n    //\n    //\t\t<codeBlock>  ^foo</codeBlock>           ->             null\n    //\n    if (lastIndexOfSequence === -1) {\n        return null;\n    }\n    const { parent, startOffset } = nodeAtPosition;\n    // Create a range that contains the **last** indent sequence among the leading whitespaces\n    // of the line.\n    //\n    // For instance, assuming the indent sequence is 4x space (\"    \"):\n    //\n    //\t\t<codeBlock>        ^foo</codeBlock>      ->     <codeBlock>    [    ]foo</codeBlock>\n    //\n    return model.createRange(model.createPositionAt(parent, startOffset + lastIndexOfSequence), model.createPositionAt(parent, startOffset + lastIndexOfSequence + sequence.length));\n}\nfunction getCodeLineTextNodeAtPosition(position) {\n    // Positions start before each text node (code line). Get the node corresponding to the position.\n    let nodeAtPosition = position.parent.getChild(position.index);\n    // <codeBlock>foo^</codeBlock>\n    // <codeBlock>foo^<softBreak></softBreak>bar</codeBlock>\n    if (!nodeAtPosition || nodeAtPosition.is('element', 'softBreak')) {\n        nodeAtPosition = position.nodeBefore;\n    }\n    // <codeBlock>^</codeBlock>\n    // <codeBlock>foo^<softBreak></softBreak>bar</codeBlock>\n    if (!nodeAtPosition || nodeAtPosition.is('element', 'softBreak')) {\n        return null;\n    }\n    return nodeAtPosition;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { getPropertyAssociation } from './utils.js';\n/**\n * A model-to-view (both editing and data) converter for the `codeBlock` element.\n *\n * Sample input:\n *\n * ```html\n * <codeBlock language=\"javascript\">foo();<softBreak></softBreak>bar();</codeBlock>\n * ```\n *\n * Sample output (editing):\n *\n * ```html\n * <pre data-language=\"JavaScript\"><code class=\"language-javascript\">foo();<br />bar();</code></pre>\n * ```\n *\n * Sample output (data, see {@link module:code-block/converters~modelToDataViewSoftBreakInsertion}):\n *\n * ```html\n * <pre><code class=\"language-javascript\">foo();\\nbar();</code></pre>\n * ```\n *\n * @param languageDefs The normalized language configuration passed to the feature.\n * @param useLabels When `true`, the `<pre>` element will get a `data-language` attribute with a\n * humanâ€“readable label of the language. Used only in the editing.\n * @returns Returns a conversion callback.\n */\nexport function modelToViewCodeBlockInsertion(model, languageDefs, useLabels = false) {\n    // Language CSS classes:\n    //\n    //\t\t{\n    //\t\t\tphp: 'language-php',\n    //\t\t\tpython: 'language-python',\n    //\t\t\tjavascript: 'js',\n    //\t\t\t...\n    //\t\t}\n    const languagesToClasses = getPropertyAssociation(languageDefs, 'language', 'class');\n    // Language labels:\n    //\n    //\t\t{\n    //\t\t\tphp: 'PHP',\n    //\t\t\tpython: 'Python',\n    //\t\t\tjavascript: 'JavaScript',\n    //\t\t\t...\n    //\t\t}\n    const languagesToLabels = getPropertyAssociation(languageDefs, 'language', 'label');\n    return (evt, data, conversionApi) => {\n        const { writer, mapper, consumable } = conversionApi;\n        if (!consumable.consume(data.item, 'insert')) {\n            return;\n        }\n        const codeBlockLanguage = data.item.getAttribute('language');\n        const targetViewPosition = mapper.toViewPosition(model.createPositionBefore(data.item));\n        const preAttributes = {};\n        // Attributes added only in the editing view.\n        if (useLabels) {\n            preAttributes['data-language'] = languagesToLabels[codeBlockLanguage];\n            preAttributes.spellcheck = 'false';\n        }\n        const codeAttributes = languagesToClasses[codeBlockLanguage] ? {\n            class: languagesToClasses[codeBlockLanguage]\n        } : undefined;\n        const code = writer.createContainerElement('code', codeAttributes);\n        const pre = writer.createContainerElement('pre', preAttributes, code);\n        writer.insert(targetViewPosition, pre);\n        mapper.bindElements(data.item, code);\n    };\n}\n/**\n * A model-to-data view converter for the new line (`softBreak`) separator.\n *\n * Sample input:\n *\n * ```html\n * <codeBlock ...>foo();<softBreak></softBreak>bar();</codeBlock>\n * ```\n *\n * Sample output:\n *\n * ```html\n * <pre><code ...>foo();\\nbar();</code></pre>\n * ```\n *\n * @returns Returns a conversion callback.\n */\nexport function modelToDataViewSoftBreakInsertion(model) {\n    return (evt, data, conversionApi) => {\n        if (data.item.parent.name !== 'codeBlock') {\n            return;\n        }\n        const { writer, mapper, consumable } = conversionApi;\n        if (!consumable.consume(data.item, 'insert')) {\n            return;\n        }\n        const position = mapper.toViewPosition(model.createPositionBefore(data.item));\n        writer.insert(position, writer.createText('\\n'));\n    };\n}\n/**\n * A view-to-model converter for `<pre>` with the `<code>` HTML.\n *\n * Sample input:\n *\n * ```html\n * <pre><code class=\"language-javascript\">foo();bar();</code></pre>\n * ```\n *\n * Sample output:\n *\n * ```html\n * <codeBlock language=\"javascript\">foo();bar();</codeBlock>\n * ```\n *\n * @param languageDefs The normalized language configuration passed to the feature.\n * @returns Returns a conversion callback.\n */\nexport function dataViewToModelCodeBlockInsertion(editingView, languageDefs) {\n    // Language names associated with CSS classes:\n    //\n    //\t\t{\n    //\t\t\t'language-php': 'php',\n    //\t\t\t'language-python': 'python',\n    //\t\t\tjs: 'javascript',\n    //\t\t\t...\n    //\t\t}\n    const classesToLanguages = getPropertyAssociation(languageDefs, 'class', 'language');\n    const defaultLanguageName = languageDefs[0].language;\n    return (evt, data, conversionApi) => {\n        const viewCodeElement = data.viewItem;\n        const viewPreElement = viewCodeElement.parent;\n        if (!viewPreElement || !viewPreElement.is('element', 'pre')) {\n            return;\n        }\n        // In case of nested code blocks we don't want to convert to another code block.\n        if (data.modelCursor.findAncestor('codeBlock')) {\n            return;\n        }\n        const { consumable, writer } = conversionApi;\n        if (!consumable.test(viewCodeElement, { name: true })) {\n            return;\n        }\n        const codeBlock = writer.createElement('codeBlock');\n        const viewChildClasses = [...viewCodeElement.getClassNames()];\n        // As we're to associate each class with a model language, a lack of class (empty class) can be\n        // also associated with a language if the language definition was configured so. Pushing an empty\n        // string to make sure the association will work.\n        if (!viewChildClasses.length) {\n            viewChildClasses.push('');\n        }\n        // Figure out if any of the <code> element's class names is a valid programming\n        // language class. If so, use it on the model element (becomes the language of the entire block).\n        for (const className of viewChildClasses) {\n            const language = classesToLanguages[className];\n            if (language) {\n                writer.setAttribute('language', language, codeBlock);\n                break;\n            }\n        }\n        // If no language value was set, use the default language from the config.\n        if (!codeBlock.hasAttribute('language')) {\n            writer.setAttribute('language', defaultLanguageName, codeBlock);\n        }\n        conversionApi.convertChildren(viewCodeElement, codeBlock);\n        // Let's try to insert code block.\n        if (!conversionApi.safeInsert(codeBlock, data.modelCursor)) {\n            return;\n        }\n        consumable.consume(viewCodeElement, { name: true });\n        conversionApi.updateConversionResult(codeBlock, data);\n    };\n}\n/**\n * A view-to-model converter for new line characters in `<pre>`.\n *\n * Sample input:\n *\n * ```html\n * <pre><code class=\"language-javascript\">foo();\\nbar();</code></pre>\n * ```\n *\n * Sample output:\n *\n * ```html\n * <codeBlock language=\"javascript\">foo();<softBreak></softBreak>bar();</codeBlock>\n * ```\n *\n * @returns {Function} Returns a conversion callback.\n */\nexport function dataViewToModelTextNewlinesInsertion() {\n    return (evt, data, { consumable, writer }) => {\n        let position = data.modelCursor;\n        // When node is already converted then do nothing.\n        if (!consumable.test(data.viewItem)) {\n            return;\n        }\n        // When not inside `codeBlock` then do nothing.\n        if (!position.findAncestor('codeBlock')) {\n            return;\n        }\n        consumable.consume(data.viewItem);\n        const text = data.viewItem.data;\n        const textLines = text.split('\\n').map(data => writer.createText(data));\n        const lastLine = textLines[textLines.length - 1];\n        for (const node of textLines) {\n            writer.insert(node, position);\n            position = position.getShiftedBy(node.offsetSize);\n            if (node !== lastLine) {\n                const softBreak = writer.createElement('softBreak');\n                writer.insert(softBreak, position);\n                position = writer.createPositionAfter(softBreak);\n            }\n        }\n        data.modelRange = writer.createRange(data.modelCursor, position);\n        data.modelCursor = position;\n    };\n}\n/**\n * A view-to-model converter that handles orphan text nodes (white spaces, new lines, etc.)\n * that surround `<code>` inside `<pre>`.\n *\n * Sample input:\n *\n * ```html\n * // White spaces\n * <pre> <code>foo()</code> </pre>\n *\n * // White spaces\n * <pre>      <code>foo()</code>      </pre>\n *\n * // White spaces\n * <pre>\t\t\t<code>foo()</code>\t\t\t</pre>\n *\n * // New lines\n * <pre>\n * \t<code>foo()</code>\n * </pre>\n *\n * // Redundant text\n * <pre>ABC<code>foo()</code>DEF</pre>\n * ```\n *\n * Unified output for each case:\n *\n * ```html\n * <codeBlock language=\"plaintext\">foo()</codeBlock>\n * ```\n *\n * @returns Returns a conversion callback.\n */\nexport function dataViewToModelOrphanNodeConsumer() {\n    return (evt, data, { consumable }) => {\n        const preElement = data.viewItem;\n        // Don't clean up nested pre elements. Their content should stay as it is, they are not upcasted\n        // to code blocks.\n        if (preElement.findAncestor('pre')) {\n            return;\n        }\n        const preChildren = Array.from(preElement.getChildren());\n        const childCodeElement = preChildren.find(node => node.is('element', 'code'));\n        // <code>-less <pre>. It will not upcast to code block in the model, skipping.\n        if (!childCodeElement) {\n            return;\n        }\n        for (const child of preChildren) {\n            if (child === childCodeElement || !child.is('$text')) {\n                continue;\n            }\n            // Consuming the orphan to remove it from the input data.\n            // Second argument in `consumable.consume` is discarded for text nodes.\n            consumable.consume(child, { name: true });\n        }\n    };\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module code-block/codeblockediting\n */\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { ShiftEnter } from 'ckeditor5/src/enter.js';\nimport { UpcastWriter } from 'ckeditor5/src/engine.js';\nimport CodeBlockCommand from './codeblockcommand.js';\nimport IndentCodeBlockCommand from './indentcodeblockcommand.js';\nimport OutdentCodeBlockCommand from './outdentcodeblockcommand.js';\nimport { getNormalizedAndLocalizedLanguageDefinitions, getLeadingWhiteSpaces, rawSnippetTextToViewDocumentFragment } from './utils.js';\nimport { modelToViewCodeBlockInsertion, modelToDataViewSoftBreakInsertion, dataViewToModelCodeBlockInsertion, dataViewToModelTextNewlinesInsertion, dataViewToModelOrphanNodeConsumer } from './converters.js';\nconst DEFAULT_ELEMENT = 'paragraph';\n/**\n * The editing part of the code block feature.\n *\n * Introduces the `'codeBlock'` command and the `'codeBlock'` model element.\n */\nexport default class CodeBlockEditing extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'CodeBlockEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [ShiftEnter];\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        editor.config.define('codeBlock', {\n            languages: [\n                { language: 'plaintext', label: 'Plain text' },\n                { language: 'c', label: 'C' },\n                { language: 'cs', label: 'C#' },\n                { language: 'cpp', label: 'C++' },\n                { language: 'css', label: 'CSS' },\n                { language: 'diff', label: 'Diff' },\n                { language: 'html', label: 'HTML' },\n                { language: 'java', label: 'Java' },\n                { language: 'javascript', label: 'JavaScript' },\n                { language: 'php', label: 'PHP' },\n                { language: 'python', label: 'Python' },\n                { language: 'ruby', label: 'Ruby' },\n                { language: 'typescript', label: 'TypeScript' },\n                { language: 'xml', label: 'XML' }\n            ],\n            // A single tab.\n            indentSequence: '\\t'\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const model = editor.model;\n        const view = editor.editing.view;\n        const listEditing = editor.plugins.has('ListEditing') ?\n            editor.plugins.get('ListEditing') : null;\n        const normalizedLanguagesDefs = getNormalizedAndLocalizedLanguageDefinitions(editor);\n        // The main command.\n        editor.commands.add('codeBlock', new CodeBlockCommand(editor));\n        // Commands that change the indentation.\n        editor.commands.add('indentCodeBlock', new IndentCodeBlockCommand(editor));\n        editor.commands.add('outdentCodeBlock', new OutdentCodeBlockCommand(editor));\n        this.listenTo(view.document, 'tab', (evt, data) => {\n            const commandName = data.shiftKey ? 'outdentCodeBlock' : 'indentCodeBlock';\n            const command = editor.commands.get(commandName);\n            if (!command.isEnabled) {\n                return;\n            }\n            editor.execute(commandName);\n            data.stopPropagation();\n            data.preventDefault();\n            evt.stop();\n        }, { context: 'pre' });\n        schema.register('codeBlock', {\n            allowWhere: '$block',\n            allowChildren: '$text',\n            isBlock: true,\n            allowAttributes: ['language']\n        });\n        // Allow all list* attributes on `codeBlock` (integration with DocumentList).\n        // Disallow all attributes on $text inside `codeBlock`.\n        schema.addAttributeCheck((context, attributeName) => {\n            if (context.endsWith('codeBlock') &&\n                listEditing && listEditing.getListAttributeNames().includes(attributeName)) {\n                return true;\n            }\n            if (context.endsWith('codeBlock $text')) {\n                return false;\n            }\n        });\n        // Disallow object elements inside `codeBlock`. See #9567.\n        editor.model.schema.addChildCheck((context, childDefinition) => {\n            if (context.endsWith('codeBlock') && childDefinition.isObject) {\n                return false;\n            }\n        });\n        // Conversion.\n        editor.editing.downcastDispatcher.on('insert:codeBlock', modelToViewCodeBlockInsertion(model, normalizedLanguagesDefs, true));\n        editor.data.downcastDispatcher.on('insert:codeBlock', modelToViewCodeBlockInsertion(model, normalizedLanguagesDefs));\n        editor.data.downcastDispatcher.on('insert:softBreak', modelToDataViewSoftBreakInsertion(model), { priority: 'high' });\n        editor.data.upcastDispatcher.on('element:code', dataViewToModelCodeBlockInsertion(view, normalizedLanguagesDefs));\n        editor.data.upcastDispatcher.on('text', dataViewToModelTextNewlinesInsertion());\n        editor.data.upcastDispatcher.on('element:pre', dataViewToModelOrphanNodeConsumer(), { priority: 'high' });\n        // Intercept the clipboard input (paste) when the selection is anchored in the code block and force the clipboard\n        // data to be pasted as a single plain text. Otherwise, the code lines will split the code block and\n        // \"spill out\" as separate paragraphs.\n        this.listenTo(editor.editing.view.document, 'clipboardInput', (evt, data) => {\n            let insertionRange = model.createRange(model.document.selection.anchor);\n            // Use target ranges in case this is a drop.\n            if (data.targetRanges) {\n                insertionRange = editor.editing.mapper.toModelRange(data.targetRanges[0]);\n            }\n            if (!insertionRange.start.parent.is('element', 'codeBlock')) {\n                return;\n            }\n            const text = data.dataTransfer.getData('text/plain');\n            const writer = new UpcastWriter(editor.editing.view.document);\n            // Pass the view fragment to the default clipboardInput handler.\n            data.content = rawSnippetTextToViewDocumentFragment(writer, text);\n        });\n        // Make sure multiâ€“line selection is always wrapped in a code block when `getSelectedContent()`\n        // is used (e.g. clipboard copy). Otherwise, only the raw text will be copied to the clipboard and,\n        // upon next paste, this bare text will not be inserted as a code block, which is not the best UX.\n        // Similarly, when the selection in a single line, the selected content should be an inline code\n        // so it can be pasted later on and retain it's preformatted nature.\n        this.listenTo(model, 'getSelectedContent', (evt, [selection]) => {\n            const anchor = selection.anchor;\n            if (selection.isCollapsed || !anchor.parent.is('element', 'codeBlock') || !anchor.hasSameParentAs(selection.focus)) {\n                return;\n            }\n            model.change(writer => {\n                const docFragment = evt.return;\n                // fo[o<softBreak></softBreak>b]ar  ->   <codeBlock language=\"...\">[o<softBreak></softBreak>b]<codeBlock>\n                if (anchor.parent.is('element') &&\n                    (docFragment.childCount > 1 || selection.containsEntireContent(anchor.parent))) {\n                    const codeBlock = writer.createElement('codeBlock', anchor.parent.getAttributes());\n                    writer.append(docFragment, codeBlock);\n                    const newDocumentFragment = writer.createDocumentFragment();\n                    writer.append(codeBlock, newDocumentFragment);\n                    evt.return = newDocumentFragment;\n                    return;\n                }\n                // \"f[oo]\"                          ->   <$text code=\"true\">oo</text>\n                const textNode = docFragment.getChild(0);\n                if (schema.checkAttribute(textNode, 'code')) {\n                    writer.setAttribute('code', true, textNode);\n                }\n            });\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    afterInit() {\n        const editor = this.editor;\n        const commands = editor.commands;\n        const indent = commands.get('indent');\n        const outdent = commands.get('outdent');\n        if (indent) {\n            // Priority is highest due to integration with `IndentList` command of `List` plugin.\n            // If selection is in a code block we give priority to it. This way list item cannot be indented\n            // but if we would give priority to indenting list item then user would have to indent list item\n            // as much as possible and only then he could indent code block.\n            indent.registerChildCommand(commands.get('indentCodeBlock'), { priority: 'highest' });\n        }\n        if (outdent) {\n            outdent.registerChildCommand(commands.get('outdentCodeBlock'));\n        }\n        // Customize the response to the <kbd>Enter</kbd> and <kbd>Shift</kbd>+<kbd>Enter</kbd>\n        // key press when the selection is in the code block. Upon enter key press we can either\n        // leave the block if it's \"two or three enters\" in a row or create a new code block line, preserving\n        // previous line's indentation.\n        this.listenTo(editor.editing.view.document, 'enter', (evt, data) => {\n            const positionParent = editor.model.document.selection.getLastPosition().parent;\n            if (!positionParent.is('element', 'codeBlock')) {\n                return;\n            }\n            if (!leaveBlockStartOnEnter(editor, data.isSoft) && !leaveBlockEndOnEnter(editor, data.isSoft)) {\n                breakLineOnEnter(editor);\n            }\n            data.preventDefault();\n            evt.stop();\n        }, { context: 'pre' });\n    }\n}\n/**\n * Normally, when the Enter (or Shift+Enter) key is pressed, a soft line break is to be added to the\n * code block. Let's try to follow the indentation of the previous line when possible, for instance:\n *\n * ```html\n * // Before pressing enter (or shift enter)\n * <codeBlock>\n * \"    foo()\"[]                   // Indent of 4 spaces.\n * </codeBlock>\n *\n * // After pressing:\n * <codeBlock>\n * \"    foo()\"                 // Indent of 4 spaces.\n * <softBreak></softBreak>     // A new soft break created by pressing enter.\n * \"    \"[]                    // Retain the indent of 4 spaces.\n * </codeBlock>\n * ```\n */\nfunction breakLineOnEnter(editor) {\n    const model = editor.model;\n    const modelDoc = model.document;\n    const lastSelectionPosition = modelDoc.selection.getLastPosition();\n    const node = lastSelectionPosition.nodeBefore || lastSelectionPosition.textNode;\n    let leadingWhiteSpaces;\n    // Figure out the indentation (white space chars) at the beginning of the line.\n    if (node && node.is('$text')) {\n        leadingWhiteSpaces = getLeadingWhiteSpaces(node);\n    }\n    // Keeping everything in a change block for a single undo step.\n    editor.model.change(writer => {\n        editor.execute('shiftEnter');\n        // If the line before being broken in two had some indentation, let's retain it\n        // in the new line.\n        if (leadingWhiteSpaces) {\n            writer.insertText(leadingWhiteSpaces, modelDoc.selection.anchor);\n        }\n    });\n}\n/**\n * Leave the code block when Enter (but NOT Shift+Enter) has been pressed twice at the beginning\n * of the code block:\n *\n * ```html\n * // Before:\n * <codeBlock>[]<softBreak></softBreak>foo</codeBlock>\n *\n * // After pressing:\n * <paragraph>[]</paragraph><codeBlock>foo</codeBlock>\n * ```\n *\n * @param isSoftEnter When `true`, enter was pressed along with <kbd>Shift</kbd>.\n * @returns `true` when selection left the block. `false` if stayed.\n */\nfunction leaveBlockStartOnEnter(editor, isSoftEnter) {\n    const model = editor.model;\n    const modelDoc = model.document;\n    const view = editor.editing.view;\n    const lastSelectionPosition = modelDoc.selection.getLastPosition();\n    const nodeAfter = lastSelectionPosition.nodeAfter;\n    if (isSoftEnter || !modelDoc.selection.isCollapsed || !lastSelectionPosition.isAtStart) {\n        return false;\n    }\n    if (!isSoftBreakNode(nodeAfter)) {\n        return false;\n    }\n    // We're doing everything in a single change block to have a single undo step.\n    editor.model.change(writer => {\n        // \"Clone\" the <codeBlock> in the standard way.\n        editor.execute('enter');\n        // The cloned block exists now before the original code block.\n        const newBlock = modelDoc.selection.anchor.parent.previousSibling;\n        // Make the cloned <codeBlock> a regular <paragraph> (with clean attributes, so no language).\n        writer.rename(newBlock, DEFAULT_ELEMENT);\n        writer.setSelection(newBlock, 'in');\n        editor.model.schema.removeDisallowedAttributes([newBlock], writer);\n        // Remove the <softBreak> that originally followed the selection position.\n        writer.remove(nodeAfter);\n    });\n    // Eye candy.\n    view.scrollToTheSelection();\n    return true;\n}\n/**\n * Leave the code block when Enter (but NOT Shift+Enter) has been pressed twice at the end\n * of the code block:\n *\n * ```html\n * // Before:\n * <codeBlock>foo[]</codeBlock>\n *\n * // After first press:\n * <codeBlock>foo<softBreak></softBreak>[]</codeBlock>\n *\n * // After second press:\n * <codeBlock>foo</codeBlock><paragraph>[]</paragraph>\n * ```\n *\n * @param isSoftEnter When `true`, enter was pressed along with <kbd>Shift</kbd>.\n * @returns `true` when selection left the block. `false` if stayed.\n */\nfunction leaveBlockEndOnEnter(editor, isSoftEnter) {\n    const model = editor.model;\n    const modelDoc = model.document;\n    const view = editor.editing.view;\n    const lastSelectionPosition = modelDoc.selection.getLastPosition();\n    const nodeBefore = lastSelectionPosition.nodeBefore;\n    let emptyLineRangeToRemoveOnEnter;\n    if (isSoftEnter || !modelDoc.selection.isCollapsed || !lastSelectionPosition.isAtEnd || !nodeBefore || !nodeBefore.previousSibling) {\n        return false;\n    }\n    // When the position is directly preceded by two soft breaks\n    //\n    //\t\t<codeBlock>foo<softBreak></softBreak><softBreak></softBreak>[]</codeBlock>\n    //\n    // it creates the following range that will be cleaned up before leaving:\n    //\n    //\t\t<codeBlock>foo[<softBreak></softBreak><softBreak></softBreak>]</codeBlock>\n    //\n    if (isSoftBreakNode(nodeBefore) && isSoftBreakNode(nodeBefore.previousSibling)) {\n        emptyLineRangeToRemoveOnEnter = model.createRange(model.createPositionBefore(nodeBefore.previousSibling), model.createPositionAfter(nodeBefore));\n    }\n    // When there's some text before the position that is\n    // preceded by two soft breaks and made purely of whiteâ€“space characters\n    //\n    //\t\t<codeBlock>foo<softBreak></softBreak><softBreak></softBreak>    []</codeBlock>\n    //\n    // it creates the following range to clean up before leaving:\n    //\n    //\t\t<codeBlock>foo[<softBreak></softBreak><softBreak></softBreak>    ]</codeBlock>\n    //\n    else if (isEmptyishTextNode(nodeBefore) &&\n        isSoftBreakNode(nodeBefore.previousSibling) &&\n        isSoftBreakNode(nodeBefore.previousSibling.previousSibling)) {\n        emptyLineRangeToRemoveOnEnter = model.createRange(model.createPositionBefore(nodeBefore.previousSibling.previousSibling), model.createPositionAfter(nodeBefore));\n    }\n    // When there's some text before the position that is made purely of whiteâ€“space characters\n    // and is preceded by some other text made purely of whiteâ€“space characters\n    //\n    //\t\t<codeBlock>foo<softBreak></softBreak>    <softBreak></softBreak>    []</codeBlock>\n    //\n    // it creates the following range to clean up before leaving:\n    //\n    //\t\t<codeBlock>foo[<softBreak></softBreak>    <softBreak></softBreak>    ]</codeBlock>\n    //\n    else if (isEmptyishTextNode(nodeBefore) &&\n        isSoftBreakNode(nodeBefore.previousSibling) &&\n        isEmptyishTextNode(nodeBefore.previousSibling.previousSibling) &&\n        nodeBefore.previousSibling.previousSibling &&\n        isSoftBreakNode(nodeBefore.previousSibling.previousSibling.previousSibling)) {\n        emptyLineRangeToRemoveOnEnter = model.createRange(model.createPositionBefore(nodeBefore.previousSibling.previousSibling.previousSibling), model.createPositionAfter(nodeBefore));\n    }\n    // Not leaving the block in the following cases:\n    //\n    //\t\t<codeBlock>    []</codeBlock>\n    //\t\t<codeBlock>  a []</codeBlock>\n    //\t\t<codeBlock>foo<softBreak></softBreak>[]</codeBlock>\n    //\t\t<codeBlock>foo<softBreak></softBreak><softBreak></softBreak>bar[]</codeBlock>\n    //\t\t<codeBlock>foo<softBreak></softBreak><softBreak></softBreak> a []</codeBlock>\n    //\n    else {\n        return false;\n    }\n    // We're doing everything in a single change block to have a single undo step.\n    editor.model.change(writer => {\n        // Remove the last <softBreak>s and all white space characters that followed them.\n        writer.remove(emptyLineRangeToRemoveOnEnter);\n        // \"Clone\" the <codeBlock> in the standard way.\n        editor.execute('enter');\n        const newBlock = modelDoc.selection.anchor.parent;\n        // Make the cloned <codeBlock> a regular <paragraph> (with clean attributes, so no language).\n        writer.rename(newBlock, DEFAULT_ELEMENT);\n        editor.model.schema.removeDisallowedAttributes([newBlock], writer);\n    });\n    // Eye candy.\n    view.scrollToTheSelection();\n    return true;\n}\nfunction isEmptyishTextNode(node) {\n    return node && node.is('$text') && !node.data.match(/\\S/);\n}\nfunction isSoftBreakNode(node) {\n    return node && node.is('element', 'softBreak');\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module code-block/codeblockui\n */\nimport { icons, Plugin } from 'ckeditor5/src/core.js';\nimport { Collection } from 'ckeditor5/src/utils.js';\nimport { ViewModel, SplitButtonView, createDropdown, addListToDropdown } from 'ckeditor5/src/ui.js';\nimport { getNormalizedAndLocalizedLanguageDefinitions } from './utils.js';\nimport '../theme/codeblock.css';\n/**\n * The code block UI plugin.\n *\n * Introduces the `'codeBlock'` dropdown.\n */\nexport default class CodeBlockUI extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'CodeBlockUI';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        const componentFactory = editor.ui.componentFactory;\n        const normalizedLanguageDefs = getNormalizedAndLocalizedLanguageDefinitions(editor);\n        componentFactory.add('codeBlock', locale => {\n            const command = editor.commands.get('codeBlock');\n            const dropdownView = createDropdown(locale, SplitButtonView);\n            const splitButtonView = dropdownView.buttonView;\n            const accessibleLabel = t('Insert code block');\n            splitButtonView.set({\n                label: accessibleLabel,\n                tooltip: true,\n                icon: icons.codeBlock,\n                isToggleable: true\n            });\n            splitButtonView.bind('isOn').to(command, 'value', value => !!value);\n            splitButtonView.on('execute', () => {\n                editor.execute('codeBlock', {\n                    usePreviousLanguageChoice: true\n                });\n                editor.editing.view.focus();\n            });\n            dropdownView.on('execute', evt => {\n                editor.execute('codeBlock', {\n                    language: evt.source._codeBlockLanguage,\n                    forceValue: true\n                });\n                editor.editing.view.focus();\n            });\n            dropdownView.class = 'ck-code-block-dropdown';\n            dropdownView.bind('isEnabled').to(command);\n            addListToDropdown(dropdownView, () => this._getLanguageListItemDefinitions(normalizedLanguageDefs), {\n                role: 'menu',\n                ariaLabel: accessibleLabel\n            });\n            return dropdownView;\n        });\n    }\n    /**\n     * A helper returning a collection of the `codeBlock` dropdown items representing languages\n     * available for the user to choose from.\n     */\n    _getLanguageListItemDefinitions(normalizedLanguageDefs) {\n        const editor = this.editor;\n        const command = editor.commands.get('codeBlock');\n        const itemDefinitions = new Collection();\n        for (const languageDef of normalizedLanguageDefs) {\n            const definition = {\n                type: 'button',\n                model: new ViewModel({\n                    _codeBlockLanguage: languageDef.language,\n                    label: languageDef.label,\n                    role: 'menuitemradio',\n                    withText: true\n                })\n            };\n            definition.model.bind('isOn').to(command, 'value', value => {\n                return value === definition.model._codeBlockLanguage;\n            });\n            itemDefinitions.add(definition);\n        }\n        return itemDefinitions;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module code-block/codeblock\n */\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport CodeBlockEditing from './codeblockediting.js';\nimport CodeBlockUI from './codeblockui.js';\n/**\n * The code block plugin.\n *\n * For more information about this feature check the {@glink api/code-block package page} and the\n * {@glink features/code-blocks code block} feature guide.\n *\n * This is a \"glue\" plugin that loads the {@link module:code-block/codeblockediting~CodeBlockEditing code block editing feature}\n * and the {@link module:code-block/codeblockui~CodeBlockUI code block UI feature}.\n */\nexport default class CodeBlock extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [CodeBlockEditing, CodeBlockUI];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'CodeBlock';\n    }\n}\n"],
  "mappings": "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",
  "names": ["data"]
}
