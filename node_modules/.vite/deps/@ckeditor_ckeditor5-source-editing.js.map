{
  "version": 3,
  "sources": ["../../@ckeditor/ckeditor5-source-editing/src/utils/formathtml.js", "../../@ckeditor/ckeditor5-source-editing/src/sourceediting.js"],
  "sourcesContent": ["/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module source-editing/utils/formathtml\n */\n/**\n * A simple (and naive) HTML code formatter that returns a formatted HTML markup that can be easily\n * parsed by human eyes. It beautifies the HTML code by adding new lines between elements that behave like block elements\n * (https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements\n * and a few more like `tr`, `td`, and similar ones) and inserting indents for nested content.\n *\n * WARNING: This function works only on a text that does not contain any indentations or new lines.\n * Calling this function on the already formatted text will damage the formatting.\n *\n * @param input An HTML string to format.\n */\nexport function formatHtml(input) {\n    // A list of block-like elements around which the new lines should be inserted, and within which\n    // the indentation of their children should be increased.\n    // The list is partially based on https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements that contains\n    // a full list of HTML block-level elements.\n    // A void element is an element that cannot have any child - https://html.spec.whatwg.org/multipage/syntax.html#void-elements.\n    // Note that <pre> element is not listed on this list to avoid breaking whitespace formatting.\n    // Note that <br> element is not listed and handled separately so no additional white spaces are injected.\n    const elementsToFormat = [\n        { name: 'address', isVoid: false },\n        { name: 'article', isVoid: false },\n        { name: 'aside', isVoid: false },\n        { name: 'blockquote', isVoid: false },\n        { name: 'details', isVoid: false },\n        { name: 'dialog', isVoid: false },\n        { name: 'dd', isVoid: false },\n        { name: 'div', isVoid: false },\n        { name: 'dl', isVoid: false },\n        { name: 'dt', isVoid: false },\n        { name: 'fieldset', isVoid: false },\n        { name: 'figcaption', isVoid: false },\n        { name: 'figure', isVoid: false },\n        { name: 'footer', isVoid: false },\n        { name: 'form', isVoid: false },\n        { name: 'h1', isVoid: false },\n        { name: 'h2', isVoid: false },\n        { name: 'h3', isVoid: false },\n        { name: 'h4', isVoid: false },\n        { name: 'h5', isVoid: false },\n        { name: 'h6', isVoid: false },\n        { name: 'header', isVoid: false },\n        { name: 'hgroup', isVoid: false },\n        { name: 'hr', isVoid: true },\n        { name: 'li', isVoid: false },\n        { name: 'main', isVoid: false },\n        { name: 'nav', isVoid: false },\n        { name: 'ol', isVoid: false },\n        { name: 'p', isVoid: false },\n        { name: 'section', isVoid: false },\n        { name: 'table', isVoid: false },\n        { name: 'tbody', isVoid: false },\n        { name: 'td', isVoid: false },\n        { name: 'th', isVoid: false },\n        { name: 'thead', isVoid: false },\n        { name: 'tr', isVoid: false },\n        { name: 'ul', isVoid: false }\n    ];\n    const elementNamesToFormat = elementsToFormat.map(element => element.name).join('|');\n    // It is not the fastest way to format the HTML markup but the performance should be good enough.\n    const lines = input\n        // Add new line before and after `<tag>` and `</tag>`.\n        // It may separate individual elements with two new lines, but this will be fixed below.\n        .replace(new RegExp(`</?(${elementNamesToFormat})( .*?)?>`, 'g'), '\\n$&\\n')\n        // Keep `<br>`s at the end of line to avoid adding additional whitespaces before `<br>`.\n        .replace(/<br[^>]*>/g, '$&\\n')\n        // Divide input string into lines, which start with either an opening tag, a closing tag, or just a text.\n        .split('\\n');\n    let indentCount = 0;\n    let isPreformattedLine = false;\n    return lines\n        .filter(line => line.length)\n        .map(line => {\n        isPreformattedLine = isPreformattedBlockLine(line, isPreformattedLine);\n        if (isNonVoidOpeningTag(line, elementsToFormat)) {\n            return indentLine(line, indentCount++);\n        }\n        if (isClosingTag(line, elementsToFormat)) {\n            return indentLine(line, --indentCount);\n        }\n        if (isPreformattedLine === 'middle' || isPreformattedLine === 'last') {\n            return line;\n        }\n        return indentLine(line, indentCount);\n    })\n        .join('\\n');\n}\n/**\n * Checks, if an argument is an opening tag of a non-void element to be formatted.\n *\n * @param line String to check.\n * @param elementsToFormat Elements to be formatted.\n */\nfunction isNonVoidOpeningTag(line, elementsToFormat) {\n    return elementsToFormat.some(element => {\n        if (element.isVoid) {\n            return false;\n        }\n        if (!new RegExp(`<${element.name}( .*?)?>`).test(line)) {\n            return false;\n        }\n        return true;\n    });\n}\n/**\n * Checks, if an argument is a closing tag.\n *\n * @param line String to check.\n * @param elementsToFormat Elements to be formatted.\n */\nfunction isClosingTag(line, elementsToFormat) {\n    return elementsToFormat.some(element => {\n        return new RegExp(`</${element.name}>`).test(line);\n    });\n}\n/**\n * Indents a line by a specified number of characters.\n *\n * @param line Line to indent.\n * @param indentCount Number of characters to use for indentation.\n * @param indentChar Indentation character(s). 4 spaces by default.\n */\nfunction indentLine(line, indentCount, indentChar = '    ') {\n    // More about Math.max() here in https://github.com/ckeditor/ckeditor5/issues/10698.\n    return `${indentChar.repeat(Math.max(0, indentCount))}${line}`;\n}\n/**\n * Checks whether a line belongs to a preformatted (`<pre>`) block.\n *\n * @param line Line to check.\n * @param isPreviousLinePreFormatted Information on whether the previous line was preformatted (and how).\n */\nfunction isPreformattedBlockLine(line, isPreviousLinePreFormatted) {\n    if (new RegExp('<pre( .*?)?>').test(line)) {\n        return 'first';\n    }\n    else if (new RegExp('</pre>').test(line)) {\n        return 'last';\n    }\n    else if (isPreviousLinePreFormatted === 'first' || isPreviousLinePreFormatted === 'middle') {\n        return 'middle';\n    }\n    else {\n        return false;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module source-editing/sourceediting\n */\n/* global console */\nimport { Plugin, PendingActions } from 'ckeditor5/src/core.js';\nimport { ButtonView } from 'ckeditor5/src/ui.js';\nimport { CKEditorError, createElement, ElementReplacer } from 'ckeditor5/src/utils.js';\nimport { formatHtml } from './utils/formathtml.js';\nimport '../theme/sourceediting.css';\nimport sourceEditingIcon from '../theme/icons/source-editing.svg';\nconst COMMAND_FORCE_DISABLE_ID = 'SourceEditingMode';\n/**\n * The source editing feature.\n *\n * It provides the possibility to view and edit the source of the document.\n *\n * For a detailed overview, check the {@glink features/source-editing source editing feature documentation} and the\n * {@glink api/source-editing package page}.\n */\nexport default class SourceEditing extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'SourceEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [PendingActions];\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        this.set('isSourceEditingMode', false);\n        this._elementReplacer = new ElementReplacer();\n        this._replacedRoots = new Map();\n        this._dataFromRoots = new Map();\n        editor.config.define('sourceEditing.allowCollaborationFeatures', false);\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        this._checkCompatibility();\n        const editor = this.editor;\n        const t = editor.t;\n        editor.ui.componentFactory.add('sourceEditing', locale => {\n            const buttonView = new ButtonView(locale);\n            buttonView.set({\n                label: t('Source'),\n                icon: sourceEditingIcon,\n                tooltip: true,\n                withText: true,\n                class: 'ck-source-editing-button'\n            });\n            buttonView.bind('isOn').to(this, 'isSourceEditingMode');\n            // The button should be disabled if one of the following conditions is met:\n            buttonView.bind('isEnabled').to(this, 'isEnabled', editor, 'isReadOnly', editor.plugins.get(PendingActions), 'hasAny', (isEnabled, isEditorReadOnly, hasAnyPendingActions) => {\n                // (1) The plugin itself is disabled.\n                if (!isEnabled) {\n                    return false;\n                }\n                // (2) The editor is in read-only mode.\n                if (isEditorReadOnly) {\n                    return false;\n                }\n                // (3) Any pending action is scheduled. It may change the model, so modifying the document source should be prevented\n                // until the model is finally set.\n                if (hasAnyPendingActions) {\n                    return false;\n                }\n                return true;\n            });\n            this.listenTo(buttonView, 'execute', () => {\n                this.isSourceEditingMode = !this.isSourceEditingMode;\n            });\n            return buttonView;\n        });\n        // Currently, the plugin handles the source editing mode by itself only for the classic editor. To use this plugin with other\n        // integrations, listen to the `change:isSourceEditingMode` event and act accordingly.\n        if (this._isAllowedToHandleSourceEditingMode()) {\n            this.on('change:isSourceEditingMode', (evt, name, isSourceEditingMode) => {\n                if (isSourceEditingMode) {\n                    this._hideVisibleDialog();\n                    this._showSourceEditing();\n                    this._disableCommands();\n                }\n                else {\n                    this._hideSourceEditing();\n                    this._enableCommands();\n                }\n            });\n            this.on('change:isEnabled', (evt, name, isEnabled) => this._handleReadOnlyMode(!isEnabled));\n            this.listenTo(editor, 'change:isReadOnly', (evt, name, isReadOnly) => this._handleReadOnlyMode(isReadOnly));\n        }\n        // Update the editor data while calling editor.getData() in the source editing mode.\n        editor.data.on('get', () => {\n            if (this.isSourceEditingMode) {\n                this.updateEditorData();\n            }\n        }, { priority: 'high' });\n    }\n    /**\n     * Updates the source data in all hidden editing roots.\n     */\n    updateEditorData() {\n        const editor = this.editor;\n        const data = {};\n        for (const [rootName, domSourceEditingElementWrapper] of this._replacedRoots) {\n            const oldData = this._dataFromRoots.get(rootName);\n            const newData = domSourceEditingElementWrapper.dataset.value;\n            // Do not set the data unless some changes have been made in the meantime.\n            // This prevents empty undo steps after switching to the normal editor.\n            if (oldData !== newData) {\n                data[rootName] = newData;\n                this._dataFromRoots.set(rootName, newData);\n            }\n        }\n        if (Object.keys(data).length) {\n            editor.data.set(data, { batchType: { isUndoable: true }, suppressErrorInCollaboration: true });\n        }\n    }\n    _checkCompatibility() {\n        const editor = this.editor;\n        const allowCollaboration = editor.config.get('sourceEditing.allowCollaborationFeatures');\n        if (!allowCollaboration && editor.plugins.has('RealTimeCollaborativeEditing')) {\n            /**\n             * Source editing feature is not fully compatible with real-time collaboration,\n             * and using it may lead to data loss. Please read\n             * {@glink features/source-editing#limitations-and-incompatibilities source editing feature guide} to learn more.\n             *\n             * If you understand the possible risk of data loss, you can enable the source editing\n             * by setting the\n             * {@link module:source-editing/sourceeditingconfig~SourceEditingConfig#allowCollaborationFeatures}\n             * configuration flag to `true`.\n             *\n             * @error source-editing-incompatible-with-real-time-collaboration\n             */\n            throw new CKEditorError('source-editing-incompatible-with-real-time-collaboration', null);\n        }\n        const collaborationPluginNamesToWarn = [\n            'CommentsEditing',\n            'TrackChangesEditing',\n            'RevisionHistory'\n        ];\n        // Currently, the basic integration with Collaboration Features is to display a warning in the console.\n        //\n        // If `allowCollaboration` flag is set, do not show these warnings. If the flag is set, we assume that the integrator read\n        // appropriate section of the guide so there's no use to spam the console with warnings.\n        //\n        if (!allowCollaboration && collaborationPluginNamesToWarn.some(pluginName => editor.plugins.has(pluginName))) {\n            console.warn('You initialized the editor with the source editing feature and at least one of the collaboration features. ' +\n                'Please be advised that the source editing feature may not work, and be careful when editing document source ' +\n                'that contains markers created by the collaboration features.');\n        }\n        // Restricted Editing integration can also lead to problems. Warn the user accordingly.\n        if (editor.plugins.has('RestrictedEditingModeEditing')) {\n            console.warn('You initialized the editor with the source editing feature and restricted editing feature. ' +\n                'Please be advised that the source editing feature may not work, and be careful when editing document source ' +\n                'that contains markers created by the restricted editing feature.');\n        }\n    }\n    /**\n     * Creates source editing wrappers that replace each editing root. Each wrapper contains the document source from the corresponding\n     * root.\n     *\n     * The wrapper element contains a textarea and it solves the problem, that the textarea element cannot auto expand its height based on\n     * the content it contains. The solution is to make the textarea more like a plain div element, which expands in height as much as it\n     * needs to, in order to display the whole document source without scrolling. The wrapper element is a parent for the textarea and for\n     * the pseudo-element `::after`, that replicates the look, content, and position of the textarea. The pseudo-element replica is hidden,\n     * but it is styled to be an identical visual copy of the textarea with the same content. Then, the wrapper is a grid container and both\n     * of its children (the textarea and the `::after` pseudo-element) are positioned within a CSS grid to occupy the same grid cell. The\n     * content in the pseudo-element `::after` is set in CSS and it stretches the grid to the appropriate size based on the textarea value.\n     * Since both children occupy the same grid cell, both have always the same height.\n     */\n    _showSourceEditing() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        const model = editor.model;\n        model.change(writer => {\n            writer.setSelection(null);\n            writer.removeSelectionAttribute(model.document.selection.getAttributeKeys());\n        });\n        // It is not needed to iterate through all editing roots, as currently the plugin supports only the Classic Editor with a single\n        // main root, but this code may help understand and use this feature in external integrations.\n        for (const [rootName, domRootElement] of editingView.domRoots) {\n            const data = formatSource(editor.data.get({ rootName }));\n            const domSourceEditingElementTextarea = createElement(domRootElement.ownerDocument, 'textarea', {\n                rows: '1',\n                'aria-label': 'Source code editing area'\n            });\n            const domSourceEditingElementWrapper = createElement(domRootElement.ownerDocument, 'div', {\n                class: 'ck-source-editing-area',\n                'data-value': data\n            }, [domSourceEditingElementTextarea]);\n            domSourceEditingElementTextarea.value = data;\n            // Setting a value to textarea moves the input cursor to the end. We want the selection at the beginning.\n            domSourceEditingElementTextarea.setSelectionRange(0, 0);\n            // Bind the textarea's value to the wrapper's `data-value` property. Each change of the textarea's value updates the\n            // wrapper's `data-value` property.\n            domSourceEditingElementTextarea.addEventListener('input', () => {\n                domSourceEditingElementWrapper.dataset.value = domSourceEditingElementTextarea.value;\n                editor.ui.update();\n            });\n            editingView.change(writer => {\n                const viewRoot = editingView.document.getRoot(rootName);\n                writer.addClass('ck-hidden', viewRoot);\n            });\n            // Register the element so it becomes available for Alt+F10 and Esc navigation.\n            editor.ui.setEditableElement('sourceEditing:' + rootName, domSourceEditingElementTextarea);\n            this._replacedRoots.set(rootName, domSourceEditingElementWrapper);\n            this._elementReplacer.replace(domRootElement, domSourceEditingElementWrapper);\n            this._dataFromRoots.set(rootName, data);\n        }\n        this._focusSourceEditing();\n    }\n    /**\n     * Restores all hidden editing roots and sets the source data in them.\n     */\n    _hideSourceEditing() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        this.updateEditorData();\n        editingView.change(writer => {\n            for (const [rootName] of this._replacedRoots) {\n                writer.removeClass('ck-hidden', editingView.document.getRoot(rootName));\n            }\n        });\n        this._elementReplacer.restore();\n        this._replacedRoots.clear();\n        this._dataFromRoots.clear();\n        editingView.focus();\n    }\n    /**\n     * Focuses the textarea containing document source from the first editing root.\n     */\n    _focusSourceEditing() {\n        const editor = this.editor;\n        const [domSourceEditingElementWrapper] = this._replacedRoots.values();\n        const textarea = domSourceEditingElementWrapper.querySelector('textarea');\n        // The FocusObserver was disabled by View.render() while the DOM root was getting hidden and the replacer\n        // revealed the textarea. So it couldn't notice that the DOM root got blurred in the process.\n        // Let's sync this state manually here because otherwise Renderer will attempt to render selection\n        // in an invisible DOM root.\n        editor.editing.view.document.isFocused = false;\n        textarea.focus();\n    }\n    /**\n     * Disables all commands.\n     */\n    _disableCommands() {\n        const editor = this.editor;\n        for (const command of editor.commands.commands()) {\n            command.forceDisabled(COMMAND_FORCE_DISABLE_ID);\n        }\n    }\n    /**\n     * Clears forced disable for all commands, that was previously set through {@link #_disableCommands}.\n     */\n    _enableCommands() {\n        const editor = this.editor;\n        for (const command of editor.commands.commands()) {\n            command.clearForceDisabled(COMMAND_FORCE_DISABLE_ID);\n        }\n    }\n    /**\n     * Adds or removes the `readonly` attribute from the textarea from all roots, if document source mode is active.\n     *\n     * @param isReadOnly Indicates whether all textarea elements should be read-only.\n     */\n    _handleReadOnlyMode(isReadOnly) {\n        if (!this.isSourceEditingMode) {\n            return;\n        }\n        for (const [, domSourceEditingElementWrapper] of this._replacedRoots) {\n            domSourceEditingElementWrapper.querySelector('textarea').readOnly = isReadOnly;\n        }\n    }\n    /**\n     * Checks, if the plugin is allowed to handle the source editing mode by itself. Currently, the source editing mode is supported only\n     * for the {@link module:editor-classic/classiceditor~ClassicEditor classic editor}.\n     */\n    _isAllowedToHandleSourceEditingMode() {\n        const editor = this.editor;\n        const editable = editor.ui.view.editable;\n        // Checks, if the editor's editable belongs to the editor's DOM tree.\n        return editable && !editable.hasExternalElement;\n    }\n    /**\n     * If any {@link module:ui/dialog/dialogview~DialogView editor dialog} is currently visible, hide it.\n     */\n    _hideVisibleDialog() {\n        if (this.editor.plugins.has('Dialog')) {\n            const dialogPlugin = this.editor.plugins.get('Dialog');\n            if (dialogPlugin.isOpen) {\n                dialogPlugin.hide();\n            }\n        }\n    }\n}\n/**\n * Formats the content for a better readability.\n *\n * For a non-HTML source the unchanged input string is returned.\n *\n * @param input Input string to check.\n */\nfunction formatSource(input) {\n    if (!isHtml(input)) {\n        return input;\n    }\n    return formatHtml(input);\n}\n/**\n * Checks, if the document source is HTML. It is sufficient to just check the first character from the document data.\n *\n * @param input Input string to check.\n */\nfunction isHtml(input) {\n    return input.startsWith('<');\n}\n"],
  "mappings": "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",
  "names": []
}
