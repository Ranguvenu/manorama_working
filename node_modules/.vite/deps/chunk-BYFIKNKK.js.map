{
  "version": 3,
  "sources": ["../../@ckeditor/ckeditor5-widget/src/widgetresize/resizerstate.js", "../../@ckeditor/ckeditor5-widget/src/widgetresize/sizeview.js", "../../@ckeditor/ckeditor5-widget/src/widgetresize/resizer.js", "../../@ckeditor/ckeditor5-widget/src/widgetresize.js"],
  "sourcesContent": ["/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module widget/widgetresize/resizerstate\n */\nimport { ObservableMixin, Rect } from '@ckeditor/ckeditor5-utils';\n/**\n * Stores the internal state of a single resizable object.\n */\nexport default class ResizeState extends ObservableMixin() {\n    /**\n     * @param options Resizer options.\n     */\n    constructor(options) {\n        super();\n        this.set('activeHandlePosition', null);\n        this.set('proposedWidthPercents', null);\n        this.set('proposedWidth', null);\n        this.set('proposedHeight', null);\n        this.set('proposedHandleHostWidth', null);\n        this.set('proposedHandleHostHeight', null);\n        this._options = options;\n        this._referenceCoordinates = null;\n    }\n    /**\n     * The original width (pixels) of the resized object when the resize process was started.\n     */\n    get originalWidth() {\n        return this._originalWidth;\n    }\n    /**\n     * The original height (pixels) of the resized object when the resize process was started.\n     */\n    get originalHeight() {\n        return this._originalHeight;\n    }\n    /**\n     * The original width (percents) of the resized object when the resize process was started.\n     */\n    get originalWidthPercents() {\n        return this._originalWidthPercents;\n    }\n    /**\n     * A width to height ratio of the resized image.\n     */\n    get aspectRatio() {\n        return this._aspectRatio;\n    }\n    /**\n     *\n     * @param domResizeHandle The handle used to calculate the reference point.\n     */\n    begin(domResizeHandle, domHandleHost, domResizeHost) {\n        const clientRect = new Rect(domHandleHost);\n        this.activeHandlePosition = getHandlePosition(domResizeHandle);\n        this._referenceCoordinates = getAbsoluteBoundaryPoint(domHandleHost, getOppositePosition(this.activeHandlePosition));\n        this._originalWidth = clientRect.width;\n        this._originalHeight = clientRect.height;\n        this._aspectRatio = clientRect.width / clientRect.height;\n        const widthStyle = domResizeHost.style.width;\n        if (widthStyle && widthStyle.match(/^\\d+(\\.\\d*)?%$/)) {\n            this._originalWidthPercents = parseFloat(widthStyle);\n        }\n        else {\n            this._originalWidthPercents = calculateHostPercentageWidth(domResizeHost, clientRect);\n        }\n    }\n    update(newSize) {\n        this.proposedWidth = newSize.width;\n        this.proposedHeight = newSize.height;\n        this.proposedWidthPercents = newSize.widthPercents;\n        this.proposedHandleHostWidth = newSize.handleHostWidth;\n        this.proposedHandleHostHeight = newSize.handleHostHeight;\n    }\n}\n/**\n * Calculates a relative width of a `domResizeHost` compared to its ancestor in percents.\n */\nfunction calculateHostPercentageWidth(domResizeHost, resizeHostRect) {\n    const domResizeHostParent = domResizeHost.parentElement;\n    // Need to use computed style as it properly excludes parent's paddings from the returned value.\n    let parentWidth = parseFloat(domResizeHostParent.ownerDocument.defaultView.getComputedStyle(domResizeHostParent).width);\n    // Sometimes parent width cannot be accessed. If that happens we should go up in the elements tree\n    // and try to get width from next ancestor.\n    // https://github.com/ckeditor/ckeditor5/issues/10776\n    const ancestorLevelLimit = 5;\n    let currentLevel = 0;\n    let checkedElement = domResizeHostParent;\n    while (isNaN(parentWidth)) {\n        checkedElement = checkedElement.parentElement;\n        if (++currentLevel > ancestorLevelLimit) {\n            return 0;\n        }\n        parentWidth = parseFloat(domResizeHostParent.ownerDocument.defaultView.getComputedStyle(checkedElement).width);\n    }\n    return resizeHostRect.width / parentWidth * 100;\n}\n/**\n * Returns coordinates of the top-left corner of an element, relative to the document's top-left corner.\n *\n * @param resizerPosition The position of the resize handle, e.g. `\"top-left\"`, `\"bottom-right\"`.\n */\nfunction getAbsoluteBoundaryPoint(element, resizerPosition) {\n    const elementRect = new Rect(element);\n    const positionParts = resizerPosition.split('-');\n    const ret = {\n        x: positionParts[1] == 'right' ? elementRect.right : elementRect.left,\n        y: positionParts[0] == 'bottom' ? elementRect.bottom : elementRect.top\n    };\n    ret.x += element.ownerDocument.defaultView.scrollX;\n    ret.y += element.ownerDocument.defaultView.scrollY;\n    return ret;\n}\n/**\n * @param resizerPosition The expected resizer position, like `\"top-left\"`, `\"bottom-right\"`.\n * @returns A prefixed HTML class name for the resizer element.\n */\nfunction getResizerHandleClass(resizerPosition) {\n    return `ck-widget__resizer__handle-${resizerPosition}`;\n}\n/**\n * Determines the position of a given resize handle.\n *\n * @param domHandle Handle used to calculate the reference point.\n * @returns Returns a string like `\"top-left\"` or `undefined` if not matched.\n */\nfunction getHandlePosition(domHandle) {\n    const resizerPositions = ['top-left', 'top-right', 'bottom-right', 'bottom-left'];\n    for (const position of resizerPositions) {\n        if (domHandle.classList.contains(getResizerHandleClass(position))) {\n            return position;\n        }\n    }\n}\n/**\n * @param position Like `\"top-left\"`.\n * @returns Inverted `position`, e.g. it returns `\"bottom-right\"` if `\"top-left\"` was given as `position`.\n */\nfunction getOppositePosition(position) {\n    const parts = position.split('-');\n    const replacements = {\n        top: 'bottom',\n        bottom: 'top',\n        left: 'right',\n        right: 'left'\n    };\n    return `${replacements[parts[0]]}-${replacements[parts[1]]}`;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module widget/widgetresize/sizeview\n */\nimport { View } from '@ckeditor/ckeditor5-ui';\n/**\n * A view displaying the proposed new element size during the resizing.\n */\nexport default class SizeView extends View {\n    constructor() {\n        super();\n        const bind = this.bindTemplate;\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-size-view',\n                    bind.to('_viewPosition', value => value ? `ck-orientation-${value}` : '')\n                ],\n                style: {\n                    display: bind.if('_isVisible', 'none', visible => !visible)\n                }\n            },\n            children: [{\n                    text: bind.to('_label')\n                }]\n        });\n    }\n    /**\n     * A method used for binding the `SizeView` instance properties to the `ResizeState` instance observable properties.\n     *\n     * @internal\n     * @param options An object defining the resizer options, used for setting the proper size label.\n     * @param resizeState The `ResizeState` class instance, used for keeping the `SizeView` state up to date.\n     */\n    _bindToState(options, resizeState) {\n        this.bind('_isVisible').to(resizeState, 'proposedWidth', resizeState, 'proposedHeight', (width, height) => width !== null && height !== null);\n        this.bind('_label').to(resizeState, 'proposedHandleHostWidth', resizeState, 'proposedHandleHostHeight', resizeState, 'proposedWidthPercents', (width, height, widthPercents) => {\n            if (options.unit === 'px') {\n                return `${width}Ã—${height}`;\n            }\n            else {\n                return `${widthPercents}%`;\n            }\n        });\n        this.bind('_viewPosition').to(resizeState, 'activeHandlePosition', resizeState, 'proposedHandleHostWidth', resizeState, 'proposedHandleHostHeight', \n        // If the widget is too small to contain the size label, display the label above.\n        (position, width, height) => width < 50 || height < 50 ? 'above-center' : position);\n    }\n    /**\n     * A method used for cleaning up. It removes the bindings and hides the view.\n     *\n     * @internal\n     */\n    _dismiss() {\n        this.unbind();\n        this._isVisible = false;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module widget/widgetresize/resizer\n */\nimport { Template } from '@ckeditor/ckeditor5-ui';\nimport { Rect, ObservableMixin, compareArrays } from '@ckeditor/ckeditor5-utils';\nimport ResizeState from './resizerstate.js';\nimport SizeView from './sizeview.js';\n/**\n * Represents a resizer for a single resizable object.\n */\nexport default class Resizer extends ObservableMixin() {\n    /**\n     * @param options Resizer options.\n     */\n    constructor(options) {\n        super();\n        /**\n         * A wrapper that is controlled by the resizer. This is usually a widget element.\n         */\n        this._viewResizerWrapper = null;\n        this._options = options;\n        this.set('isEnabled', true);\n        this.set('isSelected', false);\n        this.bind('isVisible').to(this, 'isEnabled', this, 'isSelected', (isEnabled, isSelected) => isEnabled && isSelected);\n        this.decorate('begin');\n        this.decorate('cancel');\n        this.decorate('commit');\n        this.decorate('updateSize');\n        this.on('commit', event => {\n            // State might not be initialized yet. In this case, prevent further handling and make sure that the resizer is\n            // cleaned up (#5195).\n            if (!this.state.proposedWidth && !this.state.proposedWidthPercents) {\n                this._cleanup();\n                event.stop();\n            }\n        }, { priority: 'high' });\n    }\n    /**\n     * Stores the state of the resizable host geometry, such as the original width, the currently proposed height, etc.\n     *\n     * Note that a new state is created for each resize transaction.\n     */\n    get state() {\n        return this._state;\n    }\n    /**\n     * Makes resizer visible in the UI.\n     */\n    show() {\n        const editingView = this._options.editor.editing.view;\n        editingView.change(writer => {\n            writer.removeClass('ck-hidden', this._viewResizerWrapper);\n        });\n    }\n    /**\n     * Hides resizer in the UI.\n     */\n    hide() {\n        const editingView = this._options.editor.editing.view;\n        editingView.change(writer => {\n            writer.addClass('ck-hidden', this._viewResizerWrapper);\n        });\n    }\n    /**\n     * Attaches the resizer to the DOM.\n     */\n    attach() {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const that = this;\n        const widgetElement = this._options.viewElement;\n        const editingView = this._options.editor.editing.view;\n        editingView.change(writer => {\n            const viewResizerWrapper = writer.createUIElement('div', {\n                class: 'ck ck-reset_all ck-widget__resizer'\n            }, function (domDocument) {\n                const domElement = this.toDomElement(domDocument);\n                that._appendHandles(domElement);\n                that._appendSizeUI(domElement);\n                return domElement;\n            });\n            // Append the resizer wrapper to the widget's wrapper.\n            writer.insert(writer.createPositionAt(widgetElement, 'end'), viewResizerWrapper);\n            writer.addClass('ck-widget_with-resizer', widgetElement);\n            this._viewResizerWrapper = viewResizerWrapper;\n            if (!this.isVisible) {\n                this.hide();\n            }\n        });\n        this.on('change:isVisible', () => {\n            if (this.isVisible) {\n                this.show();\n                this.redraw();\n            }\n            else {\n                this.hide();\n            }\n        });\n    }\n    /**\n     * Starts the resizing process.\n     *\n     * Creates a new {@link #state} for the current process.\n     *\n     * @fires begin\n     * @param domResizeHandle Clicked handle.\n     */\n    begin(domResizeHandle) {\n        this._state = new ResizeState(this._options);\n        this._sizeView._bindToState(this._options, this.state);\n        this._initialViewWidth = this._options.viewElement.getStyle('width');\n        this.state.begin(domResizeHandle, this._getHandleHost(), this._getResizeHost());\n    }\n    /**\n     * Updates the proposed size based on `domEventData`.\n     *\n     * @fires updateSize\n     */\n    updateSize(domEventData) {\n        const newSize = this._proposeNewSize(domEventData);\n        const editingView = this._options.editor.editing.view;\n        editingView.change(writer => {\n            const unit = this._options.unit || '%';\n            const newWidth = (unit === '%' ? newSize.widthPercents : newSize.width) + unit;\n            writer.setStyle('width', newWidth, this._options.viewElement);\n        });\n        // Get an actual image width, and:\n        // * reflect this size to the resize wrapper\n        // * apply this **real** size to the state\n        const domHandleHost = this._getHandleHost();\n        const domHandleHostRect = new Rect(domHandleHost);\n        const handleHostWidth = Math.round(domHandleHostRect.width);\n        const handleHostHeight = Math.round(domHandleHostRect.height);\n        // Handle max-width limitation.\n        const domResizeHostRect = new Rect(domHandleHost);\n        newSize.width = Math.round(domResizeHostRect.width);\n        newSize.height = Math.round(domResizeHostRect.height);\n        this.redraw(domHandleHostRect);\n        this.state.update({\n            ...newSize,\n            handleHostWidth,\n            handleHostHeight\n        });\n    }\n    /**\n     * Applies the geometry proposed with the resizer.\n     *\n     * @fires commit\n     */\n    commit() {\n        const unit = this._options.unit || '%';\n        const newValue = (unit === '%' ? this.state.proposedWidthPercents : this.state.proposedWidth) + unit;\n        // Both cleanup and onCommit callback are very likely to make view changes. Ensure that it is made in a single step.\n        this._options.editor.editing.view.change(() => {\n            this._cleanup();\n            this._options.onCommit(newValue);\n        });\n    }\n    /**\n     * Cancels and rejects the proposed resize dimensions, hiding the UI.\n     *\n     * @fires cancel\n     */\n    cancel() {\n        this._cleanup();\n    }\n    /**\n     * Destroys the resizer.\n     */\n    destroy() {\n        this.cancel();\n    }\n    /**\n     * Redraws the resizer.\n     *\n     * @param handleHostRect Handle host rectangle might be given to improve performance.\n     */\n    redraw(handleHostRect) {\n        const domWrapper = this._domResizerWrapper;\n        // Refresh only if resizer exists in the DOM.\n        if (!existsInDom(domWrapper)) {\n            return;\n        }\n        const widgetWrapper = domWrapper.parentElement;\n        const handleHost = this._getHandleHost();\n        const resizerWrapper = this._viewResizerWrapper;\n        const currentDimensions = [\n            resizerWrapper.getStyle('width'),\n            resizerWrapper.getStyle('height'),\n            resizerWrapper.getStyle('left'),\n            resizerWrapper.getStyle('top')\n        ];\n        let newDimensions;\n        if (widgetWrapper.isSameNode(handleHost)) {\n            const clientRect = handleHostRect || new Rect(handleHost);\n            newDimensions = [\n                clientRect.width + 'px',\n                clientRect.height + 'px',\n                undefined,\n                undefined\n            ];\n        }\n        // In case a resizing host is not a widget wrapper, we need to compensate\n        // for any additional offsets the resize host might have. E.g. wrapper padding\n        // or simply another editable. By doing that the border and resizers are shown\n        // only around the resize host.\n        else {\n            newDimensions = [\n                handleHost.offsetWidth + 'px',\n                handleHost.offsetHeight + 'px',\n                handleHost.offsetLeft + 'px',\n                handleHost.offsetTop + 'px'\n            ];\n        }\n        // Make changes to the view only if the resizer should actually get new dimensions.\n        // Otherwise, if View#change() was always called, this would cause EditorUI#update\n        // loops because the WidgetResize plugin listens to EditorUI#update and updates\n        // the resizer.\n        // https://github.com/ckeditor/ckeditor5/issues/7633\n        if (compareArrays(currentDimensions, newDimensions) !== 'same') {\n            this._options.editor.editing.view.change(writer => {\n                writer.setStyle({\n                    width: newDimensions[0],\n                    height: newDimensions[1],\n                    left: newDimensions[2],\n                    top: newDimensions[3]\n                }, resizerWrapper);\n            });\n        }\n    }\n    containsHandle(domElement) {\n        return this._domResizerWrapper.contains(domElement);\n    }\n    static isResizeHandle(domElement) {\n        return domElement.classList.contains('ck-widget__resizer__handle');\n    }\n    /**\n     * Cleans up the context state.\n     */\n    _cleanup() {\n        this._sizeView._dismiss();\n        const editingView = this._options.editor.editing.view;\n        editingView.change(writer => {\n            writer.setStyle('width', this._initialViewWidth, this._options.viewElement);\n        });\n    }\n    /**\n     * Calculates the proposed size as the resize handles are dragged.\n     *\n     * @param domEventData Event data that caused the size update request. It should be used to calculate the proposed size.\n     */\n    _proposeNewSize(domEventData) {\n        const state = this.state;\n        const currentCoordinates = extractCoordinates(domEventData);\n        const isCentered = this._options.isCentered ? this._options.isCentered(this) : true;\n        // Enlargement defines how much the resize host has changed in a given axis. Naturally it could be a negative number\n        // meaning that it has been shrunk.\n        //\n        // +----------------+--+\n        // |                |  |\n        // |       img      |  |\n        // |  /handle host  |  |\n        // +----------------+  | ^\n        // |                   | | - enlarge y\n        // +-------------------+ v\n        // \t\t\t\t\t<-->\n        // \t\t\t\t\t enlarge x\n        const enlargement = {\n            x: state._referenceCoordinates.x - (currentCoordinates.x + state.originalWidth),\n            y: (currentCoordinates.y - state.originalHeight) - state._referenceCoordinates.y\n        };\n        if (isCentered && state.activeHandlePosition.endsWith('-right')) {\n            enlargement.x = currentCoordinates.x - (state._referenceCoordinates.x + state.originalWidth);\n        }\n        // Objects needs to be resized twice as much in horizontal axis if centered, since enlargement is counted from\n        // one resized corner to your cursor. It needs to be duplicated to compensate for the other side too.\n        if (isCentered) {\n            enlargement.x *= 2;\n        }\n        // const resizeHost = this._getResizeHost();\n        // The size proposed by the user. It does not consider the aspect ratio.\n        let width = Math.abs(state.originalWidth + enlargement.x);\n        let height = Math.abs(state.originalHeight + enlargement.y);\n        // Dominant determination must take the ratio into account.\n        const dominant = width / state.aspectRatio > height ? 'width' : 'height';\n        if (dominant == 'width') {\n            height = width / state.aspectRatio;\n        }\n        else {\n            width = height * state.aspectRatio;\n        }\n        return {\n            width: Math.round(width),\n            height: Math.round(height),\n            widthPercents: Math.min(Math.round(state.originalWidthPercents / state.originalWidth * width * 100) / 100, 100)\n        };\n    }\n    /**\n     * Obtains the resize host.\n     *\n     * Resize host is an object that receives dimensions which are the result of resizing.\n     */\n    _getResizeHost() {\n        const widgetWrapper = this._domResizerWrapper.parentElement;\n        return this._options.getResizeHost(widgetWrapper);\n    }\n    /**\n     * Obtains the handle host.\n     *\n     * Handle host is an object that the handles are aligned to.\n     *\n     * Handle host will not always be an entire widget itself. Take an image as an example. The image widget\n     * contains an image and a caption. Only the image should be surrounded with handles.\n     */\n    _getHandleHost() {\n        const widgetWrapper = this._domResizerWrapper.parentElement;\n        return this._options.getHandleHost(widgetWrapper);\n    }\n    /**\n     * DOM container of the entire resize UI.\n     *\n     * Note that this property will have a value only after the element bound with the resizer is rendered\n     * (otherwise `null`).\n     */\n    get _domResizerWrapper() {\n        return this._options.editor.editing.view.domConverter.mapViewToDom(this._viewResizerWrapper);\n    }\n    /**\n     * Renders the resize handles in the DOM.\n     *\n     * @param domElement The resizer wrapper.\n     */\n    _appendHandles(domElement) {\n        const resizerPositions = ['top-left', 'top-right', 'bottom-right', 'bottom-left'];\n        for (const currentPosition of resizerPositions) {\n            domElement.appendChild((new Template({\n                tag: 'div',\n                attributes: {\n                    class: `ck-widget__resizer__handle ${getResizerClass(currentPosition)}`\n                }\n            }).render()));\n        }\n    }\n    /**\n     * Sets up the {@link #_sizeView} property and adds it to the passed `domElement`.\n     */\n    _appendSizeUI(domElement) {\n        this._sizeView = new SizeView();\n        // Make sure icon#element is rendered before passing to appendChild().\n        this._sizeView.render();\n        domElement.appendChild(this._sizeView.element);\n    }\n}\n/**\n * @param resizerPosition Expected resizer position like `\"top-left\"`, `\"bottom-right\"`.\n * @returns A prefixed HTML class name for the resizer element\n */\nfunction getResizerClass(resizerPosition) {\n    return `ck-widget__resizer__handle-${resizerPosition}`;\n}\nfunction extractCoordinates(event) {\n    return {\n        x: event.pageX,\n        y: event.pageY\n    };\n}\nfunction existsInDom(element) {\n    return element && element.ownerDocument && element.ownerDocument.contains(element);\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module widget/widgetresize\n */\nimport Resizer from './widgetresize/resizer.js';\nimport { Plugin } from '@ckeditor/ckeditor5-core';\nimport { MouseObserver } from '@ckeditor/ckeditor5-engine';\nimport { DomEmitterMixin, global } from '@ckeditor/ckeditor5-utils';\nimport { throttle } from 'lodash-es';\nimport '../theme/widgetresize.css';\n/**\n * The widget resize feature plugin.\n *\n * Use the {@link module:widget/widgetresize~WidgetResize#attachTo} method to create a resizer for the specified widget.\n */\nexport default class WidgetResize extends Plugin {\n    constructor() {\n        super(...arguments);\n        /**\n         * A map of resizers created using this plugin instance.\n         */\n        this._resizers = new Map();\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'WidgetResize';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editing = this.editor.editing;\n        const domDocument = global.window.document;\n        this.set('selectedResizer', null);\n        this.set('_activeResizer', null);\n        editing.view.addObserver(MouseObserver);\n        this._observer = new (DomEmitterMixin())();\n        this.listenTo(editing.view.document, 'mousedown', this._mouseDownListener.bind(this), { priority: 'high' });\n        this._observer.listenTo(domDocument, 'mousemove', this._mouseMoveListener.bind(this));\n        this._observer.listenTo(domDocument, 'mouseup', this._mouseUpListener.bind(this));\n        this._redrawSelectedResizerThrottled = throttle(() => this.redrawSelectedResizer(), 200);\n        // Redrawing on any change of the UI of the editor (including content changes).\n        this.editor.ui.on('update', this._redrawSelectedResizerThrottled);\n        // Remove view widget-resizer mappings for widgets that have been removed from the document.\n        // https://github.com/ckeditor/ckeditor5/issues/10156\n        // https://github.com/ckeditor/ckeditor5/issues/10266\n        this.editor.model.document.on('change', () => {\n            for (const [viewElement, resizer] of this._resizers) {\n                if (!viewElement.isAttached()) {\n                    this._resizers.delete(viewElement);\n                    resizer.destroy();\n                }\n            }\n        }, { priority: 'lowest' });\n        // Resizers need to be redrawn upon window resize, because new window might shrink resize host.\n        this._observer.listenTo(global.window, 'resize', this._redrawSelectedResizerThrottled);\n        const viewSelection = this.editor.editing.view.document.selection;\n        viewSelection.on('change', () => {\n            const selectedElement = viewSelection.getSelectedElement();\n            const resizer = this.getResizerByViewElement(selectedElement) || null;\n            if (resizer) {\n                this.select(resizer);\n            }\n            else {\n                this.deselect();\n            }\n        });\n    }\n    /**\n     * Redraws the selected resizer if there is any selected resizer and if it is visible.\n     */\n    redrawSelectedResizer() {\n        if (this.selectedResizer && this.selectedResizer.isVisible) {\n            this.selectedResizer.redraw();\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    destroy() {\n        super.destroy();\n        this._observer.stopListening();\n        for (const resizer of this._resizers.values()) {\n            resizer.destroy();\n        }\n        this._redrawSelectedResizerThrottled.cancel();\n    }\n    /**\n     * Marks resizer as selected.\n     */\n    select(resizer) {\n        this.deselect();\n        this.selectedResizer = resizer;\n        this.selectedResizer.isSelected = true;\n    }\n    /**\n     * Deselects currently set resizer.\n     */\n    deselect() {\n        if (this.selectedResizer) {\n            this.selectedResizer.isSelected = false;\n        }\n        this.selectedResizer = null;\n    }\n    /**\n     * @param options Resizer options.\n     */\n    attachTo(options) {\n        const resizer = new Resizer(options);\n        const plugins = this.editor.plugins;\n        resizer.attach();\n        if (plugins.has('WidgetToolbarRepository')) {\n            // Hiding widget toolbar to improve the performance\n            // (https://github.com/ckeditor/ckeditor5-widget/pull/112#issuecomment-564528765).\n            const widgetToolbarRepository = plugins.get('WidgetToolbarRepository');\n            resizer.on('begin', () => {\n                widgetToolbarRepository.forceDisabled('resize');\n            }, { priority: 'lowest' });\n            resizer.on('cancel', () => {\n                widgetToolbarRepository.clearForceDisabled('resize');\n            }, { priority: 'highest' });\n            resizer.on('commit', () => {\n                widgetToolbarRepository.clearForceDisabled('resize');\n            }, { priority: 'highest' });\n        }\n        this._resizers.set(options.viewElement, resizer);\n        const viewSelection = this.editor.editing.view.document.selection;\n        const selectedElement = viewSelection.getSelectedElement();\n        // If the element the resizer is created for is currently focused, it should become visible.\n        if (this.getResizerByViewElement(selectedElement) == resizer) {\n            this.select(resizer);\n        }\n        return resizer;\n    }\n    /**\n     * Returns a resizer created for a given view element (widget element).\n     *\n     * @param viewElement View element associated with the resizer.\n     */\n    getResizerByViewElement(viewElement) {\n        return this._resizers.get(viewElement);\n    }\n    /**\n     * Returns a resizer that contains a given resize handle.\n     */\n    _getResizerByHandle(domResizeHandle) {\n        for (const resizer of this._resizers.values()) {\n            if (resizer.containsHandle(domResizeHandle)) {\n                return resizer;\n            }\n        }\n    }\n    /**\n     * @param domEventData Native DOM event.\n     */\n    _mouseDownListener(event, domEventData) {\n        const resizeHandle = domEventData.domTarget;\n        if (!Resizer.isResizeHandle(resizeHandle)) {\n            return;\n        }\n        this._activeResizer = this._getResizerByHandle(resizeHandle) || null;\n        if (this._activeResizer) {\n            this._activeResizer.begin(resizeHandle);\n            // Do not call other events when resizing. See: #6755.\n            event.stop();\n            domEventData.preventDefault();\n        }\n    }\n    /**\n     * @param domEventData Native DOM event.\n     */\n    _mouseMoveListener(event, domEventData) {\n        if (this._activeResizer) {\n            this._activeResizer.updateSize(domEventData);\n        }\n    }\n    _mouseUpListener() {\n        if (this._activeResizer) {\n            this._activeResizer.commit();\n            this._activeResizer = null;\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
