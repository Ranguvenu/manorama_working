{
  "version": 3,
  "sources": ["../../@ckeditor/ckeditor5-restricted-editing/src/restrictededitingmodenavigationcommand.js", "../../@ckeditor/ckeditor5-restricted-editing/src/restrictededitingmode/utils.js", "../../@ckeditor/ckeditor5-restricted-editing/src/restrictededitingmode/converters.js", "../../@ckeditor/ckeditor5-restricted-editing/src/restrictededitingmodeediting.js", "../../@ckeditor/ckeditor5-restricted-editing/src/restrictededitingmodeui.js", "../../@ckeditor/ckeditor5-restricted-editing/src/restrictededitingmode.js", "../../@ckeditor/ckeditor5-restricted-editing/src/restrictededitingexceptioncommand.js", "../../@ckeditor/ckeditor5-restricted-editing/src/standardeditingmodeediting.js", "../../@ckeditor/ckeditor5-restricted-editing/src/standardeditingmodeui.js", "../../@ckeditor/ckeditor5-restricted-editing/src/standardeditingmode.js"],
  "sourcesContent": ["/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command } from 'ckeditor5/src/core.js';\n/**\n * The command that allows navigation across the exceptions in the edited document.\n */\nexport default class RestrictedEditingModeNavigationCommand extends Command {\n    /**\n     * Creates an instance of the command.\n     *\n     * @param editor The editor instance.\n     * @param direction The direction that the command works.\n     */\n    constructor(editor, direction) {\n        super(editor);\n        // It does not affect data so should be enabled in read-only mode and in restricted editing mode.\n        this.affectsData = false;\n        this._direction = direction;\n    }\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        this.isEnabled = this._checkEnabled();\n    }\n    /**\n     * Executes the command.\n     *\n     * @fires execute\n     */\n    execute() {\n        const position = getNearestExceptionRange(this.editor.model, this._direction);\n        if (!position) {\n            return;\n        }\n        this.editor.model.change(writer => {\n            writer.setSelection(position);\n        });\n    }\n    /**\n     * Checks whether the command can be enabled in the current context.\n     *\n     * @returns Whether the command should be enabled.\n     */\n    _checkEnabled() {\n        return !!getNearestExceptionRange(this.editor.model, this._direction);\n    }\n}\n/**\n * Returns the range of the exception marker closest to the last position of the model selection.\n */\nfunction getNearestExceptionRange(model, direction) {\n    const selection = model.document.selection;\n    const selectionPosition = selection.getFirstPosition();\n    const markerRanges = [];\n    // Get all exception marker positions that start after/before the selection position.\n    for (const marker of model.markers.getMarkersGroup('restrictedEditingException')) {\n        const markerRange = marker.getRange();\n        // Checking parent because there two positions <paragraph>foo^</paragraph><paragraph>^bar</paragraph>\n        // are touching but they will represent different markers.\n        const isMarkerRangeTouching = selectionPosition.isTouching(markerRange.start) && selectionPosition.hasSameParentAs(markerRange.start) ||\n            selectionPosition.isTouching(markerRange.end) && selectionPosition.hasSameParentAs(markerRange.end);\n        // <paragraph>foo <marker≥b[]ar</marker> baz</paragraph>\n        // <paragraph>foo <marker≥b[ar</marker> ba]z</paragraph>\n        // <paragraph>foo <marker≥bar</marker>[] baz</paragraph>\n        // <paragraph>foo []<marker≥bar</marker> baz</paragraph>\n        if (markerRange.containsPosition(selectionPosition) || isMarkerRangeTouching) {\n            continue;\n        }\n        if (direction === 'forward' && markerRange.start.isAfter(selectionPosition)) {\n            markerRanges.push(markerRange);\n        }\n        else if (direction === 'backward' && markerRange.end.isBefore(selectionPosition)) {\n            markerRanges.push(markerRange);\n        }\n    }\n    if (!markerRanges.length) {\n        return;\n    }\n    // Get the marker closest to the selection position among many. To know that, we need to sort\n    // them first.\n    return markerRanges\n        .sort((rangeA, rangeB) => {\n        if (direction === 'forward') {\n            return rangeA.start.isAfter(rangeB.start) ? 1 : -1;\n        }\n        else {\n            return rangeA.start.isBefore(rangeB.start) ? 1 : -1;\n        }\n    })\n        .shift();\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module restricted-editing/restrictededitingmode/utils\n */\n/**\n * Returns a single \"restricted-editing-exception\" marker at a given position. Contrary to\n * {@link module:engine/model/markercollection~MarkerCollection#getMarkersAtPosition}, it returnd a marker also when the postion is\n * equal to one of the marker's start or end positions.\n */\nexport function getMarkerAtPosition(editor, position) {\n    for (const marker of editor.model.markers) {\n        const markerRange = marker.getRange();\n        if (isPositionInRangeBoundaries(markerRange, position)) {\n            if (marker.name.startsWith('restrictedEditingException:')) {\n                return marker;\n            }\n        }\n    }\n}\n/**\n * Checks if the position is fully contained in the range. Positions equal to range start or end are considered \"in\".\n */\nexport function isPositionInRangeBoundaries(range, position) {\n    return (range.containsPosition(position) ||\n        range.end.isEqual(position) ||\n        range.start.isEqual(position));\n}\n/**\n * Checks if the selection is fully contained in the marker. Positions on marker boundaries are considered \"in\".\n *\n * ```xml\n * <marker>[]foo</marker> -> true\n * <marker>f[oo]</marker> -> true\n * <marker>f[oo</marker> ba]r -> false\n * <marker>foo</marker> []bar -> false\n * ```\n */\nexport function isSelectionInMarker(selection, marker) {\n    if (!marker) {\n        return false;\n    }\n    const markerRange = marker.getRange();\n    if (selection.isCollapsed) {\n        return isPositionInRangeBoundaries(markerRange, selection.focus);\n    }\n    return markerRange.containsRange(selection.getFirstRange(), true);\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Matcher } from 'ckeditor5/src/engine.js';\nimport { getMarkerAtPosition } from './utils.js';\nconst HIGHLIGHT_CLASS = 'restricted-editing-exception_selected';\n/**\n * Adds a visual highlight style to a restricted editing exception that the selection is anchored to.\n *\n * The highlight is turned on by adding the `.restricted-editing-exception_selected` class to the\n * exception in the view:\n *\n * * The class is removed before the conversion starts, as callbacks added with the `'highest'` priority\n * to {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} events.\n * * The class is added in the view post-fixer, after other changes in the model tree are converted to the view.\n *\n * This way, adding and removing the highlight does not interfere with conversion.\n */\nexport function setupExceptionHighlighting(editor) {\n    const view = editor.editing.view;\n    const model = editor.model;\n    const highlightedMarkers = new Set();\n    // Adding the class.\n    view.document.registerPostFixer((writer) => {\n        const modelSelection = model.document.selection;\n        const marker = getMarkerAtPosition(editor, modelSelection.anchor);\n        if (!marker) {\n            return false;\n        }\n        for (const viewElement of editor.editing.mapper.markerNameToElements(marker.name)) {\n            writer.addClass(HIGHLIGHT_CLASS, viewElement);\n            highlightedMarkers.add(viewElement);\n        }\n        return false;\n    });\n    // Removing the class.\n    editor.conversion.for('editingDowncast').add(dispatcher => {\n        // Make sure the highlight is removed on every possible event, before conversion is started.\n        dispatcher.on('insert', removeHighlight, { priority: 'highest' });\n        dispatcher.on('remove', removeHighlight, { priority: 'highest' });\n        dispatcher.on('attribute', removeHighlight, { priority: 'highest' });\n        dispatcher.on('cleanSelection', removeHighlight);\n        function removeHighlight() {\n            view.change(writer => {\n                for (const item of highlightedMarkers.values()) {\n                    writer.removeClass(HIGHLIGHT_CLASS, item);\n                    highlightedMarkers.delete(item);\n                }\n            });\n        }\n    });\n}\n/**\n * A post-fixer that prevents removing a collapsed marker from the document.\n */\nexport function resurrectCollapsedMarkerPostFixer(editor) {\n    // This post-fixer shouldn't be necessary after https://github.com/ckeditor/ckeditor5/issues/5778.\n    return writer => {\n        let changeApplied = false;\n        for (const { name, data } of editor.model.document.differ.getChangedMarkers()) {\n            if (name.startsWith('restrictedEditingException') && data.newRange && data.newRange.root.rootName == '$graveyard') {\n                writer.updateMarker(name, {\n                    range: writer.createRange(writer.createPositionAt(data.oldRange.start))\n                });\n                changeApplied = true;\n            }\n        }\n        return changeApplied;\n    };\n}\n/**\n * A post-fixer that extends a marker when the user types on its boundaries.\n */\nexport function extendMarkerOnTypingPostFixer(editor) {\n    // This post-fixer shouldn't be necessary after https://github.com/ckeditor/ckeditor5/issues/5778.\n    return writer => {\n        let changeApplied = false;\n        for (const change of editor.model.document.differ.getChanges()) {\n            if (change.type == 'insert' && change.name == '$text') {\n                changeApplied = _tryExtendMarkerStart(editor, change.position, change.length, writer) || changeApplied;\n                changeApplied = _tryExtendMarkedEnd(editor, change.position, change.length, writer) || changeApplied;\n            }\n        }\n        return changeApplied;\n    };\n}\n/**\n * A view highlight-to-marker conversion helper.\n *\n * @param config Conversion configuration.\n */\nexport function upcastHighlightToMarker(config) {\n    return (dispatcher) => dispatcher.on('element:span', (evt, data, conversionApi) => {\n        const { writer } = conversionApi;\n        const matcher = new Matcher(config.view);\n        const matcherResult = matcher.match(data.viewItem);\n        // If there is no match, this callback should not do anything.\n        if (!matcherResult) {\n            return;\n        }\n        const match = matcherResult.match;\n        // Force consuming element's name (taken from upcast helpers elementToElement converter).\n        match.name = true;\n        const { modelRange: convertedChildrenRange } = conversionApi.convertChildren(data.viewItem, data.modelCursor);\n        conversionApi.consumable.consume(data.viewItem, match);\n        const markerName = config.model();\n        const fakeMarkerStart = writer.createElement('$marker', { 'data-name': markerName });\n        const fakeMarkerEnd = writer.createElement('$marker', { 'data-name': markerName });\n        // Insert in reverse order to use converter content positions directly (without recalculating).\n        writer.insert(fakeMarkerEnd, convertedChildrenRange.end);\n        writer.insert(fakeMarkerStart, convertedChildrenRange.start);\n        data.modelRange = writer.createRange(writer.createPositionBefore(fakeMarkerStart), writer.createPositionAfter(fakeMarkerEnd));\n        data.modelCursor = data.modelRange.end;\n    });\n}\n/**\n * Extend marker if change detected on marker's start position.\n */\nfunction _tryExtendMarkerStart(editor, position, length, writer) {\n    const markerAtStart = getMarkerAtPosition(editor, position.getShiftedBy(length));\n    if (markerAtStart && markerAtStart.getStart().isEqual(position.getShiftedBy(length))) {\n        writer.updateMarker(markerAtStart, {\n            range: writer.createRange(markerAtStart.getStart().getShiftedBy(-length), markerAtStart.getEnd())\n        });\n        return true;\n    }\n    return false;\n}\n/**\n * Extend marker if change detected on marker's end position.\n */\nfunction _tryExtendMarkedEnd(editor, position, length, writer) {\n    const markerAtEnd = getMarkerAtPosition(editor, position);\n    if (markerAtEnd && markerAtEnd.getEnd().isEqual(position)) {\n        writer.updateMarker(markerAtEnd, {\n            range: writer.createRange(markerAtEnd.getStart(), markerAtEnd.getEnd().getShiftedBy(length))\n        });\n        return true;\n    }\n    return false;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module restricted-editing/restrictededitingmodeediting\n */\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport RestrictedEditingModeNavigationCommand from './restrictededitingmodenavigationcommand.js';\nimport { extendMarkerOnTypingPostFixer, resurrectCollapsedMarkerPostFixer, setupExceptionHighlighting, upcastHighlightToMarker } from './restrictededitingmode/converters.js';\nimport { getMarkerAtPosition, isSelectionInMarker } from './restrictededitingmode/utils.js';\nconst COMMAND_FORCE_DISABLE_ID = 'RestrictedEditingMode';\n/**\n * The restricted editing mode editing feature.\n *\n * * It introduces the exception marker group that renders to `<span>` elements with the `restricted-editing-exception` CSS class.\n * * It registers the `'goToPreviousRestrictedEditingException'` and `'goToNextRestrictedEditingException'` commands.\n * * It also enables highlighting exception markers that are selected.\n */\nexport default class RestrictedEditingModeEditing extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'RestrictedEditingModeEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        editor.config.define('restrictedEditing', {\n            allowedCommands: ['bold', 'italic', 'link', 'unlink'],\n            allowedAttributes: ['bold', 'italic', 'linkHref']\n        });\n        this._alwaysEnabled = new Set(['undo', 'redo']);\n        this._allowedInException = new Set(['input', 'insertText', 'delete', 'deleteForward']);\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        const allowedCommands = editor.config.get('restrictedEditing.allowedCommands');\n        allowedCommands.forEach(commandName => this._allowedInException.add(commandName));\n        this._setupConversion();\n        this._setupCommandsToggling();\n        this._setupRestrictions();\n        // Commands & keystrokes that allow navigation in the content.\n        editor.commands.add('goToPreviousRestrictedEditingException', new RestrictedEditingModeNavigationCommand(editor, 'backward'));\n        editor.commands.add('goToNextRestrictedEditingException', new RestrictedEditingModeNavigationCommand(editor, 'forward'));\n        editor.keystrokes.set('Tab', getCommandExecuter(editor, 'goToNextRestrictedEditingException'));\n        editor.keystrokes.set('Shift+Tab', getCommandExecuter(editor, 'goToPreviousRestrictedEditingException'));\n        editor.keystrokes.set('Ctrl+A', getSelectAllHandler(editor));\n        editingView.change(writer => {\n            for (const root of editingView.document.roots) {\n                writer.addClass('ck-restricted-editing_mode_restricted', root);\n            }\n        });\n    }\n    /**\n     * Makes the given command always enabled in the restricted editing mode (regardless\n     * of selection location).\n     *\n     * To enable some commands in non-restricted areas of the content use\n     * {@link module:restricted-editing/restrictededitingconfig~RestrictedEditingConfig#allowedCommands} configuration option.\n     *\n     * @param commandName Name of the command to enable.\n     */\n    enableCommand(commandName) {\n        const command = this.editor.commands.get(commandName);\n        command.clearForceDisabled(COMMAND_FORCE_DISABLE_ID);\n        this._alwaysEnabled.add(commandName);\n    }\n    /**\n     * Sets up the restricted mode editing conversion:\n     *\n     * * ucpast & downcast converters,\n     * * marker highlighting in the edting area,\n     * * marker post-fixers.\n     */\n    _setupConversion() {\n        const editor = this.editor;\n        const model = editor.model;\n        const doc = model.document;\n        // The restricted editing does not attach additional data to the zones so there's no need for smarter markers managing.\n        // Also, the markers will only be created when loading the data.\n        let markerNumber = 0;\n        editor.conversion.for('upcast').add(upcastHighlightToMarker({\n            view: {\n                name: 'span',\n                classes: 'restricted-editing-exception'\n            },\n            model: () => {\n                markerNumber++; // Starting from restrictedEditingException:1 marker.\n                return `restrictedEditingException:${markerNumber}`;\n            }\n        }));\n        // Currently the marker helpers are tied to other use-cases and do not render a collapsed marker as highlight.\n        // That's why there are 2 downcast converters for them:\n        // 1. The default marker-to-highlight will wrap selected text with `<span>`.\n        editor.conversion.for('downcast').markerToHighlight({\n            model: 'restrictedEditingException',\n            // Use callback to return new object every time new marker instance is created - otherwise it will be seen as the same marker.\n            view: () => {\n                return {\n                    name: 'span',\n                    classes: 'restricted-editing-exception',\n                    priority: -10\n                };\n            }\n        });\n        // 2. But for collapsed marker we need to render it as an element.\n        // Additionally the editing pipeline should always display a collapsed marker.\n        editor.conversion.for('editingDowncast').markerToElement({\n            model: 'restrictedEditingException',\n            view: (markerData, { writer }) => {\n                return writer.createUIElement('span', {\n                    class: 'restricted-editing-exception restricted-editing-exception_collapsed'\n                });\n            }\n        });\n        editor.conversion.for('dataDowncast').markerToElement({\n            model: 'restrictedEditingException',\n            view: (markerData, { writer }) => {\n                return writer.createEmptyElement('span', {\n                    class: 'restricted-editing-exception'\n                });\n            }\n        });\n        doc.registerPostFixer(extendMarkerOnTypingPostFixer(editor));\n        doc.registerPostFixer(resurrectCollapsedMarkerPostFixer(editor));\n        doc.registerPostFixer(ensureNewMarkerIsFlatPostFixer(editor));\n        setupExceptionHighlighting(editor);\n    }\n    /**\n     * Setups additional editing restrictions beyond command toggling:\n     *\n     * * delete content range trimming\n     * * disabling input command outside exception marker\n     * * restricting clipboard holder to text only\n     * * restricting text attributes in content\n     */\n    _setupRestrictions() {\n        const editor = this.editor;\n        const model = editor.model;\n        const selection = model.document.selection;\n        const viewDoc = editor.editing.view.document;\n        const clipboard = editor.plugins.get('ClipboardPipeline');\n        this.listenTo(model, 'deleteContent', restrictDeleteContent(editor), { priority: 'high' });\n        const insertTextCommand = editor.commands.get('insertText');\n        // The restricted editing might be configured without insert text support - ie allow only bolding or removing text.\n        // This check is bit synthetic since only tests are used this way.\n        if (insertTextCommand) {\n            this.listenTo(insertTextCommand, 'execute', disallowInputExecForWrongRange(editor), { priority: 'high' });\n        }\n        // Block clipboard outside exception marker on paste and drop.\n        this.listenTo(clipboard, 'contentInsertion', evt => {\n            if (!isRangeInsideSingleMarker(editor, selection.getFirstRange())) {\n                evt.stop();\n            }\n        });\n        // Block clipboard outside exception marker on cut.\n        this.listenTo(viewDoc, 'clipboardOutput', (evt, data) => {\n            if (data.method == 'cut' && !isRangeInsideSingleMarker(editor, selection.getFirstRange())) {\n                evt.stop();\n            }\n        }, { priority: 'high' });\n        const allowedAttributes = editor.config.get('restrictedEditing.allowedAttributes');\n        model.schema.addAttributeCheck(onlyAllowAttributesFromList(allowedAttributes));\n        model.schema.addChildCheck(allowTextOnlyInClipboardHolder());\n    }\n    /**\n     * Sets up the command toggling which enables or disables commands based on the user selection.\n     */\n    _setupCommandsToggling() {\n        const editor = this.editor;\n        const model = editor.model;\n        const doc = model.document;\n        this._disableCommands();\n        this.listenTo(doc.selection, 'change', this._checkCommands.bind(this));\n        this.listenTo(doc, 'change:data', this._checkCommands.bind(this));\n    }\n    /**\n     * Checks if commands should be enabled or disabled based on the current selection.\n     */\n    _checkCommands() {\n        const editor = this.editor;\n        const selection = editor.model.document.selection;\n        if (selection.rangeCount > 1) {\n            this._disableCommands();\n            return;\n        }\n        const marker = getMarkerAtPosition(editor, selection.focus);\n        this._disableCommands();\n        if (isSelectionInMarker(selection, marker)) {\n            this._enableCommands(marker);\n        }\n    }\n    /**\n     * Enables commands in non-restricted regions.\n     */\n    _enableCommands(marker) {\n        const editor = this.editor;\n        for (const [commandName, command] of editor.commands) {\n            if (!command.affectsData || this._alwaysEnabled.has(commandName)) {\n                continue;\n            }\n            // Enable ony those commands that are allowed in the exception marker.\n            if (!this._allowedInException.has(commandName)) {\n                continue;\n            }\n            // Do not enable 'delete' and 'deleteForward' commands on the exception marker boundaries.\n            if (isDeleteCommandOnMarkerBoundaries(commandName, editor.model.document.selection, marker.getRange())) {\n                continue;\n            }\n            command.clearForceDisabled(COMMAND_FORCE_DISABLE_ID);\n        }\n    }\n    /**\n     * Disables commands outside non-restricted regions.\n     */\n    _disableCommands() {\n        const editor = this.editor;\n        for (const [commandName, command] of editor.commands) {\n            if (!command.affectsData || this._alwaysEnabled.has(commandName)) {\n                continue;\n            }\n            command.forceDisabled(COMMAND_FORCE_DISABLE_ID);\n        }\n    }\n}\n/**\n * Helper method for executing enabled commands only.\n */\nfunction getCommandExecuter(editor, commandName) {\n    return (_, cancel) => {\n        const command = editor.commands.get(commandName);\n        if (command.isEnabled) {\n            editor.execute(commandName);\n            cancel();\n        }\n    };\n}\n/**\n * Helper for handling Ctrl+A keydown behaviour.\n */\nfunction getSelectAllHandler(editor) {\n    return (_, cancel) => {\n        const model = editor.model;\n        const selection = editor.model.document.selection;\n        const marker = getMarkerAtPosition(editor, selection.focus);\n        if (!marker) {\n            return;\n        }\n        // If selection range is inside a restricted editing exception, select text only within the exception.\n        //\n        // Note: Second Ctrl+A press is also blocked and it won't select the entire text in the editor.\n        const selectionRange = selection.getFirstRange();\n        const markerRange = marker.getRange();\n        if (markerRange.containsRange(selectionRange, true) || selection.isCollapsed) {\n            cancel();\n            model.change(writer => {\n                writer.setSelection(marker.getRange());\n            });\n        }\n    };\n}\n/**\n * Additional rule for enabling \"delete\" and \"deleteForward\" commands if selection is on range boundaries:\n *\n * Does not allow to enable command when selection focus is:\n * - is on marker start - \"delete\" - to prevent removing content before marker\n * - is on marker end - \"deleteForward\" - to prevent removing content after marker\n */\nfunction isDeleteCommandOnMarkerBoundaries(commandName, selection, markerRange) {\n    if (commandName == 'delete' && markerRange.start.isEqual(selection.focus)) {\n        return true;\n    }\n    // Only for collapsed selection - non-collapsed selection that extends over a marker is handled elsewhere.\n    if (commandName == 'deleteForward' && selection.isCollapsed && markerRange.end.isEqual(selection.focus)) {\n        return true;\n    }\n    return false;\n}\n/**\n * Ensures that model.deleteContent() does not delete outside exception markers ranges.\n *\n * The enforced restrictions are:\n * - only execute deleteContent() inside exception markers\n * - restrict passed selection to exception marker\n */\nfunction restrictDeleteContent(editor) {\n    return (evt, args) => {\n        const [selection] = args;\n        const marker = getMarkerAtPosition(editor, selection.focus) || getMarkerAtPosition(editor, selection.anchor);\n        // Stop method execution if marker was not found at selection focus.\n        if (!marker) {\n            evt.stop();\n            return;\n        }\n        // Collapsed selection inside exception marker does not require fixing.\n        if (selection.isCollapsed) {\n            return;\n        }\n        // Shrink the selection to the range inside exception marker.\n        const allowedToDelete = marker.getRange().getIntersection(selection.getFirstRange());\n        // Some features uses selection passed to model.deleteContent() to set the selection afterwards. For this we need to properly modify\n        // either the document selection using change block...\n        if (selection.is('documentSelection')) {\n            editor.model.change(writer => {\n                writer.setSelection(allowedToDelete);\n            });\n        }\n        // ... or by modifying passed selection instance directly.\n        else {\n            selection.setTo(allowedToDelete);\n        }\n    };\n}\n/**\n * Ensures that input command is executed with a range that is inside exception marker.\n *\n * This restriction is due to fact that using native spell check changes text outside exception marker.\n */\nfunction disallowInputExecForWrongRange(editor) {\n    return (evt, args) => {\n        const [options] = args;\n        const { range } = options;\n        // Only check \"input\" command executed with a range value.\n        // Selection might be set in exception marker but passed range might point elsewhere.\n        if (!range) {\n            return;\n        }\n        if (!isRangeInsideSingleMarker(editor, range)) {\n            evt.stop();\n        }\n    };\n}\nfunction isRangeInsideSingleMarker(editor, range) {\n    const markerAtStart = getMarkerAtPosition(editor, range.start);\n    const markerAtEnd = getMarkerAtPosition(editor, range.end);\n    return markerAtStart && markerAtEnd && markerAtEnd === markerAtStart;\n}\n/**\n * Checks if new marker range is flat. Non-flat ranges might appear during upcast conversion in nested structures, ie tables.\n *\n * Note: This marker fixer only consider case which is possible to create using StandardEditing mode plugin.\n * Markers created by developer in the data might break in many other ways.\n *\n * See #6003.\n */\nfunction ensureNewMarkerIsFlatPostFixer(editor) {\n    return writer => {\n        let changeApplied = false;\n        const changedMarkers = editor.model.document.differ.getChangedMarkers();\n        for (const { data, name } of changedMarkers) {\n            if (!name.startsWith('restrictedEditingException')) {\n                continue;\n            }\n            const newRange = data.newRange;\n            if (!data.oldRange && !newRange.isFlat) {\n                const start = newRange.start;\n                const end = newRange.end;\n                const startIsHigherInTree = start.path.length > end.path.length;\n                const fixedStart = startIsHigherInTree ? newRange.start : writer.createPositionAt(end.parent, 0);\n                const fixedEnd = startIsHigherInTree ? writer.createPositionAt(start.parent, 'end') : newRange.end;\n                writer.updateMarker(name, {\n                    range: writer.createRange(fixedStart, fixedEnd)\n                });\n                changeApplied = true;\n            }\n        }\n        return changeApplied;\n    };\n}\nfunction onlyAllowAttributesFromList(allowedAttributes) {\n    return (context, attributeName) => {\n        if (context.startsWith('$clipboardHolder')) {\n            return allowedAttributes.includes(attributeName);\n        }\n    };\n}\nfunction allowTextOnlyInClipboardHolder() {\n    return (context, childDefinition) => {\n        if (context.startsWith('$clipboardHolder')) {\n            return childDefinition.name === '$text';\n        }\n    };\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module restricted-editing/restrictededitingmodeui\n */\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { ViewModel, createDropdown, addListToDropdown } from 'ckeditor5/src/ui.js';\nimport { Collection } from 'ckeditor5/src/utils.js';\nimport lockIcon from '../theme/icons/contentlock.svg';\n/**\n * The restricted editing mode UI feature.\n *\n * It introduces the `'restrictedEditing'` dropdown that offers tools to navigate between exceptions across\n * the document.\n */\nexport default class RestrictedEditingModeUI extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'RestrictedEditingModeUI';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        editor.ui.componentFactory.add('restrictedEditing', locale => {\n            const dropdownView = createDropdown(locale);\n            const listItems = new Collection();\n            listItems.add(this._getButtonDefinition('goToPreviousRestrictedEditingException', t('Previous editable region'), 'Shift+Tab'));\n            listItems.add(this._getButtonDefinition('goToNextRestrictedEditingException', t('Next editable region'), 'Tab'));\n            addListToDropdown(dropdownView, listItems);\n            dropdownView.buttonView.set({\n                label: t('Navigate editable regions'),\n                icon: lockIcon,\n                tooltip: true,\n                isEnabled: true,\n                isOn: false\n            });\n            this.listenTo(dropdownView, 'execute', evt => {\n                const { _commandName } = evt.source;\n                editor.execute(_commandName);\n                editor.editing.view.focus();\n            });\n            return dropdownView;\n        });\n    }\n    /**\n     * Returns a definition of the navigation button to be used in the dropdown.\n\n     * @param commandName The name of the command that the button represents.\n     * @param label The translated label of the button.\n     * @param keystroke The button keystroke.\n     */\n    _getButtonDefinition(commandName, label, keystroke) {\n        const editor = this.editor;\n        const command = editor.commands.get(commandName);\n        const definition = {\n            type: 'button',\n            model: new ViewModel({\n                label,\n                withText: true,\n                keystroke,\n                withKeystroke: true,\n                _commandName: commandName\n            })\n        };\n        definition.model.bind('isEnabled').to(command, 'isEnabled');\n        return definition;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module restricted-editing/restrictededitingmode\n */\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport RestrictedEditingModeEditing from './restrictededitingmodeediting.js';\nimport RestrictedEditingModeUI from './restrictededitingmodeui.js';\nimport '../theme/restrictedediting.css';\n/**\n * The restricted editing mode plugin.\n *\n * This is a \"glue\" plugin which loads the following plugins:\n *\n * * The {@link module:restricted-editing/restrictededitingmodeediting~RestrictedEditingModeEditing restricted mode editing feature}.\n * * The {@link module:restricted-editing/restrictededitingmodeui~RestrictedEditingModeUI restricted mode UI feature}.\n */\nexport default class RestrictedEditingMode extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'RestrictedEditingMode';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [RestrictedEditingModeEditing, RestrictedEditingModeUI];\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module restricted-editing/restrictededitingexceptioncommand\n */\nimport { Command } from 'ckeditor5/src/core.js';\n/**\n * The command that toggles exceptions from the restricted editing on text.\n */\nexport default class RestrictedEditingExceptionCommand extends Command {\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const model = this.editor.model;\n        const doc = model.document;\n        this.value = !!doc.selection.getAttribute('restrictedEditingException');\n        this.isEnabled = model.schema.checkAttributeInSelection(doc.selection, 'restrictedEditingException');\n    }\n    /**\n     * @inheritDoc\n     */\n    execute(options = {}) {\n        const model = this.editor.model;\n        const document = model.document;\n        const selection = document.selection;\n        const valueToSet = (options.forceValue === undefined) ? !this.value : options.forceValue;\n        model.change(writer => {\n            const ranges = model.schema.getValidRanges(selection.getRanges(), 'restrictedEditingException');\n            if (selection.isCollapsed) {\n                if (valueToSet) {\n                    writer.setSelectionAttribute('restrictedEditingException', valueToSet);\n                }\n                else {\n                    const isSameException = (value) => {\n                        return value.item.getAttribute('restrictedEditingException') === this.value;\n                    };\n                    const focus = selection.focus;\n                    const exceptionStart = focus.getLastMatchingPosition(isSameException, { direction: 'backward' });\n                    const exceptionEnd = focus.getLastMatchingPosition(isSameException);\n                    writer.removeSelectionAttribute('restrictedEditingException');\n                    if (!(focus.isEqual(exceptionStart) || focus.isEqual(exceptionEnd))) {\n                        writer.removeAttribute('restrictedEditingException', writer.createRange(exceptionStart, exceptionEnd));\n                    }\n                }\n            }\n            else {\n                for (const range of ranges) {\n                    if (valueToSet) {\n                        writer.setAttribute('restrictedEditingException', valueToSet, range);\n                    }\n                    else {\n                        writer.removeAttribute('restrictedEditingException', range);\n                    }\n                }\n            }\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module restricted-editing/standardeditingmodeediting\n */\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport RestrictedEditingExceptionCommand from './restrictededitingexceptioncommand.js';\n/**\n * The standard editing mode editing feature.\n *\n * * It introduces the `restrictedEditingException` text attribute that is rendered as\n * a `<span>` element with the `restricted-editing-exception` CSS class.\n * * It registers the `'restrictedEditingException'` command.\n */\nexport default class StandardEditingModeEditing extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'StandardEditingModeEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        editor.model.schema.extend('$text', { allowAttributes: ['restrictedEditingException'] });\n        editor.conversion.for('upcast').elementToAttribute({\n            model: 'restrictedEditingException',\n            view: {\n                name: 'span',\n                classes: 'restricted-editing-exception'\n            }\n        });\n        editor.conversion.for('downcast').attributeToElement({\n            model: 'restrictedEditingException',\n            view: (modelAttributeValue, { writer }) => {\n                if (modelAttributeValue) {\n                    // Make the restricted editing <span> outer-most in the view.\n                    return writer.createAttributeElement('span', { class: 'restricted-editing-exception' }, { priority: -10 });\n                }\n            }\n        });\n        editor.commands.add('restrictedEditingException', new RestrictedEditingExceptionCommand(editor));\n        editor.editing.view.change(writer => {\n            for (const root of editor.editing.view.document.roots) {\n                writer.addClass('ck-restricted-editing_mode_standard', root);\n            }\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module restricted-editing/standardeditingmodeui\n */\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { ButtonView } from 'ckeditor5/src/ui.js';\nimport unlockIcon from '../theme/icons/contentunlock.svg';\n/**\n * The standard editing mode UI feature.\n *\n * It introduces the `'restrictedEditingException'` button that marks text as unrestricted for editing.\n */\nexport default class StandardEditingModeUI extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'StandardEditingModeUI';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        editor.ui.componentFactory.add('restrictedEditingException', locale => {\n            const command = editor.commands.get('restrictedEditingException');\n            const view = new ButtonView(locale);\n            view.set({\n                icon: unlockIcon,\n                tooltip: true,\n                isToggleable: true\n            });\n            view.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n            view.bind('label').to(command, 'value', value => {\n                return value ? t('Disable editing') : t('Enable editing');\n            });\n            this.listenTo(view, 'execute', () => {\n                editor.execute('restrictedEditingException');\n                editor.editing.view.focus();\n            });\n            return view;\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module restricted-editing/standardeditingmode\n */\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport StandardEditingModeEditing from './standardeditingmodeediting.js';\nimport StandardEditingModeUI from './standardeditingmodeui.js';\nimport '../theme/restrictedediting.css';\n/**\n * The standard editing mode plugin.\n *\n * This is a \"glue\" plugin that loads the following plugins:\n *\n * * The {@link module:restricted-editing/standardeditingmodeediting~StandardEditingModeEditing standard mode editing feature}.\n * * The {@link module:restricted-editing/standardeditingmodeui~StandardEditingModeUI standard mode UI feature}.\n */\nexport default class StandardEditingMode extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'StandardEditingMode';\n    }\n    static get requires() {\n        return [StandardEditingModeEditing, StandardEditingModeUI];\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAQA,IAAqB,yCAArB,cAAoE,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOxE,YAAY,QAAQ,WAAW;AAC3B,UAAM,MAAM;AAEZ,SAAK,cAAc;AACnB,SAAK,aAAa;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAIA,UAAU;AACN,SAAK,YAAY,KAAK,cAAc;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,UAAU;AACN,UAAM,WAAW,yBAAyB,KAAK,OAAO,OAAO,KAAK,UAAU;AAC5E,QAAI,CAAC,UAAU;AACX;AAAA,IACJ;AACA,SAAK,OAAO,MAAM,OAAO,YAAU;AAC/B,aAAO,aAAa,QAAQ;AAAA,IAChC,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,gBAAgB;AACZ,WAAO,CAAC,CAAC,yBAAyB,KAAK,OAAO,OAAO,KAAK,UAAU;AAAA,EACxE;AACJ;AAIA,SAAS,yBAAyB,OAAO,WAAW;AAChD,QAAM,YAAY,MAAM,SAAS;AACjC,QAAM,oBAAoB,UAAU,iBAAiB;AACrD,QAAM,eAAe,CAAC;AAEtB,aAAW,UAAU,MAAM,QAAQ,gBAAgB,4BAA4B,GAAG;AAC9E,UAAM,cAAc,OAAO,SAAS;AAGpC,UAAM,wBAAwB,kBAAkB,WAAW,YAAY,KAAK,KAAK,kBAAkB,gBAAgB,YAAY,KAAK,KAChI,kBAAkB,WAAW,YAAY,GAAG,KAAK,kBAAkB,gBAAgB,YAAY,GAAG;AAKtG,QAAI,YAAY,iBAAiB,iBAAiB,KAAK,uBAAuB;AAC1E;AAAA,IACJ;AACA,QAAI,cAAc,aAAa,YAAY,MAAM,QAAQ,iBAAiB,GAAG;AACzE,mBAAa,KAAK,WAAW;AAAA,IACjC,WACS,cAAc,cAAc,YAAY,IAAI,SAAS,iBAAiB,GAAG;AAC9E,mBAAa,KAAK,WAAW;AAAA,IACjC;AAAA,EACJ;AACA,MAAI,CAAC,aAAa,QAAQ;AACtB;AAAA,EACJ;AAGA,SAAO,aACF,KAAK,CAAC,QAAQ,WAAW;AAC1B,QAAI,cAAc,WAAW;AACzB,aAAO,OAAO,MAAM,QAAQ,OAAO,KAAK,IAAI,IAAI;AAAA,IACpD,OACK;AACD,aAAO,OAAO,MAAM,SAAS,OAAO,KAAK,IAAI,IAAI;AAAA,IACrD;AAAA,EACJ,CAAC,EACI,MAAM;AACf;;;ACjFO,SAAS,oBAAoB,QAAQ,UAAU;AAClD,aAAW,UAAU,OAAO,MAAM,SAAS;AACvC,UAAM,cAAc,OAAO,SAAS;AACpC,QAAI,4BAA4B,aAAa,QAAQ,GAAG;AACpD,UAAI,OAAO,KAAK,WAAW,6BAA6B,GAAG;AACvD,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AACJ;AAIO,SAAS,4BAA4B,OAAO,UAAU;AACzD,SAAQ,MAAM,iBAAiB,QAAQ,KACnC,MAAM,IAAI,QAAQ,QAAQ,KAC1B,MAAM,MAAM,QAAQ,QAAQ;AACpC;AAWO,SAAS,oBAAoB,WAAW,QAAQ;AACnD,MAAI,CAAC,QAAQ;AACT,WAAO;AAAA,EACX;AACA,QAAM,cAAc,OAAO,SAAS;AACpC,MAAI,UAAU,aAAa;AACvB,WAAO,4BAA4B,aAAa,UAAU,KAAK;AAAA,EACnE;AACA,SAAO,YAAY,cAAc,UAAU,cAAc,GAAG,IAAI;AACpE;;;AC3CA,IAAM,kBAAkB;AAajB,SAAS,2BAA2B,QAAQ;AAC/C,QAAM,OAAO,OAAO,QAAQ;AAC5B,QAAM,QAAQ,OAAO;AACrB,QAAM,qBAAqB,oBAAI,IAAI;AAEnC,OAAK,SAAS,kBAAkB,CAAC,WAAW;AACxC,UAAM,iBAAiB,MAAM,SAAS;AACtC,UAAM,SAAS,oBAAoB,QAAQ,eAAe,MAAM;AAChE,QAAI,CAAC,QAAQ;AACT,aAAO;AAAA,IACX;AACA,eAAW,eAAe,OAAO,QAAQ,OAAO,qBAAqB,OAAO,IAAI,GAAG;AAC/E,aAAO,SAAS,iBAAiB,WAAW;AAC5C,yBAAmB,IAAI,WAAW;AAAA,IACtC;AACA,WAAO;AAAA,EACX,CAAC;AAED,SAAO,WAAW,IAAI,iBAAiB,EAAE,IAAI,gBAAc;AAEvD,eAAW,GAAG,UAAU,iBAAiB,EAAE,UAAU,UAAU,CAAC;AAChE,eAAW,GAAG,UAAU,iBAAiB,EAAE,UAAU,UAAU,CAAC;AAChE,eAAW,GAAG,aAAa,iBAAiB,EAAE,UAAU,UAAU,CAAC;AACnE,eAAW,GAAG,kBAAkB,eAAe;AAC/C,aAAS,kBAAkB;AACvB,WAAK,OAAO,YAAU;AAClB,mBAAW,QAAQ,mBAAmB,OAAO,GAAG;AAC5C,iBAAO,YAAY,iBAAiB,IAAI;AACxC,6BAAmB,OAAO,IAAI;AAAA,QAClC;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ,CAAC;AACL;AAIO,SAAS,kCAAkC,QAAQ;AAEtD,SAAO,YAAU;AACb,QAAI,gBAAgB;AACpB,eAAW,EAAE,MAAM,KAAK,KAAK,OAAO,MAAM,SAAS,OAAO,kBAAkB,GAAG;AAC3E,UAAI,KAAK,WAAW,4BAA4B,KAAK,KAAK,YAAY,KAAK,SAAS,KAAK,YAAY,cAAc;AAC/G,eAAO,aAAa,MAAM;AAAA,UACtB,OAAO,OAAO,YAAY,OAAO,iBAAiB,KAAK,SAAS,KAAK,CAAC;AAAA,QAC1E,CAAC;AACD,wBAAgB;AAAA,MACpB;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACJ;AAIO,SAAS,8BAA8B,QAAQ;AAElD,SAAO,YAAU;AACb,QAAI,gBAAgB;AACpB,eAAW,UAAU,OAAO,MAAM,SAAS,OAAO,WAAW,GAAG;AAC5D,UAAI,OAAO,QAAQ,YAAY,OAAO,QAAQ,SAAS;AACnD,wBAAgB,sBAAsB,QAAQ,OAAO,UAAU,OAAO,QAAQ,MAAM,KAAK;AACzF,wBAAgB,oBAAoB,QAAQ,OAAO,UAAU,OAAO,QAAQ,MAAM,KAAK;AAAA,MAC3F;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACJ;AAMO,SAAS,wBAAwB,QAAQ;AAC5C,SAAO,CAAC,eAAe,WAAW,GAAG,gBAAgB,CAAC,KAAK,MAAM,kBAAkB;AAC/E,UAAM,EAAE,OAAO,IAAI;AACnB,UAAM,UAAU,IAAI,QAAQ,OAAO,IAAI;AACvC,UAAM,gBAAgB,QAAQ,MAAM,KAAK,QAAQ;AAEjD,QAAI,CAAC,eAAe;AAChB;AAAA,IACJ;AACA,UAAM,QAAQ,cAAc;AAE5B,UAAM,OAAO;AACb,UAAM,EAAE,YAAY,uBAAuB,IAAI,cAAc,gBAAgB,KAAK,UAAU,KAAK,WAAW;AAC5G,kBAAc,WAAW,QAAQ,KAAK,UAAU,KAAK;AACrD,UAAM,aAAa,OAAO,MAAM;AAChC,UAAM,kBAAkB,OAAO,cAAc,WAAW,EAAE,aAAa,WAAW,CAAC;AACnF,UAAM,gBAAgB,OAAO,cAAc,WAAW,EAAE,aAAa,WAAW,CAAC;AAEjF,WAAO,OAAO,eAAe,uBAAuB,GAAG;AACvD,WAAO,OAAO,iBAAiB,uBAAuB,KAAK;AAC3D,SAAK,aAAa,OAAO,YAAY,OAAO,qBAAqB,eAAe,GAAG,OAAO,oBAAoB,aAAa,CAAC;AAC5H,SAAK,cAAc,KAAK,WAAW;AAAA,EACvC,CAAC;AACL;AAIA,SAAS,sBAAsB,QAAQ,UAAU,QAAQ,QAAQ;AAC7D,QAAM,gBAAgB,oBAAoB,QAAQ,SAAS,aAAa,MAAM,CAAC;AAC/E,MAAI,iBAAiB,cAAc,SAAS,EAAE,QAAQ,SAAS,aAAa,MAAM,CAAC,GAAG;AAClF,WAAO,aAAa,eAAe;AAAA,MAC/B,OAAO,OAAO,YAAY,cAAc,SAAS,EAAE,aAAa,CAAC,MAAM,GAAG,cAAc,OAAO,CAAC;AAAA,IACpG,CAAC;AACD,WAAO;AAAA,EACX;AACA,SAAO;AACX;AAIA,SAAS,oBAAoB,QAAQ,UAAU,QAAQ,QAAQ;AAC3D,QAAM,cAAc,oBAAoB,QAAQ,QAAQ;AACxD,MAAI,eAAe,YAAY,OAAO,EAAE,QAAQ,QAAQ,GAAG;AACvD,WAAO,aAAa,aAAa;AAAA,MAC7B,OAAO,OAAO,YAAY,YAAY,SAAS,GAAG,YAAY,OAAO,EAAE,aAAa,MAAM,CAAC;AAAA,IAC/F,CAAC;AACD,WAAO;AAAA,EACX;AACA,SAAO;AACX;;;AClIA,IAAM,2BAA2B;AAQjC,IAAqB,+BAArB,cAA0D,OAAO;AAAA;AAAA;AAAA;AAAA,EAI7D,WAAW,aAAa;AACpB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAIA,YAAY,QAAQ;AAChB,UAAM,MAAM;AACZ,WAAO,OAAO,OAAO,qBAAqB;AAAA,MACtC,iBAAiB,CAAC,QAAQ,UAAU,QAAQ,QAAQ;AAAA,MACpD,mBAAmB,CAAC,QAAQ,UAAU,UAAU;AAAA,IACpD,CAAC;AACD,SAAK,iBAAiB,oBAAI,IAAI,CAAC,QAAQ,MAAM,CAAC;AAC9C,SAAK,sBAAsB,oBAAI,IAAI,CAAC,SAAS,cAAc,UAAU,eAAe,CAAC;AAAA,EACzF;AAAA;AAAA;AAAA;AAAA,EAIA,OAAO;AACH,UAAM,SAAS,KAAK;AACpB,UAAM,cAAc,OAAO,QAAQ;AACnC,UAAM,kBAAkB,OAAO,OAAO,IAAI,mCAAmC;AAC7E,oBAAgB,QAAQ,iBAAe,KAAK,oBAAoB,IAAI,WAAW,CAAC;AAChF,SAAK,iBAAiB;AACtB,SAAK,uBAAuB;AAC5B,SAAK,mBAAmB;AAExB,WAAO,SAAS,IAAI,0CAA0C,IAAI,uCAAuC,QAAQ,UAAU,CAAC;AAC5H,WAAO,SAAS,IAAI,sCAAsC,IAAI,uCAAuC,QAAQ,SAAS,CAAC;AACvH,WAAO,WAAW,IAAI,OAAO,mBAAmB,QAAQ,oCAAoC,CAAC;AAC7F,WAAO,WAAW,IAAI,aAAa,mBAAmB,QAAQ,wCAAwC,CAAC;AACvG,WAAO,WAAW,IAAI,UAAU,oBAAoB,MAAM,CAAC;AAC3D,gBAAY,OAAO,YAAU;AACzB,iBAAW,QAAQ,YAAY,SAAS,OAAO;AAC3C,eAAO,SAAS,yCAAyC,IAAI;AAAA,MACjE;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,cAAc,aAAa;AACvB,UAAM,UAAU,KAAK,OAAO,SAAS,IAAI,WAAW;AACpD,YAAQ,mBAAmB,wBAAwB;AACnD,SAAK,eAAe,IAAI,WAAW;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,mBAAmB;AACf,UAAM,SAAS,KAAK;AACpB,UAAM,QAAQ,OAAO;AACrB,UAAM,MAAM,MAAM;AAGlB,QAAI,eAAe;AACnB,WAAO,WAAW,IAAI,QAAQ,EAAE,IAAI,wBAAwB;AAAA,MACxD,MAAM;AAAA,QACF,MAAM;AAAA,QACN,SAAS;AAAA,MACb;AAAA,MACA,OAAO,MAAM;AACT;AACA,eAAO,8BAA8B,YAAY;AAAA,MACrD;AAAA,IACJ,CAAC,CAAC;AAIF,WAAO,WAAW,IAAI,UAAU,EAAE,kBAAkB;AAAA,MAChD,OAAO;AAAA;AAAA,MAEP,MAAM,MAAM;AACR,eAAO;AAAA,UACH,MAAM;AAAA,UACN,SAAS;AAAA,UACT,UAAU;AAAA,QACd;AAAA,MACJ;AAAA,IACJ,CAAC;AAGD,WAAO,WAAW,IAAI,iBAAiB,EAAE,gBAAgB;AAAA,MACrD,OAAO;AAAA,MACP,MAAM,CAAC,YAAY,EAAE,OAAO,MAAM;AAC9B,eAAO,OAAO,gBAAgB,QAAQ;AAAA,UAClC,OAAO;AAAA,QACX,CAAC;AAAA,MACL;AAAA,IACJ,CAAC;AACD,WAAO,WAAW,IAAI,cAAc,EAAE,gBAAgB;AAAA,MAClD,OAAO;AAAA,MACP,MAAM,CAAC,YAAY,EAAE,OAAO,MAAM;AAC9B,eAAO,OAAO,mBAAmB,QAAQ;AAAA,UACrC,OAAO;AAAA,QACX,CAAC;AAAA,MACL;AAAA,IACJ,CAAC;AACD,QAAI,kBAAkB,8BAA8B,MAAM,CAAC;AAC3D,QAAI,kBAAkB,kCAAkC,MAAM,CAAC;AAC/D,QAAI,kBAAkB,+BAA+B,MAAM,CAAC;AAC5D,+BAA2B,MAAM;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,qBAAqB;AACjB,UAAM,SAAS,KAAK;AACpB,UAAM,QAAQ,OAAO;AACrB,UAAM,YAAY,MAAM,SAAS;AACjC,UAAM,UAAU,OAAO,QAAQ,KAAK;AACpC,UAAM,YAAY,OAAO,QAAQ,IAAI,mBAAmB;AACxD,SAAK,SAAS,OAAO,iBAAiB,sBAAsB,MAAM,GAAG,EAAE,UAAU,OAAO,CAAC;AACzF,UAAM,oBAAoB,OAAO,SAAS,IAAI,YAAY;AAG1D,QAAI,mBAAmB;AACnB,WAAK,SAAS,mBAAmB,WAAW,+BAA+B,MAAM,GAAG,EAAE,UAAU,OAAO,CAAC;AAAA,IAC5G;AAEA,SAAK,SAAS,WAAW,oBAAoB,SAAO;AAChD,UAAI,CAAC,0BAA0B,QAAQ,UAAU,cAAc,CAAC,GAAG;AAC/D,YAAI,KAAK;AAAA,MACb;AAAA,IACJ,CAAC;AAED,SAAK,SAAS,SAAS,mBAAmB,CAAC,KAAK,SAAS;AACrD,UAAI,KAAK,UAAU,SAAS,CAAC,0BAA0B,QAAQ,UAAU,cAAc,CAAC,GAAG;AACvF,YAAI,KAAK;AAAA,MACb;AAAA,IACJ,GAAG,EAAE,UAAU,OAAO,CAAC;AACvB,UAAM,oBAAoB,OAAO,OAAO,IAAI,qCAAqC;AACjF,UAAM,OAAO,kBAAkB,4BAA4B,iBAAiB,CAAC;AAC7E,UAAM,OAAO,cAAc,+BAA+B,CAAC;AAAA,EAC/D;AAAA;AAAA;AAAA;AAAA,EAIA,yBAAyB;AACrB,UAAM,SAAS,KAAK;AACpB,UAAM,QAAQ,OAAO;AACrB,UAAM,MAAM,MAAM;AAClB,SAAK,iBAAiB;AACtB,SAAK,SAAS,IAAI,WAAW,UAAU,KAAK,eAAe,KAAK,IAAI,CAAC;AACrE,SAAK,SAAS,KAAK,eAAe,KAAK,eAAe,KAAK,IAAI,CAAC;AAAA,EACpE;AAAA;AAAA;AAAA;AAAA,EAIA,iBAAiB;AACb,UAAM,SAAS,KAAK;AACpB,UAAM,YAAY,OAAO,MAAM,SAAS;AACxC,QAAI,UAAU,aAAa,GAAG;AAC1B,WAAK,iBAAiB;AACtB;AAAA,IACJ;AACA,UAAM,SAAS,oBAAoB,QAAQ,UAAU,KAAK;AAC1D,SAAK,iBAAiB;AACtB,QAAI,oBAAoB,WAAW,MAAM,GAAG;AACxC,WAAK,gBAAgB,MAAM;AAAA,IAC/B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAIA,gBAAgB,QAAQ;AACpB,UAAM,SAAS,KAAK;AACpB,eAAW,CAAC,aAAa,OAAO,KAAK,OAAO,UAAU;AAClD,UAAI,CAAC,QAAQ,eAAe,KAAK,eAAe,IAAI,WAAW,GAAG;AAC9D;AAAA,MACJ;AAEA,UAAI,CAAC,KAAK,oBAAoB,IAAI,WAAW,GAAG;AAC5C;AAAA,MACJ;AAEA,UAAI,kCAAkC,aAAa,OAAO,MAAM,SAAS,WAAW,OAAO,SAAS,CAAC,GAAG;AACpG;AAAA,MACJ;AACA,cAAQ,mBAAmB,wBAAwB;AAAA,IACvD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAIA,mBAAmB;AACf,UAAM,SAAS,KAAK;AACpB,eAAW,CAAC,aAAa,OAAO,KAAK,OAAO,UAAU;AAClD,UAAI,CAAC,QAAQ,eAAe,KAAK,eAAe,IAAI,WAAW,GAAG;AAC9D;AAAA,MACJ;AACA,cAAQ,cAAc,wBAAwB;AAAA,IAClD;AAAA,EACJ;AACJ;AAIA,SAAS,mBAAmB,QAAQ,aAAa;AAC7C,SAAO,CAAC,GAAG,WAAW;AAClB,UAAM,UAAU,OAAO,SAAS,IAAI,WAAW;AAC/C,QAAI,QAAQ,WAAW;AACnB,aAAO,QAAQ,WAAW;AAC1B,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;AAIA,SAAS,oBAAoB,QAAQ;AACjC,SAAO,CAAC,GAAG,WAAW;AAClB,UAAM,QAAQ,OAAO;AACrB,UAAM,YAAY,OAAO,MAAM,SAAS;AACxC,UAAM,SAAS,oBAAoB,QAAQ,UAAU,KAAK;AAC1D,QAAI,CAAC,QAAQ;AACT;AAAA,IACJ;AAIA,UAAM,iBAAiB,UAAU,cAAc;AAC/C,UAAM,cAAc,OAAO,SAAS;AACpC,QAAI,YAAY,cAAc,gBAAgB,IAAI,KAAK,UAAU,aAAa;AAC1E,aAAO;AACP,YAAM,OAAO,YAAU;AACnB,eAAO,aAAa,OAAO,SAAS,CAAC;AAAA,MACzC,CAAC;AAAA,IACL;AAAA,EACJ;AACJ;AAQA,SAAS,kCAAkC,aAAa,WAAW,aAAa;AAC5E,MAAI,eAAe,YAAY,YAAY,MAAM,QAAQ,UAAU,KAAK,GAAG;AACvE,WAAO;AAAA,EACX;AAEA,MAAI,eAAe,mBAAmB,UAAU,eAAe,YAAY,IAAI,QAAQ,UAAU,KAAK,GAAG;AACrG,WAAO;AAAA,EACX;AACA,SAAO;AACX;AAQA,SAAS,sBAAsB,QAAQ;AACnC,SAAO,CAAC,KAAK,SAAS;AAClB,UAAM,CAAC,SAAS,IAAI;AACpB,UAAM,SAAS,oBAAoB,QAAQ,UAAU,KAAK,KAAK,oBAAoB,QAAQ,UAAU,MAAM;AAE3G,QAAI,CAAC,QAAQ;AACT,UAAI,KAAK;AACT;AAAA,IACJ;AAEA,QAAI,UAAU,aAAa;AACvB;AAAA,IACJ;AAEA,UAAM,kBAAkB,OAAO,SAAS,EAAE,gBAAgB,UAAU,cAAc,CAAC;AAGnF,QAAI,UAAU,GAAG,mBAAmB,GAAG;AACnC,aAAO,MAAM,OAAO,YAAU;AAC1B,eAAO,aAAa,eAAe;AAAA,MACvC,CAAC;AAAA,IACL,OAEK;AACD,gBAAU,MAAM,eAAe;AAAA,IACnC;AAAA,EACJ;AACJ;AAMA,SAAS,+BAA+B,QAAQ;AAC5C,SAAO,CAAC,KAAK,SAAS;AAClB,UAAM,CAAC,OAAO,IAAI;AAClB,UAAM,EAAE,MAAM,IAAI;AAGlB,QAAI,CAAC,OAAO;AACR;AAAA,IACJ;AACA,QAAI,CAAC,0BAA0B,QAAQ,KAAK,GAAG;AAC3C,UAAI,KAAK;AAAA,IACb;AAAA,EACJ;AACJ;AACA,SAAS,0BAA0B,QAAQ,OAAO;AAC9C,QAAM,gBAAgB,oBAAoB,QAAQ,MAAM,KAAK;AAC7D,QAAM,cAAc,oBAAoB,QAAQ,MAAM,GAAG;AACzD,SAAO,iBAAiB,eAAe,gBAAgB;AAC3D;AASA,SAAS,+BAA+B,QAAQ;AAC5C,SAAO,YAAU;AACb,QAAI,gBAAgB;AACpB,UAAM,iBAAiB,OAAO,MAAM,SAAS,OAAO,kBAAkB;AACtE,eAAW,EAAE,MAAM,KAAK,KAAK,gBAAgB;AACzC,UAAI,CAAC,KAAK,WAAW,4BAA4B,GAAG;AAChD;AAAA,MACJ;AACA,YAAM,WAAW,KAAK;AACtB,UAAI,CAAC,KAAK,YAAY,CAAC,SAAS,QAAQ;AACpC,cAAM,QAAQ,SAAS;AACvB,cAAM,MAAM,SAAS;AACrB,cAAM,sBAAsB,MAAM,KAAK,SAAS,IAAI,KAAK;AACzD,cAAM,aAAa,sBAAsB,SAAS,QAAQ,OAAO,iBAAiB,IAAI,QAAQ,CAAC;AAC/F,cAAM,WAAW,sBAAsB,OAAO,iBAAiB,MAAM,QAAQ,KAAK,IAAI,SAAS;AAC/F,eAAO,aAAa,MAAM;AAAA,UACtB,OAAO,OAAO,YAAY,YAAY,QAAQ;AAAA,QAClD,CAAC;AACD,wBAAgB;AAAA,MACpB;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACJ;AACA,SAAS,4BAA4B,mBAAmB;AACpD,SAAO,CAAC,SAAS,kBAAkB;AAC/B,QAAI,QAAQ,WAAW,kBAAkB,GAAG;AACxC,aAAO,kBAAkB,SAAS,aAAa;AAAA,IACnD;AAAA,EACJ;AACJ;AACA,SAAS,iCAAiC;AACtC,SAAO,CAAC,SAAS,oBAAoB;AACjC,QAAI,QAAQ,WAAW,kBAAkB,GAAG;AACxC,aAAO,gBAAgB,SAAS;AAAA,IACpC;AAAA,EACJ;AACJ;;;AC5XA,OAAO,cAAc;AAOrB,IAAqB,0BAArB,cAAqD,OAAO;AAAA;AAAA;AAAA;AAAA,EAIxD,WAAW,aAAa;AACpB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAIA,OAAO;AACH,UAAM,SAAS,KAAK;AACpB,UAAM,IAAI,OAAO;AACjB,WAAO,GAAG,iBAAiB,IAAI,qBAAqB,YAAU;AAC1D,YAAM,eAAe,eAAe,MAAM;AAC1C,YAAM,YAAY,IAAI,WAAW;AACjC,gBAAU,IAAI,KAAK,qBAAqB,0CAA0C,EAAE,0BAA0B,GAAG,WAAW,CAAC;AAC7H,gBAAU,IAAI,KAAK,qBAAqB,sCAAsC,EAAE,sBAAsB,GAAG,KAAK,CAAC;AAC/G,wBAAkB,cAAc,SAAS;AACzC,mBAAa,WAAW,IAAI;AAAA,QACxB,OAAO,EAAE,2BAA2B;AAAA,QACpC,MAAM;AAAA,QACN,SAAS;AAAA,QACT,WAAW;AAAA,QACX,MAAM;AAAA,MACV,CAAC;AACD,WAAK,SAAS,cAAc,WAAW,SAAO;AAC1C,cAAM,EAAE,aAAa,IAAI,IAAI;AAC7B,eAAO,QAAQ,YAAY;AAC3B,eAAO,QAAQ,KAAK,MAAM;AAAA,MAC9B,CAAC;AACD,aAAO;AAAA,IACX,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,qBAAqB,aAAa,OAAO,WAAW;AAChD,UAAM,SAAS,KAAK;AACpB,UAAM,UAAU,OAAO,SAAS,IAAI,WAAW;AAC/C,UAAM,aAAa;AAAA,MACf,MAAM;AAAA,MACN,OAAO,IAAI,MAAU;AAAA,QACjB;AAAA,QACA,UAAU;AAAA,QACV;AAAA,QACA,eAAe;AAAA,QACf,cAAc;AAAA,MAClB,CAAC;AAAA,IACL;AACA,eAAW,MAAM,KAAK,WAAW,EAAE,GAAG,SAAS,WAAW;AAC1D,WAAO;AAAA,EACX;AACJ;;;AChEA,OAAO;AASP,IAAqB,wBAArB,cAAmD,OAAO;AAAA;AAAA;AAAA;AAAA,EAItD,WAAW,aAAa;AACpB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAIA,WAAW,WAAW;AAClB,WAAO,CAAC,8BAA8B,uBAAuB;AAAA,EACjE;AACJ;;;ACrBA,IAAqB,oCAArB,cAA+D,QAAQ;AAAA;AAAA;AAAA;AAAA,EAInE,UAAU;AACN,UAAM,QAAQ,KAAK,OAAO;AAC1B,UAAM,MAAM,MAAM;AAClB,SAAK,QAAQ,CAAC,CAAC,IAAI,UAAU,aAAa,4BAA4B;AACtE,SAAK,YAAY,MAAM,OAAO,0BAA0B,IAAI,WAAW,4BAA4B;AAAA,EACvG;AAAA;AAAA;AAAA;AAAA,EAIA,QAAQ,UAAU,CAAC,GAAG;AAClB,UAAM,QAAQ,KAAK,OAAO;AAC1B,UAAM,WAAW,MAAM;AACvB,UAAM,YAAY,SAAS;AAC3B,UAAM,aAAc,QAAQ,eAAe,SAAa,CAAC,KAAK,QAAQ,QAAQ;AAC9E,UAAM,OAAO,YAAU;AACnB,YAAM,SAAS,MAAM,OAAO,eAAe,UAAU,UAAU,GAAG,4BAA4B;AAC9F,UAAI,UAAU,aAAa;AACvB,YAAI,YAAY;AACZ,iBAAO,sBAAsB,8BAA8B,UAAU;AAAA,QACzE,OACK;AACD,gBAAM,kBAAkB,CAAC,UAAU;AAC/B,mBAAO,MAAM,KAAK,aAAa,4BAA4B,MAAM,KAAK;AAAA,UAC1E;AACA,gBAAM,QAAQ,UAAU;AACxB,gBAAM,iBAAiB,MAAM,wBAAwB,iBAAiB,EAAE,WAAW,WAAW,CAAC;AAC/F,gBAAM,eAAe,MAAM,wBAAwB,eAAe;AAClE,iBAAO,yBAAyB,4BAA4B;AAC5D,cAAI,EAAE,MAAM,QAAQ,cAAc,KAAK,MAAM,QAAQ,YAAY,IAAI;AACjE,mBAAO,gBAAgB,8BAA8B,OAAO,YAAY,gBAAgB,YAAY,CAAC;AAAA,UACzG;AAAA,QACJ;AAAA,MACJ,OACK;AACD,mBAAW,SAAS,QAAQ;AACxB,cAAI,YAAY;AACZ,mBAAO,aAAa,8BAA8B,YAAY,KAAK;AAAA,UACvE,OACK;AACD,mBAAO,gBAAgB,8BAA8B,KAAK;AAAA,UAC9D;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,CAAC;AAAA,EACL;AACJ;;;AC5CA,IAAqB,6BAArB,cAAwD,OAAO;AAAA;AAAA;AAAA;AAAA,EAI3D,WAAW,aAAa;AACpB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAIA,OAAO;AACH,UAAM,SAAS,KAAK;AACpB,WAAO,MAAM,OAAO,OAAO,SAAS,EAAE,iBAAiB,CAAC,4BAA4B,EAAE,CAAC;AACvF,WAAO,WAAW,IAAI,QAAQ,EAAE,mBAAmB;AAAA,MAC/C,OAAO;AAAA,MACP,MAAM;AAAA,QACF,MAAM;AAAA,QACN,SAAS;AAAA,MACb;AAAA,IACJ,CAAC;AACD,WAAO,WAAW,IAAI,UAAU,EAAE,mBAAmB;AAAA,MACjD,OAAO;AAAA,MACP,MAAM,CAAC,qBAAqB,EAAE,OAAO,MAAM;AACvC,YAAI,qBAAqB;AAErB,iBAAO,OAAO,uBAAuB,QAAQ,EAAE,OAAO,+BAA+B,GAAG,EAAE,UAAU,IAAI,CAAC;AAAA,QAC7G;AAAA,MACJ;AAAA,IACJ,CAAC;AACD,WAAO,SAAS,IAAI,8BAA8B,IAAI,kCAAkC,MAAM,CAAC;AAC/F,WAAO,QAAQ,KAAK,OAAO,YAAU;AACjC,iBAAW,QAAQ,OAAO,QAAQ,KAAK,SAAS,OAAO;AACnD,eAAO,SAAS,uCAAuC,IAAI;AAAA,MAC/D;AAAA,IACJ,CAAC;AAAA,EACL;AACJ;;;AC3CA,OAAO,gBAAgB;AAMvB,IAAqB,wBAArB,cAAmD,OAAO;AAAA;AAAA;AAAA;AAAA,EAItD,WAAW,aAAa;AACpB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAIA,OAAO;AACH,UAAM,SAAS,KAAK;AACpB,UAAM,IAAI,OAAO;AACjB,WAAO,GAAG,iBAAiB,IAAI,8BAA8B,YAAU;AACnE,YAAM,UAAU,OAAO,SAAS,IAAI,4BAA4B;AAChE,YAAM,OAAO,IAAI,WAAW,MAAM;AAClC,WAAK,IAAI;AAAA,QACL,MAAM;AAAA,QACN,SAAS;AAAA,QACT,cAAc;AAAA,MAClB,CAAC;AACD,WAAK,KAAK,QAAQ,WAAW,EAAE,GAAG,SAAS,SAAS,WAAW;AAC/D,WAAK,KAAK,OAAO,EAAE,GAAG,SAAS,SAAS,WAAS;AAC7C,eAAO,QAAQ,EAAE,iBAAiB,IAAI,EAAE,gBAAgB;AAAA,MAC5D,CAAC;AACD,WAAK,SAAS,MAAM,WAAW,MAAM;AACjC,eAAO,QAAQ,4BAA4B;AAC3C,eAAO,QAAQ,KAAK,MAAM;AAAA,MAC9B,CAAC;AACD,aAAO;AAAA,IACX,CAAC;AAAA,EACL;AACJ;;;ACrCA,OAAO;AASP,IAAqB,sBAArB,cAAiD,OAAO;AAAA;AAAA;AAAA;AAAA,EAIpD,WAAW,aAAa;AACpB,WAAO;AAAA,EACX;AAAA,EACA,WAAW,WAAW;AAClB,WAAO,CAAC,4BAA4B,qBAAqB;AAAA,EAC7D;AACJ;",
  "names": []
}
