{
  "version": 3,
  "sources": ["../../@ckeditor/ckeditor5-html-embed/src/htmlembedcommand.js", "../../@ckeditor/ckeditor5-html-embed/src/htmlembedediting.js", "../../@ckeditor/ckeditor5-html-embed/src/htmlembedui.js", "../../@ckeditor/ckeditor5-html-embed/src/htmlembed.js"],
  "sourcesContent": ["/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command } from 'ckeditor5/src/core.js';\nimport { findOptimalInsertionRange } from 'ckeditor5/src/widget.js';\n/**\n * The insert HTML embed element command.\n *\n * The command is registered by {@link module:html-embed/htmlembedediting~HtmlEmbedEditing} as `'htmlEmbed'`.\n *\n * To insert an empty HTML embed element at the current selection, execute the command:\n *\n * ```ts\n * editor.execute( 'htmlEmbed' );\n * ```\n *\n * You can specify the initial content of a new HTML embed in the argument:\n *\n * ```ts\n * editor.execute( 'htmlEmbed', '<b>Initial content.</b>' );\n * ```\n *\n * To update the content of the HTML embed, select it in the model and pass the content in the argument:\n *\n * ```ts\n * editor.execute( 'htmlEmbed', '<b>New content of an existing embed.</b>' );\n * ```\n */\nexport default class HtmlEmbedCommand extends Command {\n    /**\n     * @inheritDoc\n     */\n    refresh() {\n        const model = this.editor.model;\n        const schema = model.schema;\n        const selection = model.document.selection;\n        const selectedRawHtmlElement = getSelectedRawHtmlModelWidget(selection);\n        this.isEnabled = isHtmlEmbedAllowedInParent(selection, schema, model);\n        this.value = selectedRawHtmlElement ? selectedRawHtmlElement.getAttribute('value') || '' : null;\n    }\n    /**\n     * Executes the command, which either:\n     *\n     * * creates and inserts a new HTML embed element if none was selected,\n     * * updates the content of the HTML embed if one was selected.\n     *\n     * @fires execute\n     * @param value When passed, the value (content) will be set on a new embed or a selected one.\n     */\n    execute(value) {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        model.change(writer => {\n            let htmlEmbedElement;\n            // If the command has a non-null value, there must be some HTML embed selected in the model.\n            if (this.value !== null) {\n                htmlEmbedElement = getSelectedRawHtmlModelWidget(selection);\n            }\n            else {\n                htmlEmbedElement = writer.createElement('rawHtml');\n                model.insertObject(htmlEmbedElement, null, null, { setSelection: 'on' });\n            }\n            writer.setAttribute('value', value, htmlEmbedElement);\n        });\n    }\n}\n/**\n * Checks if an HTML embed is allowed by the schema in the optimal insertion parent.\n */\nfunction isHtmlEmbedAllowedInParent(selection, schema, model) {\n    const parent = getInsertHtmlEmbedParent(selection, model);\n    return schema.checkChild(parent, 'rawHtml');\n}\n/**\n * Returns a node that will be used to insert a html embed with `model.insertContent` to check if a html embed element can be placed there.\n */\nfunction getInsertHtmlEmbedParent(selection, model) {\n    const insertionRange = findOptimalInsertionRange(selection, model);\n    const parent = insertionRange.start.parent;\n    if (parent.isEmpty && !parent.is('rootElement')) {\n        return parent.parent;\n    }\n    return parent;\n}\n/**\n * Returns the selected HTML embed element in the model, if any.\n */\nfunction getSelectedRawHtmlModelWidget(selection) {\n    const selectedElement = selection.getSelectedElement();\n    if (selectedElement && selectedElement.is('element', 'rawHtml')) {\n        return selectedElement;\n    }\n    return null;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module html-embed/htmlembedediting\n */\nimport { Plugin, icons } from 'ckeditor5/src/core.js';\nimport { ButtonView } from 'ckeditor5/src/ui.js';\nimport { toWidget } from 'ckeditor5/src/widget.js';\nimport { logWarning, createElement } from 'ckeditor5/src/utils.js';\nimport HtmlEmbedCommand from './htmlembedcommand.js';\nimport '../theme/htmlembed.css';\n/**\n * The HTML embed editing feature.\n */\nexport default class HtmlEmbedEditing extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'HtmlEmbedEditing';\n    }\n    /**\n     * @inheritDoc\n     */\n    constructor(editor) {\n        super(editor);\n        /**\n         * Keeps references to {@link module:ui/button/buttonview~ButtonView edit, save, and cancel} button instances created for\n         * each widget so they can be destroyed if they are no longer in DOM after the editing view was re-rendered.\n         */\n        this._widgetButtonViewReferences = new Set();\n        editor.config.define('htmlEmbed', {\n            showPreviews: false,\n            sanitizeHtml: rawHtml => {\n                /**\n                 * When using the HTML embed feature with the `htmlEmbed.showPreviews=true` option, it is strongly recommended to\n                 * define a sanitize function that will clean up the input HTML in order to avoid XSS vulnerability.\n                 *\n                 * For a detailed overview, check the {@glink features/html/html-embed HTML embed feature} documentation.\n                 *\n                 * @error html-embed-provide-sanitize-function\n                 */\n                logWarning('html-embed-provide-sanitize-function');\n                return {\n                    html: rawHtml,\n                    hasChanged: false\n                };\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        schema.register('rawHtml', {\n            inheritAllFrom: '$blockObject',\n            allowAttributes: ['value']\n        });\n        editor.commands.add('htmlEmbed', new HtmlEmbedCommand(editor));\n        this._setupConversion();\n    }\n    /**\n     * Prepares converters for the feature.\n     */\n    _setupConversion() {\n        const editor = this.editor;\n        const t = editor.t;\n        const view = editor.editing.view;\n        const widgetButtonViewReferences = this._widgetButtonViewReferences;\n        const htmlEmbedConfig = editor.config.get('htmlEmbed');\n        // Destroy UI buttons created for widgets that have been removed from the view document (e.g. in the previous conversion).\n        // This prevents unexpected memory leaks from UI views.\n        this.editor.editing.view.on('render', () => {\n            for (const buttonView of widgetButtonViewReferences) {\n                if (buttonView.element && buttonView.element.isConnected) {\n                    return;\n                }\n                buttonView.destroy();\n                widgetButtonViewReferences.delete(buttonView);\n            }\n        }, { priority: 'lowest' });\n        // Register div.raw-html-embed as a raw content element so all of it's content will be provided\n        // as a view element's custom property while data upcasting.\n        editor.data.registerRawContentMatcher({\n            name: 'div',\n            classes: 'raw-html-embed'\n        });\n        editor.conversion.for('upcast').elementToElement({\n            view: {\n                name: 'div',\n                classes: 'raw-html-embed'\n            },\n            model: (viewElement, { writer }) => {\n                // The div.raw-html-embed is registered as a raw content element,\n                // so all it's content is available in a custom property.\n                return writer.createElement('rawHtml', {\n                    value: viewElement.getCustomProperty('$rawContent')\n                });\n            }\n        });\n        editor.conversion.for('dataDowncast').elementToElement({\n            model: 'rawHtml',\n            view: (modelElement, { writer }) => {\n                return writer.createRawElement('div', { class: 'raw-html-embed' }, function (domElement) {\n                    domElement.innerHTML = modelElement.getAttribute('value') || '';\n                });\n            }\n        });\n        editor.conversion.for('editingDowncast').elementToStructure({\n            model: { name: 'rawHtml', attributes: ['value'] },\n            view: (modelElement, { writer }) => {\n                let domContentWrapper;\n                let state;\n                let props;\n                const viewContentWrapper = writer.createRawElement('div', {\n                    class: 'raw-html-embed__content-wrapper'\n                }, function (domElement) {\n                    domContentWrapper = domElement;\n                    renderContent({ editor, domElement, state, props });\n                    // Since there is a `data-cke-ignore-events` attribute set on the wrapper element in the editable mode,\n                    // the explicit `mousedown` handler on the `capture` phase is needed to move the selection onto the whole\n                    // HTML embed widget.\n                    domContentWrapper.addEventListener('mousedown', () => {\n                        if (state.isEditable) {\n                            const model = editor.model;\n                            const selectedElement = model.document.selection.getSelectedElement();\n                            // Move the selection onto the whole HTML embed widget if it's currently not selected.\n                            if (selectedElement !== modelElement) {\n                                model.change(writer => writer.setSelection(modelElement, 'on'));\n                            }\n                        }\n                    }, true);\n                });\n                // API exposed on each raw HTML embed widget so other features can control a particular widget.\n                const rawHtmlApi = {\n                    makeEditable() {\n                        state = Object.assign({}, state, {\n                            isEditable: true\n                        });\n                        renderContent({ domElement: domContentWrapper, editor, state, props });\n                        view.change(writer => {\n                            writer.setAttribute('data-cke-ignore-events', 'true', viewContentWrapper);\n                        });\n                        // This could be potentially pulled to a separate method called focusTextarea().\n                        domContentWrapper.querySelector('textarea').focus();\n                    },\n                    save(newValue) {\n                        // If the value didn't change, we just cancel. If it changed,\n                        // it's enough to update the model – the entire widget will be reconverted.\n                        if (newValue !== state.getRawHtmlValue()) {\n                            editor.execute('htmlEmbed', newValue);\n                            editor.editing.view.focus();\n                        }\n                        else {\n                            this.cancel();\n                        }\n                    },\n                    cancel() {\n                        state = Object.assign({}, state, {\n                            isEditable: false\n                        });\n                        renderContent({ domElement: domContentWrapper, editor, state, props });\n                        editor.editing.view.focus();\n                        view.change(writer => {\n                            writer.removeAttribute('data-cke-ignore-events', viewContentWrapper);\n                        });\n                    }\n                };\n                state = {\n                    showPreviews: htmlEmbedConfig.showPreviews,\n                    isEditable: false,\n                    getRawHtmlValue: () => modelElement.getAttribute('value') || ''\n                };\n                props = {\n                    sanitizeHtml: htmlEmbedConfig.sanitizeHtml,\n                    textareaPlaceholder: t('Paste raw HTML here...'),\n                    onEditClick() {\n                        rawHtmlApi.makeEditable();\n                    },\n                    onSaveClick(newValue) {\n                        rawHtmlApi.save(newValue);\n                    },\n                    onCancelClick() {\n                        rawHtmlApi.cancel();\n                    }\n                };\n                const viewContainer = writer.createContainerElement('div', {\n                    class: 'raw-html-embed',\n                    'data-html-embed-label': t('HTML snippet'),\n                    dir: editor.locale.uiLanguageDirection\n                }, viewContentWrapper);\n                writer.setCustomProperty('rawHtmlApi', rawHtmlApi, viewContainer);\n                writer.setCustomProperty('rawHtml', true, viewContainer);\n                return toWidget(viewContainer, writer, {\n                    label: t('HTML snippet'),\n                    hasSelectionHandle: true\n                });\n            }\n        });\n        function renderContent({ editor, domElement, state, props }) {\n            // Remove all children;\n            domElement.textContent = '';\n            const domDocument = domElement.ownerDocument;\n            let domTextarea;\n            if (state.isEditable) {\n                const textareaProps = {\n                    isDisabled: false,\n                    placeholder: props.textareaPlaceholder\n                };\n                domTextarea = createDomTextarea({ domDocument, state, props: textareaProps });\n                domElement.append(domTextarea);\n            }\n            else if (state.showPreviews) {\n                const previewContainerProps = {\n                    sanitizeHtml: props.sanitizeHtml\n                };\n                domElement.append(createPreviewContainer({ domDocument, state, props: previewContainerProps, editor }));\n            }\n            else {\n                const textareaProps = {\n                    isDisabled: true,\n                    placeholder: props.textareaPlaceholder\n                };\n                domElement.append(createDomTextarea({ domDocument, state, props: textareaProps }));\n            }\n            const buttonsWrapperProps = {\n                onEditClick: props.onEditClick,\n                onSaveClick: () => {\n                    props.onSaveClick(domTextarea.value);\n                },\n                onCancelClick: props.onCancelClick\n            };\n            domElement.prepend(createDomButtonsWrapper({ editor, domDocument, state, props: buttonsWrapperProps }));\n        }\n        function createDomButtonsWrapper({ editor, domDocument, state, props }) {\n            const domButtonsWrapper = createElement(domDocument, 'div', {\n                class: 'raw-html-embed__buttons-wrapper'\n            });\n            if (state.isEditable) {\n                const saveButtonView = createUIButton(editor, 'save', props.onSaveClick);\n                const cancelButtonView = createUIButton(editor, 'cancel', props.onCancelClick);\n                domButtonsWrapper.append(saveButtonView.element, cancelButtonView.element);\n                widgetButtonViewReferences.add(saveButtonView).add(cancelButtonView);\n            }\n            else {\n                const editButtonView = createUIButton(editor, 'edit', props.onEditClick);\n                domButtonsWrapper.append(editButtonView.element);\n                widgetButtonViewReferences.add(editButtonView);\n            }\n            return domButtonsWrapper;\n        }\n        function createDomTextarea({ domDocument, state, props }) {\n            const domTextarea = createElement(domDocument, 'textarea', {\n                placeholder: props.placeholder,\n                class: 'ck ck-reset ck-input ck-input-text raw-html-embed__source'\n            });\n            domTextarea.disabled = props.isDisabled;\n            domTextarea.value = state.getRawHtmlValue();\n            return domTextarea;\n        }\n        function createPreviewContainer({ editor, domDocument, state, props }) {\n            const sanitizedOutput = props.sanitizeHtml(state.getRawHtmlValue());\n            const placeholderText = state.getRawHtmlValue().length > 0 ?\n                t('No preview available') :\n                t('Empty snippet content');\n            const domPreviewPlaceholder = createElement(domDocument, 'div', {\n                class: 'ck ck-reset_all raw-html-embed__preview-placeholder'\n            }, placeholderText);\n            const domPreviewContent = createElement(domDocument, 'div', {\n                class: 'raw-html-embed__preview-content',\n                dir: editor.locale.contentLanguageDirection\n            });\n            // Creating a contextual document fragment allows executing scripts when inserting into the preview element.\n            // See: #8326.\n            const domRange = domDocument.createRange();\n            const domDocumentFragment = domRange.createContextualFragment(sanitizedOutput.html);\n            domPreviewContent.appendChild(domDocumentFragment);\n            const domPreviewContainer = createElement(domDocument, 'div', {\n                class: 'raw-html-embed__preview'\n            }, [\n                domPreviewPlaceholder, domPreviewContent\n            ]);\n            return domPreviewContainer;\n        }\n    }\n}\n/**\n * Returns a UI button view that can be used in conversion.\n */\nfunction createUIButton(editor, type, onClick) {\n    const { t } = editor.locale;\n    const buttonView = new ButtonView(editor.locale);\n    const command = editor.commands.get('htmlEmbed');\n    buttonView.set({\n        class: `raw-html-embed__${type}-button`,\n        icon: icons.pencil,\n        tooltip: true,\n        tooltipPosition: editor.locale.uiLanguageDirection === 'rtl' ? 'e' : 'w'\n    });\n    buttonView.render();\n    if (type === 'edit') {\n        buttonView.set({\n            icon: icons.pencil,\n            label: t('Edit source')\n        });\n        buttonView.bind('isEnabled').to(command);\n    }\n    else if (type === 'save') {\n        buttonView.set({\n            icon: icons.check,\n            label: t('Save changes')\n        });\n        buttonView.bind('isEnabled').to(command);\n    }\n    else {\n        buttonView.set({\n            icon: icons.cancel,\n            label: t('Cancel')\n        });\n    }\n    buttonView.on('execute', onClick);\n    return buttonView;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module html-embed/htmlembedui\n */\nimport { icons, Plugin } from 'ckeditor5/src/core.js';\nimport { ButtonView } from 'ckeditor5/src/ui.js';\n/**\n * The HTML embed UI plugin.\n */\nexport default class HtmlEmbedUI extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'HtmlEmbedUI';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        // Add the `htmlEmbed` button to feature components.\n        editor.ui.componentFactory.add('htmlEmbed', locale => {\n            const command = editor.commands.get('htmlEmbed');\n            const view = new ButtonView(locale);\n            view.set({\n                label: t('Insert HTML'),\n                icon: icons.html,\n                tooltip: true\n            });\n            view.bind('isEnabled').to(command, 'isEnabled');\n            // Execute the command.\n            this.listenTo(view, 'execute', () => {\n                editor.execute('htmlEmbed');\n                editor.editing.view.focus();\n                const rawHtmlApi = editor.editing.view.document.selection\n                    .getSelectedElement()\n                    .getCustomProperty('rawHtmlApi');\n                rawHtmlApi.makeEditable();\n            });\n            return view;\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module html-embed/htmlembed\n */\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { Widget } from 'ckeditor5/src/widget.js';\nimport HtmlEmbedEditing from './htmlembedediting.js';\nimport HtmlEmbedUI from './htmlembedui.js';\n/**\n * The HTML embed feature.\n *\n * It allows inserting HTML snippets directly into the editor.\n *\n * For a detailed overview, check the {@glink features/html/html-embed HTML embed feature} documentation.\n */\nexport default class HtmlEmbed extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [HtmlEmbedEditing, HtmlEmbedUI, Widget];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'HtmlEmbed';\n    }\n}\n"],
  "mappings": "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",
  "names": ["writer", "editor"]
}
