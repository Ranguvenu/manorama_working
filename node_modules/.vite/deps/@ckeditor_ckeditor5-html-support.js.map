{
  "version": 3,
  "sources": ["../../@ckeditor/ckeditor5-html-support/src/utils.js", "../../@ckeditor/ckeditor5-html-support/src/converters.js", "../../@ckeditor/ckeditor5-html-support/src/schemadefinitions.js", "../../@ckeditor/ckeditor5-html-support/src/dataschema.js", "../../@ckeditor/ckeditor5-html-support/src/datafilter.js", "../../@ckeditor/ckeditor5-html-support/src/integrations/codeblock.js", "../../@ckeditor/ckeditor5-html-support/src/integrations/dualcontent.js", "../../@ckeditor/ckeditor5-html-support/src/integrations/heading.js", "../../@ckeditor/ckeditor5-html-support/src/integrations/integrationutils.js", "../../@ckeditor/ckeditor5-html-support/src/integrations/image.js", "../../@ckeditor/ckeditor5-html-support/src/integrations/mediaembed.js", "../../@ckeditor/ckeditor5-html-support/src/integrations/script.js", "../../@ckeditor/ckeditor5-html-support/src/integrations/table.js", "../../@ckeditor/ckeditor5-html-support/src/integrations/style.js", "../../@ckeditor/ckeditor5-html-support/src/integrations/list.js", "../../@ckeditor/ckeditor5-html-support/src/integrations/customelement.js", "../../@ckeditor/ckeditor5-html-support/src/generalhtmlsupport.js", "../../@ckeditor/ckeditor5-html-support/src/htmlcomment.js", "../../@ckeditor/ckeditor5-html-support/src/htmlpagedataprocessor.js", "../../@ckeditor/ckeditor5-html-support/src/fullpage.js"],
  "sourcesContent": ["/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { startCase, cloneDeep } from 'lodash-es';\n/**\n* Helper function for the downcast converter. Updates attributes on the given view element.\n*\n* @param writer The view writer.\n* @param oldViewAttributes The previous GHS attribute value.\n* @param newViewAttributes The current GHS attribute value.\n* @param viewElement The view element to update.\n*/\nexport function updateViewAttributes(writer, oldViewAttributes, newViewAttributes, viewElement) {\n    if (oldViewAttributes) {\n        removeViewAttributes(writer, oldViewAttributes, viewElement);\n    }\n    if (newViewAttributes) {\n        setViewAttributes(writer, newViewAttributes, viewElement);\n    }\n}\n/**\n * Helper function for the downcast converter. Sets attributes on the given view element.\n *\n * @param writer The view writer.\n * @param viewAttributes The GHS attribute value.\n * @param viewElement The view element to update.\n */\nexport function setViewAttributes(writer, viewAttributes, viewElement) {\n    if (viewAttributes.attributes) {\n        for (const [key, value] of Object.entries(viewAttributes.attributes)) {\n            writer.setAttribute(key, value, viewElement);\n        }\n    }\n    if (viewAttributes.styles) {\n        writer.setStyle(viewAttributes.styles, viewElement);\n    }\n    if (viewAttributes.classes) {\n        writer.addClass(viewAttributes.classes, viewElement);\n    }\n}\n/**\n * Helper function for the downcast converter. Removes attributes on the given view element.\n *\n * @param writer The view writer.\n * @param viewAttributes The GHS attribute value.\n * @param viewElement The view element to update.\n */\nexport function removeViewAttributes(writer, viewAttributes, viewElement) {\n    if (viewAttributes.attributes) {\n        for (const [key] of Object.entries(viewAttributes.attributes)) {\n            writer.removeAttribute(key, viewElement);\n        }\n    }\n    if (viewAttributes.styles) {\n        for (const style of Object.keys(viewAttributes.styles)) {\n            writer.removeStyle(style, viewElement);\n        }\n    }\n    if (viewAttributes.classes) {\n        writer.removeClass(viewAttributes.classes, viewElement);\n    }\n}\n/**\n* Merges view element attribute objects.\n*/\nexport function mergeViewElementAttributes(target, source) {\n    const result = cloneDeep(target);\n    let key = 'attributes';\n    for (key in source) {\n        // Merge classes.\n        if (key == 'classes') {\n            result[key] = Array.from(new Set([...(target[key] || []), ...source[key]]));\n        }\n        // Merge attributes or styles.\n        else {\n            result[key] = { ...target[key], ...source[key] };\n        }\n    }\n    return result;\n}\nexport function modifyGhsAttribute(writer, item, ghsAttributeName, subject, callback) {\n    const oldValue = item.getAttribute(ghsAttributeName);\n    const newValue = {};\n    for (const kind of ['attributes', 'styles', 'classes']) {\n        // Properties other than `subject` should be assigned from `oldValue`.\n        if (kind != subject) {\n            if (oldValue && oldValue[kind]) {\n                newValue[kind] = oldValue[kind];\n            }\n            continue;\n        }\n        // `callback` should be applied on property [`subject`].\n        if (subject == 'classes') {\n            const values = new Set(oldValue && oldValue.classes || []);\n            callback(values);\n            if (values.size) {\n                newValue[kind] = Array.from(values);\n            }\n            continue;\n        }\n        const values = new Map(Object.entries(oldValue && oldValue[kind] || {}));\n        callback(values);\n        if (values.size) {\n            newValue[kind] = Object.fromEntries(values);\n        }\n    }\n    if (Object.keys(newValue).length) {\n        if (item.is('documentSelection')) {\n            writer.setSelectionAttribute(ghsAttributeName, newValue);\n        }\n        else {\n            writer.setAttribute(ghsAttributeName, newValue, item);\n        }\n    }\n    else if (oldValue) {\n        if (item.is('documentSelection')) {\n            writer.removeSelectionAttribute(ghsAttributeName);\n        }\n        else {\n            writer.removeAttribute(ghsAttributeName, item);\n        }\n    }\n}\n/**\n * Transforms passed string to PascalCase format. Examples:\n * * `div` => `Div`\n * * `h1` => `H1`\n * * `table` => `Table`\n */\nexport function toPascalCase(data) {\n    return startCase(data).replace(/ /g, '');\n}\n/**\n * Returns the attribute name of the model element that holds raw HTML attributes.\n */\nexport function getHtmlAttributeName(viewElementName) {\n    return `html${toPascalCase(viewElementName)}Attributes`;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { toWidget } from 'ckeditor5/src/widget.js';\nimport { setViewAttributes, mergeViewElementAttributes, updateViewAttributes, getHtmlAttributeName } from './utils.js';\n/**\n * View-to-model conversion helper for object elements.\n *\n * Preserves object element content in `htmlContent` attribute.\n *\n * @returns Returns a conversion callback.\n*/\nexport function viewToModelObjectConverter({ model: modelName }) {\n    return (viewElement, conversionApi) => {\n        // Let's keep element HTML and its attributes, so we can rebuild element in downcast conversions.\n        return conversionApi.writer.createElement(modelName, {\n            htmlContent: viewElement.getCustomProperty('$rawContent')\n        });\n    };\n}\n/**\n * Conversion helper converting an object element to an HTML object widget.\n *\n * @returns Returns a conversion callback.\n*/\nexport function toObjectWidgetConverter(editor, { view: viewName, isInline }) {\n    const t = editor.t;\n    return (modelElement, { writer }) => {\n        const widgetLabel = t('HTML object');\n        const viewElement = createObjectView(viewName, modelElement, writer);\n        const viewAttributes = modelElement.getAttribute(getHtmlAttributeName(viewName));\n        writer.addClass('html-object-embed__content', viewElement);\n        if (viewAttributes) {\n            setViewAttributes(writer, viewAttributes, viewElement);\n        }\n        // Widget cannot be a raw element because the widget system would not be able\n        // to add its UI to it. Thus, we need separate view container.\n        const viewContainer = writer.createContainerElement(isInline ? 'span' : 'div', {\n            class: 'html-object-embed',\n            'data-html-object-embed-label': widgetLabel\n        }, viewElement);\n        return toWidget(viewContainer, writer, { label: widgetLabel });\n    };\n}\n/**\n* Creates object view element from the given model element.\n*/\nexport function createObjectView(viewName, modelElement, writer) {\n    return writer.createRawElement(viewName, null, (domElement, domConverter) => {\n        domConverter.setContentOf(domElement, modelElement.getAttribute('htmlContent'));\n    });\n}\n/**\n * View-to-attribute conversion helper preserving inline element attributes on `$text`.\n *\n * @returns Returns a conversion callback.\n*/\nexport function viewToAttributeInlineConverter({ view: viewName, model: attributeKey, allowEmpty }, dataFilter) {\n    return dispatcher => {\n        dispatcher.on(`element:${viewName}`, (evt, data, conversionApi) => {\n            let viewAttributes = dataFilter.processViewAttributes(data.viewItem, conversionApi);\n            // Do not apply the attribute if the element itself is already consumed and there are no view attributes to store.\n            if (!viewAttributes && !conversionApi.consumable.test(data.viewItem, { name: true })) {\n                return;\n            }\n            // Otherwise, we might need to convert it to an empty object just to preserve element itself,\n            // for example `<cite>` => <$text htmlCite=\"{}\">.\n            viewAttributes = viewAttributes || {};\n            // Consume the element itself if it wasn't consumed by any other converter.\n            conversionApi.consumable.consume(data.viewItem, { name: true });\n            // Since we are converting to attribute we need a range on which we will set the attribute.\n            // If the range is not created yet, we will create it.\n            if (!data.modelRange) {\n                data = Object.assign(data, conversionApi.convertChildren(data.viewItem, data.modelCursor));\n            }\n            // Convert empty inline element if allowed and has any attributes.\n            if (allowEmpty && data.modelRange.isCollapsed && Object.keys(viewAttributes).length) {\n                const modelElement = conversionApi.writer.createElement('htmlEmptyElement');\n                if (!conversionApi.safeInsert(modelElement, data.modelCursor)) {\n                    return;\n                }\n                const parts = conversionApi.getSplitParts(modelElement);\n                data.modelRange = conversionApi.writer.createRange(data.modelRange.start, conversionApi.writer.createPositionAfter(parts[parts.length - 1]));\n                conversionApi.updateConversionResult(modelElement, data);\n                setAttributeOnItem(modelElement, viewAttributes, conversionApi);\n                return;\n            }\n            // Set attribute on each item in range according to the schema.\n            for (const node of data.modelRange.getItems()) {\n                setAttributeOnItem(node, viewAttributes, conversionApi);\n            }\n        }, { priority: 'low' });\n    };\n    function setAttributeOnItem(node, viewAttributes, conversionApi) {\n        if (conversionApi.schema.checkAttribute(node, attributeKey)) {\n            // Node's children are converted recursively, so node can already include model attribute.\n            // We want to extend it, not replace.\n            const nodeAttributes = node.getAttribute(attributeKey);\n            const attributesToAdd = mergeViewElementAttributes(viewAttributes, nodeAttributes || {});\n            conversionApi.writer.setAttribute(attributeKey, attributesToAdd, node);\n        }\n    }\n}\n/**\n * Conversion helper converting an empty inline model element to an HTML element or widget.\n */\nexport function emptyInlineModelElementToViewConverter({ model: attributeKey, view: viewName }, asWidget) {\n    return (item, { writer, consumable }) => {\n        if (!item.hasAttribute(attributeKey)) {\n            return null;\n        }\n        const viewElement = writer.createContainerElement(viewName);\n        const attributeValue = item.getAttribute(attributeKey);\n        consumable.consume(item, `attribute:${attributeKey}`);\n        setViewAttributes(writer, attributeValue, viewElement);\n        viewElement.getFillerOffset = () => null;\n        return asWidget ? toWidget(viewElement, writer) : viewElement;\n    };\n}\n/**\n * Attribute-to-view conversion helper applying attributes to view element preserved on `$text`.\n *\n * @returns Returns a conversion callback.\n*/\nexport function attributeToViewInlineConverter({ priority, view: viewName }) {\n    return (attributeValue, conversionApi) => {\n        if (!attributeValue) {\n            return;\n        }\n        const { writer } = conversionApi;\n        const viewElement = writer.createAttributeElement(viewName, null, { priority });\n        setViewAttributes(writer, attributeValue, viewElement);\n        return viewElement;\n    };\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on block element.\n *\n * All matched attributes will be preserved on `html*Attributes` attribute.\n *\n * @returns Returns a conversion callback.\n*/\nexport function viewToModelBlockAttributeConverter({ view: viewName }, dataFilter) {\n    return (dispatcher) => {\n        dispatcher.on(`element:${viewName}`, (evt, data, conversionApi) => {\n            // Converting an attribute of an element that has not been converted to anything does not make sense\n            // because there will be nowhere to set that attribute on. At this stage, the element should've already\n            // been converted. A collapsed range can show up in to-do lists (<input>) or complex widgets (e.g. table).\n            // (https://github.com/ckeditor/ckeditor5/issues/11000).\n            if (!data.modelRange || data.modelRange.isCollapsed) {\n                return;\n            }\n            const viewAttributes = dataFilter.processViewAttributes(data.viewItem, conversionApi);\n            if (!viewAttributes) {\n                return;\n            }\n            conversionApi.writer.setAttribute(getHtmlAttributeName(data.viewItem.name), viewAttributes, data.modelRange);\n        }, { priority: 'low' });\n    };\n}\n/**\n * Model-to-view conversion helper applying attributes preserved in `html*Attributes` attribute\n * for block elements.\n *\n * @returns Returns a conversion callback.\n*/\nexport function modelToViewBlockAttributeConverter({ view: viewName, model: modelName }) {\n    return (dispatcher) => {\n        dispatcher.on(`attribute:${getHtmlAttributeName(viewName)}:${modelName}`, (evt, data, conversionApi) => {\n            if (!conversionApi.consumable.consume(data.item, evt.name)) {\n                return;\n            }\n            const { attributeOldValue, attributeNewValue } = data;\n            const viewWriter = conversionApi.writer;\n            const viewElement = conversionApi.mapper.toViewElement(data.item);\n            updateViewAttributes(viewWriter, attributeOldValue, attributeNewValue, viewElement);\n        });\n    };\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module html-support/schemadefinitions\n */\n// Skipped elements due to HTML deprecation:\n// * noframes (not sure if we should provide support for this element. CKE4 is not supporting frameset and frame,\n//   but it will unpack <frameset><noframes>foobar</noframes></frameset> to <noframes>foobar</noframes>, so there\n//   may be some content loss. Although using noframes as a standalone element seems invalid)\n// * keygen (this one is also empty)\n// * applet (support is limited mostly to old IE)\n// * basefont (this one is also empty)\n// * isindex (basically no support for modern browsers at all)\n//\n// Skipped elements due to lack empty element support:\n// * hr\n// * area\n// * br\n// * command\n// * map\n// * wbr\n// * colgroup -> col\n//\n// Skipped elements due to complexity:\n// * datalist with option elements used as a data source for input[list] element\n//\n// Skipped elements as they are handled as an object content:\n// * track\n// * source\n// * option\n// * param\n// * optgroup\n//\n// Skipped full page HTML elements:\n// * body\n// * html\n// * title\n// * head\n// * meta\n// * link\n// * etc...\n//\n// Skipped hidden elements:\n// noscript\nexport default {\n    block: [\n        // Existing features.\n        {\n            model: 'codeBlock',\n            view: 'pre'\n        },\n        {\n            model: 'paragraph',\n            view: 'p'\n        },\n        {\n            model: 'blockQuote',\n            view: 'blockquote'\n        },\n        {\n            model: 'listItem',\n            view: 'li'\n        },\n        {\n            model: 'pageBreak',\n            view: 'div'\n        },\n        {\n            model: 'rawHtml',\n            view: 'div'\n        },\n        {\n            model: 'table',\n            view: 'table'\n        },\n        {\n            model: 'tableRow',\n            view: 'tr'\n        },\n        {\n            model: 'tableCell',\n            view: 'td'\n        },\n        {\n            model: 'tableCell',\n            view: 'th'\n        },\n        {\n            model: 'tableColumnGroup',\n            view: 'colgroup'\n        },\n        {\n            model: 'tableColumn',\n            view: 'col'\n        },\n        {\n            model: 'caption',\n            view: 'caption'\n        },\n        {\n            model: 'caption',\n            view: 'figcaption'\n        },\n        {\n            model: 'imageBlock',\n            view: 'img'\n        },\n        {\n            model: 'imageInline',\n            view: 'img'\n        },\n        // Compatibility features.\n        {\n            model: 'htmlP',\n            view: 'p',\n            modelSchema: {\n                inheritAllFrom: '$block'\n            }\n        },\n        {\n            model: 'htmlBlockquote',\n            view: 'blockquote',\n            modelSchema: {\n                inheritAllFrom: '$container'\n            }\n        },\n        {\n            model: 'htmlTable',\n            view: 'table',\n            modelSchema: {\n                allowWhere: '$block',\n                isBlock: true\n            }\n        },\n        {\n            model: 'htmlTbody',\n            view: 'tbody',\n            modelSchema: {\n                allowIn: 'htmlTable',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlThead',\n            view: 'thead',\n            modelSchema: {\n                allowIn: 'htmlTable',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlTfoot',\n            view: 'tfoot',\n            modelSchema: {\n                allowIn: 'htmlTable',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlCaption',\n            view: 'caption',\n            modelSchema: {\n                allowIn: 'htmlTable',\n                allowChildren: '$text',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlColgroup',\n            view: 'colgroup',\n            modelSchema: {\n                allowIn: 'htmlTable',\n                allowChildren: 'col',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlCol',\n            view: 'col',\n            modelSchema: {\n                allowIn: 'htmlColgroup',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlTr',\n            view: 'tr',\n            modelSchema: {\n                allowIn: ['htmlTable', 'htmlThead', 'htmlTbody'],\n                isLimit: true\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlTd',\n            view: 'td',\n            modelSchema: {\n                allowIn: 'htmlTr',\n                allowContentOf: '$container',\n                isLimit: true,\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlTh',\n            view: 'th',\n            modelSchema: {\n                allowIn: 'htmlTr',\n                allowContentOf: '$container',\n                isLimit: true,\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlFigure',\n            view: 'figure',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        // TODO can also include other block elements.\n        {\n            model: 'htmlFigcaption',\n            view: 'figcaption',\n            modelSchema: {\n                allowIn: 'htmlFigure',\n                allowChildren: '$text',\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlAddress',\n            view: 'address',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlAside',\n            view: 'aside',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlMain',\n            view: 'main',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlDetails',\n            view: 'details',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlSummary',\n            view: 'summary',\n            modelSchema: {\n                allowChildren: '$text',\n                allowIn: 'htmlDetails',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlDiv',\n            view: 'div',\n            paragraphLikeModel: 'htmlDivParagraph',\n            modelSchema: {\n                inheritAllFrom: '$container'\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlFieldset',\n            view: 'fieldset',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        // TODO can also include h1-h6.\n        {\n            model: 'htmlLegend',\n            view: 'legend',\n            modelSchema: {\n                allowIn: 'htmlFieldset',\n                allowChildren: '$text'\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlHeader',\n            view: 'header',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlFooter',\n            view: 'footer',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlForm',\n            view: 'form',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: true\n            }\n        },\n        {\n            model: 'htmlHgroup',\n            view: 'hgroup',\n            modelSchema: {\n                allowChildren: [\n                    'htmlH1',\n                    'htmlH2',\n                    'htmlH3',\n                    'htmlH4',\n                    'htmlH5',\n                    'htmlH6'\n                ],\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlH1',\n            view: 'h1',\n            modelSchema: {\n                inheritAllFrom: '$block'\n            }\n        },\n        {\n            model: 'htmlH2',\n            view: 'h2',\n            modelSchema: {\n                inheritAllFrom: '$block'\n            }\n        },\n        {\n            model: 'htmlH3',\n            view: 'h3',\n            modelSchema: {\n                inheritAllFrom: '$block'\n            }\n        },\n        {\n            model: 'htmlH4',\n            view: 'h4',\n            modelSchema: {\n                inheritAllFrom: '$block'\n            }\n        },\n        {\n            model: 'htmlH5',\n            view: 'h5',\n            modelSchema: {\n                inheritAllFrom: '$block'\n            }\n        },\n        {\n            model: 'htmlH6',\n            view: 'h6',\n            modelSchema: {\n                inheritAllFrom: '$block'\n            }\n        },\n        {\n            model: '$htmlList',\n            modelSchema: {\n                allowWhere: '$container',\n                allowChildren: ['$htmlList', 'htmlLi'],\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlDir',\n            view: 'dir',\n            modelSchema: {\n                inheritAllFrom: '$htmlList'\n            }\n        },\n        {\n            model: 'htmlMenu',\n            view: 'menu',\n            modelSchema: {\n                inheritAllFrom: '$htmlList'\n            }\n        },\n        {\n            model: 'htmlUl',\n            view: 'ul',\n            modelSchema: {\n                inheritAllFrom: '$htmlList'\n            }\n        },\n        {\n            model: 'htmlOl',\n            view: 'ol',\n            modelSchema: {\n                inheritAllFrom: '$htmlList'\n            }\n        },\n        // TODO can also include other block elements.\n        {\n            model: 'htmlLi',\n            view: 'li',\n            modelSchema: {\n                allowIn: '$htmlList',\n                allowChildren: '$text',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlPre',\n            view: 'pre',\n            modelSchema: {\n                inheritAllFrom: '$block'\n            }\n        },\n        {\n            model: 'htmlArticle',\n            view: 'article',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlSection',\n            view: 'section',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlNav',\n            view: 'nav',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlDivDl',\n            view: 'div',\n            modelSchema: {\n                allowChildren: ['htmlDt', 'htmlDd'],\n                allowIn: 'htmlDl'\n            }\n        },\n        {\n            model: 'htmlDl',\n            view: 'dl',\n            modelSchema: {\n                allowWhere: '$container',\n                allowChildren: ['htmlDt', 'htmlDd', 'htmlDivDl'],\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlDt',\n            view: 'dt',\n            modelSchema: {\n                allowChildren: '$block',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlDd',\n            view: 'dd',\n            modelSchema: {\n                allowChildren: '$block',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlCenter',\n            view: 'center',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        }\n    ],\n    inline: [\n        // Existing features (attribute set on an existing model element).\n        {\n            model: 'htmlLiAttributes',\n            view: 'li',\n            appliesToBlock: true,\n            coupledAttribute: 'listItemId'\n        },\n        {\n            model: 'htmlOlAttributes',\n            view: 'ol',\n            appliesToBlock: true,\n            coupledAttribute: 'listItemId'\n        },\n        {\n            model: 'htmlUlAttributes',\n            view: 'ul',\n            appliesToBlock: true,\n            coupledAttribute: 'listItemId'\n        },\n        {\n            model: 'htmlFigureAttributes',\n            view: 'figure',\n            appliesToBlock: 'table'\n        },\n        {\n            model: 'htmlTheadAttributes',\n            view: 'thead',\n            appliesToBlock: 'table'\n        },\n        {\n            model: 'htmlTbodyAttributes',\n            view: 'tbody',\n            appliesToBlock: 'table'\n        },\n        {\n            model: 'htmlFigureAttributes',\n            view: 'figure',\n            appliesToBlock: 'imageBlock'\n        },\n        // Compatibility features.\n        {\n            model: 'htmlAcronym',\n            view: 'acronym',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlTt',\n            view: 'tt',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlFont',\n            view: 'font',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlTime',\n            view: 'time',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlVar',\n            view: 'var',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlBig',\n            view: 'big',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlSmall',\n            view: 'small',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlSamp',\n            view: 'samp',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlQ',\n            view: 'q',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlOutput',\n            view: 'output',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlKbd',\n            view: 'kbd',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlBdi',\n            view: 'bdi',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlBdo',\n            view: 'bdo',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlAbbr',\n            view: 'abbr',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlA',\n            view: 'a',\n            priority: 5,\n            coupledAttribute: 'linkHref'\n        },\n        {\n            model: 'htmlStrong',\n            view: 'strong',\n            coupledAttribute: 'bold',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlB',\n            view: 'b',\n            coupledAttribute: 'bold',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlI',\n            view: 'i',\n            coupledAttribute: 'italic',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlEm',\n            view: 'em',\n            coupledAttribute: 'italic',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlS',\n            view: 's',\n            coupledAttribute: 'strikethrough',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        // TODO According to HTML-spec can behave as div-like element, although CKE4 only handles it as an inline element.\n        {\n            model: 'htmlDel',\n            view: 'del',\n            coupledAttribute: 'strikethrough',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        // TODO According to HTML-spec can behave as div-like element, although CKE4 only handles it as an inline element.\n        {\n            model: 'htmlIns',\n            view: 'ins',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlU',\n            view: 'u',\n            coupledAttribute: 'underline',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlSub',\n            view: 'sub',\n            coupledAttribute: 'subscript',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlSup',\n            view: 'sup',\n            coupledAttribute: 'superscript',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlCode',\n            view: 'code',\n            coupledAttribute: 'code',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlMark',\n            view: 'mark',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlSpan',\n            view: 'span',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlCite',\n            view: 'cite',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlLabel',\n            view: 'label',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlDfn',\n            view: 'dfn',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        // Objects.\n        {\n            model: 'htmlObject',\n            view: 'object',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlIframe',\n            view: 'iframe',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlInput',\n            view: 'input',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlButton',\n            view: 'button',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlTextarea',\n            view: 'textarea',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlSelect',\n            view: 'select',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlVideo',\n            view: 'video',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlEmbed',\n            view: 'embed',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlOembed',\n            view: 'oembed',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlAudio',\n            view: 'audio',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlImg',\n            view: 'img',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlCanvas',\n            view: 'canvas',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        // TODO it could be probably represented as non-object element, although it has graphical representation,\n        // so probably makes more sense to keep it as an object.\n        {\n            model: 'htmlMeter',\n            view: 'meter',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        // TODO it could be probably represented as non-object element, although it has graphical representation,\n        // so probably makes more sense to keep it as an object.\n        {\n            model: 'htmlProgress',\n            view: 'progress',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlScript',\n            view: 'script',\n            modelSchema: {\n                allowWhere: ['$text', '$block'],\n                isInline: true\n            }\n        },\n        {\n            model: 'htmlStyle',\n            view: 'style',\n            modelSchema: {\n                allowWhere: ['$text', '$block'],\n                isInline: true\n            }\n        },\n        {\n            model: 'htmlCustomElement',\n            view: '$customElement',\n            modelSchema: {\n                allowWhere: ['$text', '$block'],\n                allowAttributesOf: '$inlineObject',\n                isInline: true\n            }\n        }\n    ]\n};\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module html-support/dataschema\n */\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { toArray } from 'ckeditor5/src/utils.js';\nimport defaultConfig from './schemadefinitions.js';\nimport { mergeWith } from 'lodash-es';\n/**\n * Holds representation of the extended HTML document type definitions to be used by the\n * editor in HTML support.\n *\n * Data schema is represented by data schema definitions.\n *\n * To add new definition for block element,\n * use {@link module:html-support/dataschema~DataSchema#registerBlockElement} method:\n *\n * ```ts\n * dataSchema.registerBlockElement( {\n * \tview: 'section',\n * \tmodel: 'my-section',\n * \tmodelSchema: {\n * \t\tinheritAllFrom: '$block'\n * \t}\n * } );\n * ```\n *\n * To add new definition for inline element,\n * use {@link module:html-support/dataschema~DataSchema#registerInlineElement} method:\n *\n * ```\n * dataSchema.registerInlineElement( {\n * \tview: 'span',\n * \tmodel: 'my-span',\n * \tattributeProperties: {\n * \t\tcopyOnEnter: true\n * \t}\n * } );\n * ```\n */\nexport default class DataSchema extends Plugin {\n    constructor() {\n        super(...arguments);\n        /**\n         * A map of registered data schema definitions.\n         */\n        this._definitions = [];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'DataSchema';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        for (const definition of defaultConfig.block) {\n            this.registerBlockElement(definition);\n        }\n        for (const definition of defaultConfig.inline) {\n            this.registerInlineElement(definition);\n        }\n    }\n    /**\n     * Add new data schema definition describing block element.\n     */\n    registerBlockElement(definition) {\n        this._definitions.push({ ...definition, isBlock: true });\n    }\n    /**\n     * Add new data schema definition describing inline element.\n     */\n    registerInlineElement(definition) {\n        this._definitions.push({ ...definition, isInline: true });\n    }\n    /**\n     * Updates schema definition describing block element with new properties.\n     *\n     * Creates new scheme if it doesn't exist.\n     * Array properties are concatenated with original values.\n     *\n     * @param definition Definition update.\n     */\n    extendBlockElement(definition) {\n        this._extendDefinition({ ...definition, isBlock: true });\n    }\n    /**\n     * Updates schema definition describing inline element with new properties.\n     *\n     * Creates new scheme if it doesn't exist.\n     * Array properties are concatenated with original values.\n     *\n     * @param definition Definition update.\n     */\n    extendInlineElement(definition) {\n        this._extendDefinition({ ...definition, isInline: true });\n    }\n    /**\n     * Returns all definitions matching the given view name.\n     *\n     * @param includeReferences Indicates if this method should also include definitions of referenced models.\n     */\n    getDefinitionsForView(viewName, includeReferences = false) {\n        const definitions = new Set();\n        for (const definition of this._getMatchingViewDefinitions(viewName)) {\n            if (includeReferences) {\n                for (const reference of this._getReferences(definition.model)) {\n                    definitions.add(reference);\n                }\n            }\n            definitions.add(definition);\n        }\n        return definitions;\n    }\n    /**\n     * Returns definitions matching the given model name.\n     */\n    getDefinitionsForModel(modelName) {\n        return this._definitions.filter(definition => definition.model == modelName);\n    }\n    /**\n     * Returns definitions matching the given view name.\n     */\n    _getMatchingViewDefinitions(viewName) {\n        return this._definitions.filter(def => def.view && testViewName(viewName, def.view));\n    }\n    /**\n     * Resolves all definition references registered for the given data schema definition.\n     *\n     * @param modelName Data schema model name.\n     */\n    *_getReferences(modelName) {\n        const inheritProperties = [\n            'inheritAllFrom',\n            'inheritTypesFrom',\n            'allowWhere',\n            'allowContentOf',\n            'allowAttributesOf'\n        ];\n        const definitions = this._definitions.filter(definition => definition.model == modelName);\n        for (const { modelSchema } of definitions) {\n            if (!modelSchema) {\n                continue;\n            }\n            for (const property of inheritProperties) {\n                for (const referenceName of toArray(modelSchema[property] || [])) {\n                    const definitions = this._definitions.filter(definition => definition.model == referenceName);\n                    for (const definition of definitions) {\n                        if (referenceName !== modelName) {\n                            yield* this._getReferences(definition.model);\n                            yield definition;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Updates schema definition with new properties.\n     *\n     * Creates new scheme if it doesn't exist.\n     * Array properties are concatenated with original values.\n     *\n     * @param definition Definition update.\n     */\n    _extendDefinition(definition) {\n        const currentDefinitions = Array.from(this._definitions.entries())\n            .filter(([, currentDefinition]) => currentDefinition.model == definition.model);\n        if (currentDefinitions.length == 0) {\n            this._definitions.push(definition);\n            return;\n        }\n        for (const [idx, currentDefinition] of currentDefinitions) {\n            this._definitions[idx] = mergeWith({}, currentDefinition, definition, (target, source) => {\n                return Array.isArray(target) ? target.concat(source) : undefined;\n            });\n        }\n    }\n}\n/**\n * Test view name against the given pattern.\n */\nfunction testViewName(pattern, viewName) {\n    if (typeof pattern === 'string') {\n        return pattern === viewName;\n    }\n    if (pattern instanceof RegExp) {\n        return pattern.test(viewName);\n    }\n    return false;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module html-support/datafilter\n */\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { Matcher, StylesMap } from 'ckeditor5/src/engine.js';\nimport { CKEditorError, priorities, isValidAttributeName } from 'ckeditor5/src/utils.js';\nimport { Widget } from 'ckeditor5/src/widget.js';\nimport { viewToModelObjectConverter, toObjectWidgetConverter, createObjectView, viewToAttributeInlineConverter, attributeToViewInlineConverter, emptyInlineModelElementToViewConverter, viewToModelBlockAttributeConverter, modelToViewBlockAttributeConverter } from './converters.js';\nimport { default as DataSchema } from './dataschema.js';\nimport { getHtmlAttributeName } from './utils.js';\nimport { isPlainObject } from 'lodash-es';\nimport '../theme/datafilter.css';\n/**\n * Allows to validate elements and element attributes registered by {@link module:html-support/dataschema~DataSchema}.\n *\n * To enable registered element in the editor, use {@link module:html-support/datafilter~DataFilter#allowElement} method:\n *\n * ```ts\n * dataFilter.allowElement( 'section' );\n * ```\n *\n * You can also allow or disallow specific element attributes:\n *\n * ```ts\n * // Allow `data-foo` attribute on `section` element.\n * dataFilter.allowAttributes( {\n * \tname: 'section',\n * \tattributes: {\n * \t\t'data-foo': true\n * \t}\n * } );\n *\n * // Disallow `color` style attribute on 'section' element.\n * dataFilter.disallowAttributes( {\n * \tname: 'section',\n * \tstyles: {\n * \t\tcolor: /[\\s\\S]+/\n * \t}\n * } );\n * ```\n *\n * To apply the information about allowed and disallowed attributes in custom integration plugin,\n * use the {@link module:html-support/datafilter~DataFilter#processViewAttributes `processViewAttributes()`} method.\n */\nexport default class DataFilter extends Plugin {\n    constructor(editor) {\n        super(editor);\n        this._dataSchema = editor.plugins.get('DataSchema');\n        this._allowedAttributes = new Matcher();\n        this._disallowedAttributes = new Matcher();\n        this._allowedElements = new Set();\n        this._disallowedElements = new Set();\n        this._dataInitialized = false;\n        this._coupledAttributes = null;\n        this._registerElementsAfterInit();\n        this._registerElementHandlers();\n        this._registerCoupledAttributesPostFixer();\n        this._registerAssociatedHtmlAttributesPostFixer();\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'DataFilter';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [DataSchema, Widget];\n    }\n    /**\n     * Load a configuration of one or many elements, where their attributes should be allowed.\n     *\n     * **Note**: Rules will be applied just before next data pipeline data init or set.\n     *\n     * @param config Configuration of elements that should have their attributes accepted in the editor.\n     */\n    loadAllowedConfig(config) {\n        for (const pattern of config) {\n            // MatcherPattern allows omitting `name` to widen the search of elements.\n            // Let's keep it consistent and match every element if a `name` has not been provided.\n            const elementName = pattern.name || /[\\s\\S]+/;\n            const rules = splitRules(pattern);\n            this.allowElement(elementName);\n            rules.forEach(pattern => this.allowAttributes(pattern));\n        }\n    }\n    /**\n     * Load a configuration of one or many elements, where their attributes should be disallowed.\n     *\n     * **Note**: Rules will be applied just before next data pipeline data init or set.\n     *\n     * @param config Configuration of elements that should have their attributes rejected from the editor.\n     */\n    loadDisallowedConfig(config) {\n        for (const pattern of config) {\n            // MatcherPattern allows omitting `name` to widen the search of elements.\n            // Let's keep it consistent and match every element if a `name` has not been provided.\n            const elementName = pattern.name || /[\\s\\S]+/;\n            const rules = splitRules(pattern);\n            // Disallow element itself if there is no other rules.\n            if (rules.length == 0) {\n                this.disallowElement(elementName);\n            }\n            else {\n                rules.forEach(pattern => this.disallowAttributes(pattern));\n            }\n        }\n    }\n    /**\n     * Load a configuration of one or many elements, where when empty should be allowed.\n     *\n     * **Note**: It modifies DataSchema so must be loaded before registering filtering rules.\n     *\n     * @param config Configuration of elements that should be preserved even if empty.\n     */\n    loadAllowedEmptyElementsConfig(config) {\n        for (const elementName of config) {\n            this.allowEmptyElement(elementName);\n        }\n    }\n    /**\n     * Allow the given element in the editor context.\n     *\n     * This method will only allow elements described by the {@link module:html-support/dataschema~DataSchema} used\n     * to create data filter.\n     *\n     * **Note**: Rules will be applied just before next data pipeline data init or set.\n     *\n     * @param viewName String or regular expression matching view name.\n     */\n    allowElement(viewName) {\n        for (const definition of this._dataSchema.getDefinitionsForView(viewName, true)) {\n            this._addAllowedElement(definition);\n            // Reset cached map to recalculate it on the next usage.\n            this._coupledAttributes = null;\n        }\n    }\n    /**\n     * Disallow the given element in the editor context.\n     *\n     * This method will only disallow elements described by the {@link module:html-support/dataschema~DataSchema} used\n     * to create data filter.\n     *\n     * @param viewName String or regular expression matching view name.\n     */\n    disallowElement(viewName) {\n        for (const definition of this._dataSchema.getDefinitionsForView(viewName, false)) {\n            this._disallowedElements.add(definition.view);\n        }\n    }\n    /**\n     * Allow the given empty element in the editor context.\n     *\n     * This method will only allow elements described by the {@link module:html-support/dataschema~DataSchema} used\n     * to create data filter.\n     *\n     * **Note**: It modifies DataSchema so must be called before registering filtering rules.\n     *\n     * @param viewName String or regular expression matching view name.\n     */\n    allowEmptyElement(viewName) {\n        for (const definition of this._dataSchema.getDefinitionsForView(viewName, true)) {\n            if (definition.isInline) {\n                this._dataSchema.extendInlineElement({ ...definition, allowEmpty: true });\n            }\n        }\n    }\n    /**\n     * Allow the given attributes for view element allowed by {@link #allowElement} method.\n     *\n     * @param config Pattern matching all attributes which should be allowed.\n     */\n    allowAttributes(config) {\n        this._allowedAttributes.add(config);\n    }\n    /**\n     * Disallow the given attributes for view element allowed by {@link #allowElement} method.\n     *\n     * @param config Pattern matching all attributes which should be disallowed.\n     */\n    disallowAttributes(config) {\n        this._disallowedAttributes.add(config);\n    }\n    /**\n     * Processes all allowed and disallowed attributes on the view element by consuming them and returning the allowed ones.\n     *\n     * This method applies the configuration set up by {@link #allowAttributes `allowAttributes()`}\n     * and {@link #disallowAttributes `disallowAttributes()`} over the given view element by consuming relevant attributes.\n     * It returns the allowed attributes that were found on the given view element for further processing by integration code.\n     *\n     * ```ts\n     * dispatcher.on( 'element:myElement', ( evt, data, conversionApi ) => {\n     * \t// Get rid of disallowed and extract all allowed attributes from a viewElement.\n     * \tconst viewAttributes = dataFilter.processViewAttributes( data.viewItem, conversionApi );\n     * \t// Do something with them, i.e. store inside a model as a dictionary.\n     * \tif ( viewAttributes ) {\n     * \t\tconversionApi.writer.setAttribute( 'htmlAttributesOfMyElement', viewAttributes, data.modelRange );\n     * \t}\n     * } );\n     * ```\n     *\n     * @see module:engine/conversion/viewconsumable~ViewConsumable#consume\n     *\n     * @returns Object with following properties:\n     * - attributes Set with matched attribute names.\n     * - styles Set with matched style names.\n     * - classes Set with matched class names.\n     */\n    processViewAttributes(viewElement, conversionApi) {\n        const { consumable } = conversionApi;\n        // Make sure that the disabled attributes are handled before the allowed attributes are called.\n        // For example, for block images the <figure> converter triggers conversion for <img> first and then for other elements, i.e. <a>.\n        matchAndConsumeAttributes(viewElement, this._disallowedAttributes, consumable);\n        return prepareGHSAttribute(viewElement, matchAndConsumeAttributes(viewElement, this._allowedAttributes, consumable));\n    }\n    /**\n     * Adds allowed element definition and fires registration event.\n     */\n    _addAllowedElement(definition) {\n        if (this._allowedElements.has(definition)) {\n            return;\n        }\n        this._allowedElements.add(definition);\n        // For attribute based integrations (table figure, document lists, etc.) register related element definitions.\n        if ('appliesToBlock' in definition && typeof definition.appliesToBlock == 'string') {\n            for (const relatedDefinition of this._dataSchema.getDefinitionsForModel(definition.appliesToBlock)) {\n                if (relatedDefinition.isBlock) {\n                    this._addAllowedElement(relatedDefinition);\n                }\n            }\n        }\n        // We need to wait for all features to be initialized before we can register\n        // element, so we can access existing features model schemas.\n        // If the data has not been initialized yet, _registerElementsAfterInit() method will take care of\n        // registering elements.\n        if (this._dataInitialized) {\n            // Defer registration to the next data pipeline data set so any disallow rules could be applied\n            // even if added after allow rule (disallowElement).\n            this.editor.data.once('set', () => {\n                this._fireRegisterEvent(definition);\n            }, {\n                // With the highest priority listener we are able to register elements right before\n                // running data conversion.\n                priority: priorities.highest + 1\n            });\n        }\n    }\n    /**\n     * Registers elements allowed by {@link module:html-support/datafilter~DataFilter#allowElement} method\n     * once {@link module:engine/controller/datacontroller~DataController editor's data controller} is initialized.\n    */\n    _registerElementsAfterInit() {\n        this.editor.data.on('init', () => {\n            this._dataInitialized = true;\n            for (const definition of this._allowedElements) {\n                this._fireRegisterEvent(definition);\n            }\n        }, {\n            // With highest priority listener we are able to register elements right before\n            // running data conversion. Also:\n            // * Make sure that priority is higher than the one used by `RealTimeCollaborationClient`,\n            // as RTC is stopping event propagation.\n            // * Make sure no other features hook into this event before GHS because otherwise the\n            // downcast conversion (for these features) could run before GHS registered its converters\n            // (https://github.com/ckeditor/ckeditor5/issues/11356).\n            priority: priorities.highest + 1\n        });\n    }\n    /**\n     * Registers default element handlers.\n     */\n    _registerElementHandlers() {\n        this.on('register', (evt, definition) => {\n            const schema = this.editor.model.schema;\n            // Object element should be only registered for new features.\n            // If the model schema is already registered, it should be handled by\n            // #_registerBlockElement() or #_registerObjectElement() attribute handlers.\n            if (definition.isObject && !schema.isRegistered(definition.model)) {\n                this._registerObjectElement(definition);\n            }\n            else if (definition.isBlock) {\n                this._registerBlockElement(definition);\n            }\n            else if (definition.isInline) {\n                this._registerInlineElement(definition);\n            }\n            else {\n                /**\n                 * The definition cannot be handled by the data filter.\n                 *\n                 * Make sure that the registered definition is correct.\n                 *\n                 * @error data-filter-invalid-definition\n                 */\n                throw new CKEditorError('data-filter-invalid-definition', null, definition);\n            }\n            evt.stop();\n        }, { priority: 'lowest' });\n    }\n    /**\n     * Registers a model post-fixer that is removing coupled GHS attributes of inline elements. Those attributes\n     * are removed if a coupled feature attribute is removed.\n     *\n     * For example, consider following HTML:\n     *\n     * ```html\n     * <a href=\"foo.html\" id=\"myId\">bar</a>\n     * ```\n     *\n     * Which would be upcasted to following text node in the model:\n     *\n     * ```html\n     * <$text linkHref=\"foo.html\" htmlA=\"{ attributes: { id: 'myId' } }\">bar</$text>\n     * ```\n     *\n     * When the user removes the link from that text (using UI), only `linkHref` attribute would be removed:\n     *\n     * ```html\n     * <$text htmlA=\"{ attributes: { id: 'myId' } }\">bar</$text>\n     * ```\n     *\n     * The `htmlA` attribute would stay in the model and would cause GHS to generate an `<a>` element.\n     * This is incorrect from UX point of view, as the user wanted to remove the whole link (not only `href`).\n     */\n    _registerCoupledAttributesPostFixer() {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        model.document.registerPostFixer(writer => {\n            const changes = model.document.differ.getChanges();\n            let changed = false;\n            const coupledAttributes = this._getCoupledAttributesMap();\n            for (const change of changes) {\n                // Handle only attribute removals.\n                if (change.type != 'attribute' || change.attributeNewValue !== null) {\n                    continue;\n                }\n                // Find a list of coupled GHS attributes.\n                const attributeKeys = coupledAttributes.get(change.attributeKey);\n                if (!attributeKeys) {\n                    continue;\n                }\n                // Remove the coupled GHS attributes on the same range as the feature attribute was removed.\n                for (const { item } of change.range.getWalker()) {\n                    for (const attributeKey of attributeKeys) {\n                        if (item.hasAttribute(attributeKey)) {\n                            writer.removeAttribute(attributeKey, item);\n                            changed = true;\n                        }\n                    }\n                }\n            }\n            return changed;\n        });\n        this.listenTo(selection, 'change:attribute', (evt, { attributeKeys }) => {\n            const removeAttributes = new Set();\n            const coupledAttributes = this._getCoupledAttributesMap();\n            for (const attributeKey of attributeKeys) {\n                // Handle only attribute removals.\n                if (selection.hasAttribute(attributeKey)) {\n                    continue;\n                }\n                // Find a list of coupled GHS attributes.\n                const coupledAttributeKeys = coupledAttributes.get(attributeKey);\n                if (!coupledAttributeKeys) {\n                    continue;\n                }\n                for (const coupledAttributeKey of coupledAttributeKeys) {\n                    if (selection.hasAttribute(coupledAttributeKey)) {\n                        removeAttributes.add(coupledAttributeKey);\n                    }\n                }\n            }\n            if (removeAttributes.size == 0) {\n                return;\n            }\n            model.change(writer => {\n                for (const attributeKey of removeAttributes) {\n                    writer.removeSelectionAttribute(attributeKey);\n                }\n            });\n        });\n    }\n    /**\n     * Removes `html*Attributes` attributes from incompatible elements.\n     *\n     * For example, consider the following HTML:\n     *\n     * ```html\n     * <heading2 htmlH2Attributes=\"...\">foobar[]</heading2>\n     * ```\n     *\n     * Pressing `enter` creates a new `paragraph` element that inherits\n     * the `htmlH2Attributes` attribute from `heading2`.\n     *\n     * ```html\n     * <heading2 htmlH2Attributes=\"...\">foobar</heading2>\n     * <paragraph htmlH2Attributes=\"...\">[]</paragraph>\n     * ```\n     *\n     * This postfixer ensures that this doesn't happen, and that elements can\n     * only have `html*Attributes` associated with them,\n     * e.g.: `htmlPAttributes` for `<p>`, `htmlDivAttributes` for `<div>`, etc.\n     *\n     * With it enabled, pressing `enter` at the end of `<heading2>` will create\n     * a new paragraph without the `htmlH2Attributes` attribute.\n     *\n     * ```html\n     * <heading2 htmlH2Attributes=\"...\">foobar</heading2>\n     * <paragraph>[]</paragraph>\n     * ```\n     */\n    _registerAssociatedHtmlAttributesPostFixer() {\n        const model = this.editor.model;\n        model.document.registerPostFixer(writer => {\n            const changes = model.document.differ.getChanges();\n            let changed = false;\n            for (const change of changes) {\n                if (change.type !== 'insert' || change.name === '$text') {\n                    continue;\n                }\n                for (const attr of change.attributes.keys()) {\n                    if (!attr.startsWith('html') || !attr.endsWith('Attributes')) {\n                        continue;\n                    }\n                    if (!model.schema.checkAttribute(change.name, attr)) {\n                        writer.removeAttribute(attr, change.position.nodeAfter);\n                        changed = true;\n                    }\n                }\n            }\n            return changed;\n        });\n    }\n    /**\n     * Collects the map of coupled attributes. The returned map is keyed by the feature attribute name\n     * and coupled GHS attribute names are stored in the value array.\n     */\n    _getCoupledAttributesMap() {\n        if (this._coupledAttributes) {\n            return this._coupledAttributes;\n        }\n        this._coupledAttributes = new Map();\n        for (const definition of this._allowedElements) {\n            if (definition.coupledAttribute && definition.model) {\n                const attributeNames = this._coupledAttributes.get(definition.coupledAttribute);\n                if (attributeNames) {\n                    attributeNames.push(definition.model);\n                }\n                else {\n                    this._coupledAttributes.set(definition.coupledAttribute, [definition.model]);\n                }\n            }\n        }\n        return this._coupledAttributes;\n    }\n    /**\n     * Fires `register` event for the given element definition.\n     */\n    _fireRegisterEvent(definition) {\n        if (definition.view && this._disallowedElements.has(definition.view)) {\n            return;\n        }\n        this.fire(definition.view ? `register:${definition.view}` : 'register', definition);\n    }\n    /**\n     * Registers object element and attribute converters for the given data schema definition.\n     */\n    _registerObjectElement(definition) {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const { view: viewName, model: modelName } = definition;\n        schema.register(modelName, definition.modelSchema);\n        /* istanbul ignore next: paranoid check -- @preserve */\n        if (!viewName) {\n            return;\n        }\n        schema.extend(definition.model, {\n            allowAttributes: [getHtmlAttributeName(viewName), 'htmlContent']\n        });\n        // Store element content in special `$rawContent` custom property to\n        // avoid editor's data filtering mechanism.\n        editor.data.registerRawContentMatcher({\n            name: viewName\n        });\n        conversion.for('upcast').elementToElement({\n            view: viewName,\n            model: viewToModelObjectConverter(definition),\n            // With a `low` priority, `paragraph` plugin auto-paragraphing mechanism is executed. Make sure\n            // this listener is called before it. If not, some elements will be transformed into a paragraph.\n            // `+ 2` is used to take priority over `_addDefaultH1Conversion` in the Heading plugin.\n            converterPriority: priorities.low + 2\n        });\n        conversion.for('upcast').add(viewToModelBlockAttributeConverter(definition, this));\n        conversion.for('editingDowncast').elementToStructure({\n            model: {\n                name: modelName,\n                attributes: [getHtmlAttributeName(viewName)]\n            },\n            view: toObjectWidgetConverter(editor, definition)\n        });\n        conversion.for('dataDowncast').elementToElement({\n            model: modelName,\n            view: (modelElement, { writer }) => {\n                return createObjectView(viewName, modelElement, writer);\n            }\n        });\n        conversion.for('dataDowncast').add(modelToViewBlockAttributeConverter(definition));\n    }\n    /**\n     * Registers block element and attribute converters for the given data schema definition.\n     */\n    _registerBlockElement(definition) {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const { view: viewName, model: modelName } = definition;\n        if (!schema.isRegistered(definition.model)) {\n            schema.register(definition.model, definition.modelSchema);\n            if (!viewName) {\n                return;\n            }\n            conversion.for('upcast').elementToElement({\n                model: modelName,\n                view: viewName,\n                // With a `low` priority, `paragraph` plugin auto-paragraphing mechanism is executed. Make sure\n                // this listener is called before it. If not, some elements will be transformed into a paragraph.\n                // `+ 2` is used to take priority over `_addDefaultH1Conversion` in the Heading plugin.\n                converterPriority: priorities.low + 2\n            });\n            conversion.for('downcast').elementToElement({\n                model: modelName,\n                view: viewName\n            });\n        }\n        if (!viewName) {\n            return;\n        }\n        schema.extend(definition.model, {\n            allowAttributes: getHtmlAttributeName(viewName)\n        });\n        conversion.for('upcast').add(viewToModelBlockAttributeConverter(definition, this));\n        conversion.for('downcast').add(modelToViewBlockAttributeConverter(definition));\n    }\n    /**\n     * Registers inline element and attribute converters for the given data schema definition.\n     *\n     * Extends `$text` model schema to allow the given definition model attribute and its properties.\n     */\n    _registerInlineElement(definition) {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const attributeKey = definition.model;\n        // This element is stored in the model as an attribute on a block element, for example DocumentLists.\n        if (definition.appliesToBlock) {\n            return;\n        }\n        schema.extend('$text', {\n            allowAttributes: attributeKey\n        });\n        if (definition.attributeProperties) {\n            schema.setAttributeProperties(attributeKey, definition.attributeProperties);\n        }\n        conversion.for('upcast').add(viewToAttributeInlineConverter(definition, this));\n        conversion.for('downcast').attributeToElement({\n            model: attributeKey,\n            view: attributeToViewInlineConverter(definition)\n        });\n        if (!definition.allowEmpty) {\n            return;\n        }\n        schema.setAttributeProperties(attributeKey, { copyFromObject: false });\n        if (!schema.isRegistered('htmlEmptyElement')) {\n            schema.register('htmlEmptyElement', {\n                inheritAllFrom: '$inlineObject'\n            });\n        }\n        editor.data.htmlProcessor.domConverter.registerInlineObjectMatcher(element => {\n            // Element must be empty and have any attribute.\n            if (element.name == definition.view &&\n                element.isEmpty &&\n                Array.from(element.getAttributeKeys()).length) {\n                return {\n                    name: true\n                };\n            }\n            return null;\n        });\n        conversion.for('editingDowncast')\n            .elementToElement({\n            model: 'htmlEmptyElement',\n            view: emptyInlineModelElementToViewConverter(definition, true)\n        });\n        conversion.for('dataDowncast')\n            .elementToElement({\n            model: 'htmlEmptyElement',\n            view: emptyInlineModelElementToViewConverter(definition)\n        });\n    }\n}\n/**\n * Matches and consumes matched attributes.\n *\n * @returns Object with following properties:\n * - attributes Array with matched attribute names.\n * - classes Array with matched class names.\n * - styles Array with matched style names.\n */\nfunction matchAndConsumeAttributes(viewElement, matcher, consumable) {\n    const matches = matcher.matchAll(viewElement) || [];\n    const stylesProcessor = viewElement.document.stylesProcessor;\n    return matches.reduce((result, { match }) => {\n        // Verify and consume styles.\n        for (const style of match.styles || []) {\n            // Check longer forms of the same style as those could be matched\n            // but not present in the element directly.\n            // Consider only longhand (or longer than current notation) so that\n            // we do not include all sides of the box if only one side is allowed.\n            const sortedRelatedStyles = stylesProcessor.getRelatedStyles(style)\n                .filter(relatedStyle => relatedStyle.split('-').length > style.split('-').length)\n                .sort((a, b) => b.split('-').length - a.split('-').length);\n            for (const relatedStyle of sortedRelatedStyles) {\n                if (consumable.consume(viewElement, { styles: [relatedStyle] })) {\n                    result.styles.push(relatedStyle);\n                }\n            }\n            // Verify and consume style as specified in the matcher.\n            if (consumable.consume(viewElement, { styles: [style] })) {\n                result.styles.push(style);\n            }\n        }\n        // Verify and consume class names.\n        for (const className of match.classes || []) {\n            if (consumable.consume(viewElement, { classes: [className] })) {\n                result.classes.push(className);\n            }\n        }\n        // Verify and consume other attributes.\n        for (const attributeName of match.attributes || []) {\n            if (consumable.consume(viewElement, { attributes: [attributeName] })) {\n                result.attributes.push(attributeName);\n            }\n        }\n        return result;\n    }, {\n        attributes: [],\n        classes: [],\n        styles: []\n    });\n}\n/**\n * Prepares the GHS attribute value as an object with element attributes' values.\n */\nfunction prepareGHSAttribute(viewElement, { attributes, classes, styles }) {\n    if (!attributes.length && !classes.length && !styles.length) {\n        return null;\n    }\n    return {\n        ...(attributes.length && {\n            attributes: getAttributes(viewElement, attributes)\n        }),\n        ...(styles.length && {\n            styles: getReducedStyles(viewElement, styles)\n        }),\n        ...(classes.length && {\n            classes\n        })\n    };\n}\n/**\n * Returns attributes as an object with names and values.\n */\nfunction getAttributes(viewElement, attributes) {\n    const attributesObject = {};\n    for (const key of attributes) {\n        const value = viewElement.getAttribute(key);\n        if (value !== undefined && isValidAttributeName(key)) {\n            attributesObject[key] = value;\n        }\n    }\n    return attributesObject;\n}\n/**\n * Returns styles as an object reduced to shorthand notation without redundant entries.\n */\nfunction getReducedStyles(viewElement, styles) {\n    // Use StyleMap to reduce style value to the minimal form (without shorthand and long-hand notation and duplication).\n    const stylesMap = new StylesMap(viewElement.document.stylesProcessor);\n    for (const key of styles) {\n        const styleValue = viewElement.getStyle(key);\n        if (styleValue !== undefined) {\n            stylesMap.set(key, styleValue);\n        }\n    }\n    return Object.fromEntries(stylesMap.getStylesEntries());\n}\n/**\n * Matcher by default has to match **all** patterns to count it as an actual match. Splitting the pattern\n * into separate patterns means that any matched pattern will be count as a match.\n *\n * @param pattern Pattern to split.\n * @param attributeName Name of the attribute to split (e.g. 'attributes', 'classes', 'styles').\n */\nfunction splitPattern(pattern, attributeName) {\n    const { name } = pattern;\n    const attributeValue = pattern[attributeName];\n    if (isPlainObject(attributeValue)) {\n        return Object.entries(attributeValue)\n            .map(([key, value]) => ({\n            name,\n            [attributeName]: {\n                [key]: value\n            }\n        }));\n    }\n    if (Array.isArray(attributeValue)) {\n        return attributeValue\n            .map(value => ({\n            name,\n            [attributeName]: [value]\n        }));\n    }\n    return [pattern];\n}\n/**\n * Rules are matched in conjunction (AND operation), but we want to have a match if *any* of the rules is matched (OR operation).\n * By splitting the rules we force the latter effect.\n */\nfunction splitRules(rules) {\n    const { name, attributes, classes, styles } = rules;\n    const splitRules = [];\n    if (attributes) {\n        splitRules.push(...splitPattern({ name, attributes }, 'attributes'));\n    }\n    if (classes) {\n        splitRules.push(...splitPattern({ name, classes }, 'classes'));\n    }\n    if (styles) {\n        splitRules.push(...splitPattern({ name, styles }, 'styles'));\n    }\n    return splitRules;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { updateViewAttributes } from '../utils.js';\nimport DataFilter from '../datafilter.js';\n/**\n * Provides the General HTML Support integration with {@link module:code-block/codeblock~CodeBlock Code Block} feature.\n */\nexport default class CodeBlockElementSupport extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [DataFilter];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'CodeBlockElementSupport';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        if (!this.editor.plugins.has('CodeBlockEditing')) {\n            return;\n        }\n        const dataFilter = this.editor.plugins.get(DataFilter);\n        dataFilter.on('register:pre', (evt, definition) => {\n            if (definition.model !== 'codeBlock') {\n                return;\n            }\n            const editor = this.editor;\n            const schema = editor.model.schema;\n            const conversion = editor.conversion;\n            // Extend codeBlock to allow attributes required by attribute filtration.\n            schema.extend('codeBlock', {\n                allowAttributes: ['htmlPreAttributes', 'htmlContentAttributes']\n            });\n            conversion.for('upcast').add(viewToModelCodeBlockAttributeConverter(dataFilter));\n            conversion.for('downcast').add(modelToViewCodeBlockAttributeConverter());\n            evt.stop();\n        });\n    }\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link module:code-block/codeblock~CodeBlock Code Block}\n * feature model element.\n *\n * Attributes are preserved as a value of `html*Attributes` model attribute.\n * @param dataFilter\n * @returns Returns a conversion callback.\n */\nfunction viewToModelCodeBlockAttributeConverter(dataFilter) {\n    return (dispatcher) => {\n        dispatcher.on('element:code', (evt, data, conversionApi) => {\n            const viewCodeElement = data.viewItem;\n            const viewPreElement = viewCodeElement.parent;\n            if (!viewPreElement || !viewPreElement.is('element', 'pre')) {\n                return;\n            }\n            preserveElementAttributes(viewPreElement, 'htmlPreAttributes');\n            preserveElementAttributes(viewCodeElement, 'htmlContentAttributes');\n            function preserveElementAttributes(viewElement, attributeName) {\n                const viewAttributes = dataFilter.processViewAttributes(viewElement, conversionApi);\n                if (viewAttributes) {\n                    conversionApi.writer.setAttribute(attributeName, viewAttributes, data.modelRange);\n                }\n            }\n        }, { priority: 'low' });\n    };\n}\n/**\n * Model-to-view conversion helper applying attributes from {@link module:code-block/codeblock~CodeBlock Code Block}\n * feature model element.\n * @returns Returns a conversion callback.\n */\nfunction modelToViewCodeBlockAttributeConverter() {\n    return (dispatcher) => {\n        dispatcher.on('attribute:htmlPreAttributes:codeBlock', (evt, data, conversionApi) => {\n            if (!conversionApi.consumable.consume(data.item, evt.name)) {\n                return;\n            }\n            const { attributeOldValue, attributeNewValue } = data;\n            const viewCodeElement = conversionApi.mapper.toViewElement(data.item);\n            const viewPreElement = viewCodeElement.parent;\n            updateViewAttributes(conversionApi.writer, attributeOldValue, attributeNewValue, viewPreElement);\n        });\n        dispatcher.on('attribute:htmlContentAttributes:codeBlock', (evt, data, conversionApi) => {\n            if (!conversionApi.consumable.consume(data.item, evt.name)) {\n                return;\n            }\n            const { attributeOldValue, attributeNewValue } = data;\n            const viewCodeElement = conversionApi.mapper.toViewElement(data.item);\n            updateViewAttributes(conversionApi.writer, attributeOldValue, attributeNewValue, viewCodeElement);\n        });\n    };\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { priorities } from 'ckeditor5/src/utils.js';\nimport { modelToViewBlockAttributeConverter, viewToModelBlockAttributeConverter } from '../converters.js';\nimport DataFilter from '../datafilter.js';\nimport { getHtmlAttributeName } from '../utils.js';\n/**\n * Provides the General HTML Support integration for elements which can behave like sectioning element (e.g. article) or\n * element accepting only inline content (e.g. paragraph).\n *\n * The distinction between this two content models is important for choosing correct schema model and proper content conversion.\n * As an example, it ensures that:\n *\n * * children elements paragraphing is enabled for sectioning elements only,\n * * element and its content can be correctly handled by editing view (splitting and merging elements),\n * * model element HTML is semantically correct and easier to work with.\n *\n * If element contains any block element, it will be treated as a sectioning element and registered using\n * {@link module:html-support/dataschema~DataSchemaDefinition#model} and\n * {@link module:html-support/dataschema~DataSchemaDefinition#modelSchema} in editor schema.\n * Otherwise, it will be registered under {@link module:html-support/dataschema~DataSchemaBlockElementDefinition#paragraphLikeModel} model\n * name with model schema accepting only inline content (inheriting from `$block`).\n */\nexport default class DualContentModelElementSupport extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [DataFilter];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'DualContentModelElementSupport';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const dataFilter = this.editor.plugins.get(DataFilter);\n        dataFilter.on('register', (evt, definition) => {\n            const blockDefinition = definition;\n            const editor = this.editor;\n            const schema = editor.model.schema;\n            const conversion = editor.conversion;\n            if (!blockDefinition.paragraphLikeModel) {\n                return;\n            }\n            // Can only apply to newly registered features.\n            if (schema.isRegistered(blockDefinition.model) || schema.isRegistered(blockDefinition.paragraphLikeModel)) {\n                return;\n            }\n            const paragraphLikeModelDefinition = {\n                model: blockDefinition.paragraphLikeModel,\n                view: blockDefinition.view\n            };\n            schema.register(blockDefinition.model, blockDefinition.modelSchema);\n            schema.register(paragraphLikeModelDefinition.model, {\n                inheritAllFrom: '$block'\n            });\n            conversion.for('upcast').elementToElement({\n                view: blockDefinition.view,\n                model: (viewElement, { writer }) => {\n                    if (this._hasBlockContent(viewElement)) {\n                        return writer.createElement(blockDefinition.model);\n                    }\n                    return writer.createElement(paragraphLikeModelDefinition.model);\n                },\n                // With a `low` priority, `paragraph` plugin auto-paragraphing mechanism is executed. Make sure\n                // this listener is called before it. If not, some elements will be transformed into a paragraph.\n                converterPriority: priorities.low + 0.5\n            });\n            conversion.for('downcast').elementToElement({\n                view: blockDefinition.view,\n                model: blockDefinition.model\n            });\n            this._addAttributeConversion(blockDefinition);\n            conversion.for('downcast').elementToElement({\n                view: paragraphLikeModelDefinition.view,\n                model: paragraphLikeModelDefinition.model\n            });\n            this._addAttributeConversion(paragraphLikeModelDefinition);\n            evt.stop();\n        });\n    }\n    /**\n     * Checks whether the given view element includes any other block element.\n     */\n    _hasBlockContent(viewElement) {\n        const view = this.editor.editing.view;\n        const blockElements = view.domConverter.blockElements;\n        // Traversing the viewElement subtree looking for block elements.\n        // Especially for the cases like <div><a href=\"#\"><p>foo</p></a></div>.\n        // https://github.com/ckeditor/ckeditor5/issues/11513\n        for (const viewItem of view.createRangeIn(viewElement).getItems()) {\n            if (viewItem.is('element') && blockElements.includes(viewItem.name)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Adds attribute filtering conversion for the given data schema.\n     */\n    _addAttributeConversion(definition) {\n        const editor = this.editor;\n        const conversion = editor.conversion;\n        const dataFilter = editor.plugins.get(DataFilter);\n        editor.model.schema.extend(definition.model, {\n            allowAttributes: getHtmlAttributeName(definition.view)\n        });\n        conversion.for('upcast').add(viewToModelBlockAttributeConverter(definition, dataFilter));\n        conversion.for('downcast').add(modelToViewBlockAttributeConverter(definition));\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module html-support/integrations/heading\n */\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { Enter } from 'ckeditor5/src/enter.js';\nimport DataSchema from '../dataschema.js';\n/**\n * Provides the General HTML Support integration with {@link module:heading/heading~Heading Heading} feature.\n */\nexport default class HeadingElementSupport extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [DataSchema, Enter];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'HeadingElementSupport';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        if (!editor.plugins.has('HeadingEditing')) {\n            return;\n        }\n        const options = editor.config.get('heading.options');\n        this.registerHeadingElements(editor, options);\n    }\n    /**\n     * Registers all elements supported by HeadingEditing to enable custom attributes for those elements.\n     */\n    registerHeadingElements(editor, options) {\n        const dataSchema = editor.plugins.get(DataSchema);\n        const headerModels = [];\n        for (const option of options) {\n            if ('model' in option && 'view' in option) {\n                dataSchema.registerBlockElement({\n                    view: option.view,\n                    model: option.model\n                });\n                headerModels.push(option.model);\n            }\n        }\n        dataSchema.extendBlockElement({\n            model: 'htmlHgroup',\n            modelSchema: {\n                allowChildren: headerModels\n            }\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module html-support/integrations/integrationutils\n */\n/**\n * Returns the first view element descendant matching the given view name.\n * Includes view element itself.\n *\n * @internal\n */\nexport function getDescendantElement(writer, containerElement, elementName) {\n    const range = writer.createRangeOn(containerElement);\n    for (const { item } of range.getWalker()) {\n        if (item.is('element', elementName)) {\n            return item;\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module html-support/integrations/image\n */\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport DataFilter from '../datafilter.js';\nimport { setViewAttributes, updateViewAttributes } from '../utils.js';\nimport { getDescendantElement } from './integrationutils.js';\n/**\n * Provides the General HTML Support integration with the {@link module:image/image~Image Image} feature.\n */\nexport default class ImageElementSupport extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [DataFilter];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'ImageElementSupport';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        // At least one image plugin should be loaded for the integration to work properly.\n        if (!editor.plugins.has('ImageInlineEditing') && !editor.plugins.has('ImageBlockEditing')) {\n            return;\n        }\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const dataFilter = editor.plugins.get(DataFilter);\n        dataFilter.on('register:figure', () => {\n            conversion.for('upcast').add(viewToModelFigureAttributeConverter(dataFilter));\n        });\n        dataFilter.on('register:img', (evt, definition) => {\n            if (definition.model !== 'imageBlock' && definition.model !== 'imageInline') {\n                return;\n            }\n            if (schema.isRegistered('imageBlock')) {\n                schema.extend('imageBlock', {\n                    allowAttributes: [\n                        'htmlImgAttributes',\n                        // Figure and Link don't have model counterpart.\n                        // We will preserve attributes on image model element using these attribute keys.\n                        'htmlFigureAttributes',\n                        'htmlLinkAttributes'\n                    ]\n                });\n            }\n            if (schema.isRegistered('imageInline')) {\n                schema.extend('imageInline', {\n                    allowAttributes: [\n                        // `htmlA` is needed for standard GHS link integration.\n                        'htmlA',\n                        'htmlImgAttributes'\n                    ]\n                });\n            }\n            conversion.for('upcast').add(viewToModelImageAttributeConverter(dataFilter));\n            conversion.for('downcast').add(modelToViewImageAttributeConverter());\n            if (editor.plugins.has('LinkImage')) {\n                conversion.for('upcast').add(viewToModelLinkImageAttributeConverter(dataFilter, editor));\n            }\n            evt.stop();\n        });\n    }\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on the {@link module:image/image~Image Image}\n * feature model element.\n *\n * @returns Returns a conversion callback.\n */\nfunction viewToModelImageAttributeConverter(dataFilter) {\n    return (dispatcher) => {\n        dispatcher.on('element:img', (evt, data, conversionApi) => {\n            if (!data.modelRange) {\n                return;\n            }\n            const viewImageElement = data.viewItem;\n            const viewAttributes = dataFilter.processViewAttributes(viewImageElement, conversionApi);\n            if (viewAttributes) {\n                conversionApi.writer.setAttribute('htmlImgAttributes', viewAttributes, data.modelRange);\n            }\n        }, { priority: 'low' });\n    };\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link module:image/image~Image Image}\n * feature model element from link view element.\n *\n * @returns Returns a conversion callback.\n */\nfunction viewToModelLinkImageAttributeConverter(dataFilter, editor) {\n    const imageUtils = editor.plugins.get('ImageUtils');\n    return (dispatcher) => {\n        dispatcher.on('element:a', (evt, data, conversionApi) => {\n            const viewLink = data.viewItem;\n            const viewImage = imageUtils.findViewImgElement(viewLink);\n            if (!viewImage) {\n                return;\n            }\n            const modelImage = data.modelCursor.parent;\n            if (!modelImage.is('element', 'imageBlock')) {\n                return;\n            }\n            const viewAttributes = dataFilter.processViewAttributes(viewLink, conversionApi);\n            if (viewAttributes) {\n                conversionApi.writer.setAttribute('htmlLinkAttributes', viewAttributes, modelImage);\n            }\n        }, { priority: 'low' });\n    };\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link module:image/image~Image Image}\n * feature model element from figure view element.\n *\n * @returns Returns a conversion callback.\n */\nfunction viewToModelFigureAttributeConverter(dataFilter) {\n    return (dispatcher) => {\n        dispatcher.on('element:figure', (evt, data, conversionApi) => {\n            const viewFigureElement = data.viewItem;\n            if (!data.modelRange || !viewFigureElement.hasClass('image')) {\n                return;\n            }\n            const viewAttributes = dataFilter.processViewAttributes(viewFigureElement, conversionApi);\n            if (viewAttributes) {\n                conversionApi.writer.setAttribute('htmlFigureAttributes', viewAttributes, data.modelRange);\n            }\n        }, { priority: 'low' });\n    };\n}\n/**\n * A model-to-view conversion helper applying attributes from the {@link module:image/image~Image Image}\n * feature.\n * @returns Returns a conversion callback.\n */\nfunction modelToViewImageAttributeConverter() {\n    return (dispatcher) => {\n        addInlineAttributeConversion('htmlImgAttributes');\n        addBlockAttributeConversion('img', 'htmlImgAttributes');\n        addBlockAttributeConversion('figure', 'htmlFigureAttributes');\n        addBlockAttributeConversion('a', 'htmlLinkAttributes');\n        function addInlineAttributeConversion(attributeName) {\n            dispatcher.on(`attribute:${attributeName}:imageInline`, (evt, data, conversionApi) => {\n                if (!conversionApi.consumable.consume(data.item, evt.name)) {\n                    return;\n                }\n                const { attributeOldValue, attributeNewValue } = data;\n                const viewElement = conversionApi.mapper.toViewElement(data.item);\n                updateViewAttributes(conversionApi.writer, attributeOldValue, attributeNewValue, viewElement);\n            }, { priority: 'low' });\n        }\n        function addBlockAttributeConversion(elementName, attributeName) {\n            dispatcher.on(`attribute:${attributeName}:imageBlock`, (evt, data, conversionApi) => {\n                if (!conversionApi.consumable.test(data.item, evt.name)) {\n                    return;\n                }\n                const { attributeOldValue, attributeNewValue } = data;\n                const containerElement = conversionApi.mapper.toViewElement(data.item);\n                const viewElement = getDescendantElement(conversionApi.writer, containerElement, elementName);\n                if (viewElement) {\n                    updateViewAttributes(conversionApi.writer, attributeOldValue, attributeNewValue, viewElement);\n                    conversionApi.consumable.consume(data.item, evt.name);\n                }\n            }, { priority: 'low' });\n            if (elementName === 'a') {\n                // To have a link element in the view, we need to attach a converter to the `linkHref` attribute as well.\n                dispatcher.on('attribute:linkHref:imageBlock', (evt, data, conversionApi) => {\n                    if (!conversionApi.consumable.consume(data.item, 'attribute:htmlLinkAttributes:imageBlock')) {\n                        return;\n                    }\n                    const containerElement = conversionApi.mapper.toViewElement(data.item);\n                    const viewElement = getDescendantElement(conversionApi.writer, containerElement, 'a');\n                    setViewAttributes(conversionApi.writer, data.item.getAttribute('htmlLinkAttributes'), viewElement);\n                }, { priority: 'low' });\n            }\n        }\n    };\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module html-support/integrations/mediaembed\n */\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport DataFilter from '../datafilter.js';\nimport DataSchema from '../dataschema.js';\nimport { updateViewAttributes, getHtmlAttributeName } from '../utils.js';\nimport { getDescendantElement } from './integrationutils.js';\n/**\n * Provides the General HTML Support integration with {@link module:media-embed/mediaembed~MediaEmbed Media Embed} feature.\n */\nexport default class MediaEmbedElementSupport extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [DataFilter];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'MediaEmbedElementSupport';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        // Stop here if MediaEmbed plugin is not provided or the integrator wants to output markup with previews as\n        // we do not support filtering previews.\n        if (!editor.plugins.has('MediaEmbed') || editor.config.get('mediaEmbed.previewsInData')) {\n            return;\n        }\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const dataFilter = this.editor.plugins.get(DataFilter);\n        const dataSchema = this.editor.plugins.get(DataSchema);\n        const mediaElementName = editor.config.get('mediaEmbed.elementName');\n        // Overwrite GHS schema definition for a given elementName.\n        dataSchema.registerBlockElement({\n            model: 'media',\n            view: mediaElementName\n        });\n        dataFilter.on('register:figure', () => {\n            conversion.for('upcast').add(viewToModelFigureAttributesConverter(dataFilter));\n        });\n        dataFilter.on(`register:${mediaElementName}`, (evt, definition) => {\n            if (definition.model !== 'media') {\n                return;\n            }\n            schema.extend('media', {\n                allowAttributes: [\n                    getHtmlAttributeName(mediaElementName),\n                    'htmlFigureAttributes'\n                ]\n            });\n            conversion.for('upcast').add(viewToModelMediaAttributesConverter(dataFilter, mediaElementName));\n            conversion.for('dataDowncast').add(modelToViewMediaAttributeConverter(mediaElementName));\n            evt.stop();\n        });\n    }\n}\nfunction viewToModelMediaAttributesConverter(dataFilter, mediaElementName) {\n    const upcastMedia = (evt, data, conversionApi) => {\n        const viewMediaElement = data.viewItem;\n        preserveElementAttributes(viewMediaElement, getHtmlAttributeName(mediaElementName));\n        function preserveElementAttributes(viewElement, attributeName) {\n            const viewAttributes = dataFilter.processViewAttributes(viewElement, conversionApi);\n            if (viewAttributes) {\n                conversionApi.writer.setAttribute(attributeName, viewAttributes, data.modelRange);\n            }\n        }\n    };\n    return (dispatcher) => {\n        dispatcher.on(`element:${mediaElementName}`, upcastMedia, { priority: 'low' });\n    };\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link module:media-embed/mediaembed~MediaEmbed MediaEmbed}\n * feature model element from figure view element.\n *\n * @returns Returns a conversion callback.\n */\nfunction viewToModelFigureAttributesConverter(dataFilter) {\n    return (dispatcher) => {\n        dispatcher.on('element:figure', (evt, data, conversionApi) => {\n            const viewFigureElement = data.viewItem;\n            if (!data.modelRange || !viewFigureElement.hasClass('media')) {\n                return;\n            }\n            const viewAttributes = dataFilter.processViewAttributes(viewFigureElement, conversionApi);\n            if (viewAttributes) {\n                conversionApi.writer.setAttribute('htmlFigureAttributes', viewAttributes, data.modelRange);\n            }\n        }, { priority: 'low' });\n    };\n}\nfunction modelToViewMediaAttributeConverter(mediaElementName) {\n    return (dispatcher) => {\n        addAttributeConversionDispatcherHandler(mediaElementName, getHtmlAttributeName(mediaElementName));\n        addAttributeConversionDispatcherHandler('figure', 'htmlFigureAttributes');\n        function addAttributeConversionDispatcherHandler(elementName, attributeName) {\n            dispatcher.on(`attribute:${attributeName}:media`, (evt, data, conversionApi) => {\n                if (!conversionApi.consumable.consume(data.item, evt.name)) {\n                    return;\n                }\n                const { attributeOldValue, attributeNewValue } = data;\n                const containerElement = conversionApi.mapper.toViewElement(data.item);\n                const viewElement = getDescendantElement(conversionApi.writer, containerElement, elementName);\n                updateViewAttributes(conversionApi.writer, attributeOldValue, attributeNewValue, viewElement);\n            });\n        }\n    };\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module html-support/integrations/script\n */\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { createObjectView, modelToViewBlockAttributeConverter, viewToModelBlockAttributeConverter, viewToModelObjectConverter } from '../converters.js';\nimport DataFilter from '../datafilter.js';\n/**\n * Provides the General HTML Support for `script` elements.\n */\nexport default class ScriptElementSupport extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [DataFilter];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'ScriptElementSupport';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const dataFilter = this.editor.plugins.get(DataFilter);\n        dataFilter.on('register:script', (evt, definition) => {\n            const editor = this.editor;\n            const schema = editor.model.schema;\n            const conversion = editor.conversion;\n            schema.register('htmlScript', definition.modelSchema);\n            schema.extend('htmlScript', {\n                allowAttributes: ['htmlScriptAttributes', 'htmlContent'],\n                isContent: true\n            });\n            editor.data.registerRawContentMatcher({\n                name: 'script'\n            });\n            conversion.for('upcast').elementToElement({\n                view: 'script',\n                model: viewToModelObjectConverter(definition)\n            });\n            conversion.for('upcast').add(viewToModelBlockAttributeConverter(definition, dataFilter));\n            conversion.for('downcast').elementToElement({\n                model: 'htmlScript',\n                view: (modelElement, { writer }) => {\n                    return createObjectView('script', modelElement, writer);\n                }\n            });\n            conversion.for('downcast').add(modelToViewBlockAttributeConverter(definition));\n            evt.stop();\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { updateViewAttributes } from '../utils.js';\nimport DataFilter from '../datafilter.js';\nimport { getDescendantElement } from './integrationutils.js';\n/**\n * Provides the General HTML Support integration with {@link module:table/table~Table Table} feature.\n */\nexport default class TableElementSupport extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [DataFilter];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'TableElementSupport';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        if (!editor.plugins.has('TableEditing')) {\n            return;\n        }\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const dataFilter = editor.plugins.get(DataFilter);\n        const tableUtils = editor.plugins.get('TableUtils');\n        dataFilter.on('register:figure', () => {\n            conversion.for('upcast').add(viewToModelFigureAttributeConverter(dataFilter));\n        });\n        dataFilter.on('register:table', (evt, definition) => {\n            if (definition.model !== 'table') {\n                return;\n            }\n            schema.extend('table', {\n                allowAttributes: [\n                    'htmlTableAttributes',\n                    // Figure, thead and tbody elements don't have model counterparts.\n                    // We will be preserving attributes on table element using these attribute keys.\n                    'htmlFigureAttributes', 'htmlTheadAttributes', 'htmlTbodyAttributes'\n                ]\n            });\n            conversion.for('upcast').add(viewToModelTableAttributeConverter(dataFilter));\n            conversion.for('downcast').add(modelToViewTableAttributeConverter());\n            editor.model.document.registerPostFixer(createHeadingRowsPostFixer(editor.model, tableUtils));\n            evt.stop();\n        });\n    }\n}\n/**\n * Creates a model post-fixer for thead and tbody GHS related attributes.\n */\nfunction createHeadingRowsPostFixer(model, tableUtils) {\n    return writer => {\n        const changes = model.document.differ.getChanges();\n        let wasFixed = false;\n        for (const change of changes) {\n            if (change.type != 'attribute' || change.attributeKey != 'headingRows') {\n                continue;\n            }\n            const table = change.range.start.nodeAfter;\n            const hasTHeadAttributes = table.getAttribute('htmlTheadAttributes');\n            const hasTBodyAttributes = table.getAttribute('htmlTbodyAttributes');\n            if (hasTHeadAttributes && !change.attributeNewValue) {\n                writer.removeAttribute('htmlTheadAttributes', table);\n                wasFixed = true;\n            }\n            else if (hasTBodyAttributes && change.attributeNewValue == tableUtils.getRows(table)) {\n                writer.removeAttribute('htmlTbodyAttributes', table);\n                wasFixed = true;\n            }\n        }\n        return wasFixed;\n    };\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link module:table/table~Table Table}\n * feature model element.\n *\n * @returns Returns a conversion callback.\n */\nfunction viewToModelTableAttributeConverter(dataFilter) {\n    return (dispatcher) => {\n        dispatcher.on('element:table', (evt, data, conversionApi) => {\n            if (!data.modelRange) {\n                return;\n            }\n            const viewTableElement = data.viewItem;\n            preserveElementAttributes(viewTableElement, 'htmlTableAttributes');\n            for (const childNode of viewTableElement.getChildren()) {\n                if (childNode.is('element', 'thead')) {\n                    preserveElementAttributes(childNode, 'htmlTheadAttributes');\n                }\n                if (childNode.is('element', 'tbody')) {\n                    preserveElementAttributes(childNode, 'htmlTbodyAttributes');\n                }\n            }\n            function preserveElementAttributes(viewElement, attributeName) {\n                const viewAttributes = dataFilter.processViewAttributes(viewElement, conversionApi);\n                if (viewAttributes) {\n                    conversionApi.writer.setAttribute(attributeName, viewAttributes, data.modelRange);\n                }\n            }\n        }, { priority: 'low' });\n    };\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link module:table/table~Table Table}\n * feature model element from figure view element.\n *\n * @returns Returns a conversion callback.\n */\nfunction viewToModelFigureAttributeConverter(dataFilter) {\n    return (dispatcher) => {\n        dispatcher.on('element:figure', (evt, data, conversionApi) => {\n            const viewFigureElement = data.viewItem;\n            if (!data.modelRange || !viewFigureElement.hasClass('table')) {\n                return;\n            }\n            const viewAttributes = dataFilter.processViewAttributes(viewFigureElement, conversionApi);\n            if (viewAttributes) {\n                conversionApi.writer.setAttribute('htmlFigureAttributes', viewAttributes, data.modelRange);\n            }\n        }, { priority: 'low' });\n    };\n}\n/**\n * Model-to-view conversion helper applying attributes from {@link module:table/table~Table Table}\n * feature.\n *\n * @returns Returns a conversion callback.\n */\nfunction modelToViewTableAttributeConverter() {\n    return (dispatcher) => {\n        addAttributeConversionDispatcherHandler('table', 'htmlTableAttributes');\n        addAttributeConversionDispatcherHandler('figure', 'htmlFigureAttributes');\n        addAttributeConversionDispatcherHandler('thead', 'htmlTheadAttributes');\n        addAttributeConversionDispatcherHandler('tbody', 'htmlTbodyAttributes');\n        function addAttributeConversionDispatcherHandler(elementName, attributeName) {\n            dispatcher.on(`attribute:${attributeName}:table`, (evt, data, conversionApi) => {\n                if (!conversionApi.consumable.test(data.item, evt.name)) {\n                    return;\n                }\n                const containerElement = conversionApi.mapper.toViewElement(data.item);\n                const viewElement = getDescendantElement(conversionApi.writer, containerElement, elementName);\n                if (!viewElement) {\n                    return;\n                }\n                conversionApi.consumable.consume(data.item, evt.name);\n                updateViewAttributes(conversionApi.writer, data.attributeOldValue, data.attributeNewValue, viewElement);\n            });\n        }\n    };\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module html-support/integrations/style\n */\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { createObjectView, modelToViewBlockAttributeConverter, viewToModelBlockAttributeConverter, viewToModelObjectConverter } from '../converters.js';\nimport DataFilter from '../datafilter.js';\n/**\n * Provides the General HTML Support for `style` elements.\n */\nexport default class StyleElementSupport extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [DataFilter];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'StyleElementSupport';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const dataFilter = this.editor.plugins.get(DataFilter);\n        dataFilter.on('register:style', (evt, definition) => {\n            const editor = this.editor;\n            const schema = editor.model.schema;\n            const conversion = editor.conversion;\n            schema.register('htmlStyle', definition.modelSchema);\n            schema.extend('htmlStyle', {\n                allowAttributes: ['htmlStyleAttributes', 'htmlContent'],\n                isContent: true\n            });\n            editor.data.registerRawContentMatcher({\n                name: 'style'\n            });\n            conversion.for('upcast').elementToElement({\n                view: 'style',\n                model: viewToModelObjectConverter(definition)\n            });\n            conversion.for('upcast').add(viewToModelBlockAttributeConverter(definition, dataFilter));\n            conversion.for('downcast').elementToElement({\n                model: 'htmlStyle',\n                view: (modelElement, { writer }) => {\n                    return createObjectView('style', modelElement, writer);\n                }\n            });\n            conversion.for('downcast').add(modelToViewBlockAttributeConverter(definition));\n            evt.stop();\n        });\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module html-support/integrations/list\n */\nimport { isEqual } from 'lodash-es';\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { getHtmlAttributeName, setViewAttributes } from '../utils.js';\nimport DataFilter from '../datafilter.js';\n/**\n * Provides the General HTML Support integration with the {@link module:list/list~List List} feature.\n */\nexport default class ListElementSupport extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [DataFilter];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'ListElementSupport';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        if (!editor.plugins.has('ListEditing')) {\n            return;\n        }\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const dataFilter = editor.plugins.get(DataFilter);\n        const listEditing = editor.plugins.get('ListEditing');\n        const viewElements = ['ul', 'ol', 'li'];\n        // Register downcast strategy.\n        // Note that this must be done before document list editing registers conversion in afterInit.\n        listEditing.registerDowncastStrategy({\n            scope: 'item',\n            attributeName: 'htmlLiAttributes',\n            setAttributeOnDowncast: setViewAttributes\n        });\n        listEditing.registerDowncastStrategy({\n            scope: 'list',\n            attributeName: 'htmlUlAttributes',\n            setAttributeOnDowncast: setViewAttributes\n        });\n        listEditing.registerDowncastStrategy({\n            scope: 'list',\n            attributeName: 'htmlOlAttributes',\n            setAttributeOnDowncast: setViewAttributes\n        });\n        dataFilter.on('register', (evt, definition) => {\n            if (!viewElements.includes(definition.view)) {\n                return;\n            }\n            evt.stop();\n            // Do not register same converters twice.\n            if (schema.checkAttribute('$block', 'htmlLiAttributes')) {\n                return;\n            }\n            const allowAttributes = viewElements.map(element => getHtmlAttributeName(element));\n            schema.extend('$listItem', { allowAttributes });\n            conversion.for('upcast').add(dispatcher => {\n                dispatcher.on('element:ul', viewToModelListAttributeConverter('htmlUlAttributes', dataFilter), { priority: 'low' });\n                dispatcher.on('element:ol', viewToModelListAttributeConverter('htmlOlAttributes', dataFilter), { priority: 'low' });\n                dispatcher.on('element:li', viewToModelListAttributeConverter('htmlLiAttributes', dataFilter), { priority: 'low' });\n            });\n        });\n        // Make sure that all items in a single list (items at the same level & listType) have the same properties.\n        listEditing.on('postFixer', (evt, { listNodes, writer }) => {\n            for (const { node, previousNodeInList } of listNodes) {\n                // This is a first item of a nested list.\n                if (!previousNodeInList) {\n                    continue;\n                }\n                if (previousNodeInList.getAttribute('listType') == node.getAttribute('listType')) {\n                    const attribute = getAttributeFromListType(previousNodeInList.getAttribute('listType'));\n                    const value = previousNodeInList.getAttribute(attribute);\n                    if (!isEqual(node.getAttribute(attribute), value) &&\n                        writer.model.schema.checkAttribute(node, attribute)) {\n                        writer.setAttribute(attribute, value, node);\n                        evt.return = true;\n                    }\n                }\n                if (previousNodeInList.getAttribute('listItemId') == node.getAttribute('listItemId')) {\n                    const value = previousNodeInList.getAttribute('htmlLiAttributes');\n                    if (!isEqual(node.getAttribute('htmlLiAttributes'), value) &&\n                        writer.model.schema.checkAttribute(node, 'htmlLiAttributes')) {\n                        writer.setAttribute('htmlLiAttributes', value, node);\n                        evt.return = true;\n                    }\n                }\n            }\n        });\n        // Remove `ol` attributes from `ul` elements and vice versa.\n        listEditing.on('postFixer', (evt, { listNodes, writer }) => {\n            for (const { node } of listNodes) {\n                const listType = node.getAttribute('listType');\n                if (listType !== 'numbered' && node.getAttribute('htmlOlAttributes')) {\n                    writer.removeAttribute('htmlOlAttributes', node);\n                    evt.return = true;\n                }\n                if (listType === 'numbered' && node.getAttribute('htmlUlAttributes')) {\n                    writer.removeAttribute('htmlUlAttributes', node);\n                    evt.return = true;\n                }\n            }\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    afterInit() {\n        const editor = this.editor;\n        if (!editor.commands.get('indentList')) {\n            return;\n        }\n        // Reset list attributes after indenting list items.\n        const indentList = editor.commands.get('indentList');\n        this.listenTo(indentList, 'afterExecute', (evt, changedBlocks) => {\n            editor.model.change(writer => {\n                for (const node of changedBlocks) {\n                    const attribute = getAttributeFromListType(node.getAttribute('listType'));\n                    if (!editor.model.schema.checkAttribute(node, attribute)) {\n                        continue;\n                    }\n                    // Just reset the attribute.\n                    // If there is a previous indented list that this node should be merged into,\n                    // the postfixer will unify all the attributes of both sub-lists.\n                    writer.setAttribute(attribute, {}, node);\n                }\n            });\n        });\n    }\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link TODO}\n * feature model element.\n *\n * @returns Returns a conversion callback.\n */\nfunction viewToModelListAttributeConverter(attributeName, dataFilter) {\n    return (evt, data, conversionApi) => {\n        const viewElement = data.viewItem;\n        if (!data.modelRange) {\n            Object.assign(data, conversionApi.convertChildren(data.viewItem, data.modelCursor));\n        }\n        const viewAttributes = dataFilter.processViewAttributes(viewElement, conversionApi);\n        for (const item of data.modelRange.getItems({ shallow: true })) {\n            // Apply only to list item blocks.\n            if (!item.hasAttribute('listItemId')) {\n                continue;\n            }\n            // Set list attributes only on same level items, those nested deeper are already handled\n            // by the recursive conversion.\n            if (item.hasAttribute(attributeName)) {\n                continue;\n            }\n            if (conversionApi.writer.model.schema.checkAttribute(item, attributeName)) {\n                conversionApi.writer.setAttribute(attributeName, viewAttributes || {}, item);\n            }\n        }\n    };\n}\n/**\n * Returns HTML attribute name based on provided list type.\n */\nfunction getAttributeFromListType(listType) {\n    return listType === 'numbered' ?\n        'htmlOlAttributes' :\n        'htmlUlAttributes';\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module html-support/integrations/customelement\n */\n/* globals document */\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { UpcastWriter } from 'ckeditor5/src/engine.js';\nimport DataSchema from '../dataschema.js';\nimport DataFilter from '../datafilter.js';\nimport { setViewAttributes } from '../utils.js';\n/**\n * Provides the General HTML Support for custom elements (not registered in the {@link module:html-support/dataschema~DataSchema}).\n */\nexport default class CustomElementSupport extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [DataFilter, DataSchema];\n    }\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'CustomElementSupport';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const dataFilter = this.editor.plugins.get(DataFilter);\n        const dataSchema = this.editor.plugins.get(DataSchema);\n        dataFilter.on('register:$customElement', (evt, definition) => {\n            evt.stop();\n            const editor = this.editor;\n            const schema = editor.model.schema;\n            const conversion = editor.conversion;\n            const unsafeElements = editor.editing.view.domConverter.unsafeElements;\n            const preLikeElements = editor.data.htmlProcessor.domConverter.preElements;\n            schema.register(definition.model, definition.modelSchema);\n            schema.extend(definition.model, {\n                allowAttributes: ['htmlElementName', 'htmlCustomElementAttributes', 'htmlContent'],\n                isContent: true\n            });\n            // For the `<template>` element we use only raw-content because DOM API exposes its content\n            // only as a document fragment in the `content` property (or innerHTML).\n            editor.data.htmlProcessor.domConverter.registerRawContentMatcher({ name: 'template' });\n            // Being executed on the low priority, it will catch all elements that were not caught by other converters.\n            conversion.for('upcast').elementToElement({\n                view: /.*/,\n                model: (viewElement, conversionApi) => {\n                    // Do not try to convert $comment fake element.\n                    if (viewElement.name == '$comment') {\n                        return null;\n                    }\n                    if (!isValidElementName(viewElement.name)) {\n                        return null;\n                    }\n                    // Allow for fallback only if this element is not defined in data schema to make sure\n                    // that this will handle only custom elements not registered in the data schema.\n                    if (dataSchema.getDefinitionsForView(viewElement.name).size) {\n                        return null;\n                    }\n                    // Make sure that this element will not render in the editing view.\n                    if (!unsafeElements.includes(viewElement.name)) {\n                        unsafeElements.push(viewElement.name);\n                    }\n                    // Make sure that whitespaces will not be trimmed or replaced by nbsps while stringify content.\n                    if (!preLikeElements.includes(viewElement.name)) {\n                        preLikeElements.push(viewElement.name);\n                    }\n                    const modelElement = conversionApi.writer.createElement(definition.model, {\n                        htmlElementName: viewElement.name\n                    });\n                    const htmlAttributes = dataFilter.processViewAttributes(viewElement, conversionApi);\n                    if (htmlAttributes) {\n                        conversionApi.writer.setAttribute('htmlCustomElementAttributes', htmlAttributes, modelElement);\n                    }\n                    let htmlContent;\n                    // For the `<template>` element we use only raw-content because DOM API exposes its content\n                    // only as a document fragment in the `content` property.\n                    if (viewElement.is('element', 'template') && viewElement.getCustomProperty('$rawContent')) {\n                        htmlContent = viewElement.getCustomProperty('$rawContent');\n                    }\n                    else {\n                        // Store the whole element in the attribute so that DomConverter will be able to use the pre like element context.\n                        const viewWriter = new UpcastWriter(viewElement.document);\n                        const documentFragment = viewWriter.createDocumentFragment(viewElement);\n                        const domFragment = editor.data.htmlProcessor.domConverter.viewToDom(documentFragment);\n                        const domElement = domFragment.firstChild;\n                        while (domElement.firstChild) {\n                            domFragment.appendChild(domElement.firstChild);\n                        }\n                        domElement.remove();\n                        htmlContent = editor.data.htmlProcessor.htmlWriter.getHtml(domFragment);\n                    }\n                    conversionApi.writer.setAttribute('htmlContent', htmlContent, modelElement);\n                    // Consume the content of the element.\n                    for (const { item } of editor.editing.view.createRangeIn(viewElement)) {\n                        conversionApi.consumable.consume(item, { name: true });\n                    }\n                    return modelElement;\n                },\n                converterPriority: 'low'\n            });\n            // Because this element is unsafe (DomConverter#unsafeElements), it will render as a transparent <span> but it must\n            // be rendered anyway for the mapping between the model and the view to exist.\n            conversion.for('editingDowncast').elementToElement({\n                model: {\n                    name: definition.model,\n                    attributes: ['htmlElementName', 'htmlCustomElementAttributes', 'htmlContent']\n                },\n                view: (modelElement, { writer }) => {\n                    const viewName = modelElement.getAttribute('htmlElementName');\n                    const viewElement = writer.createRawElement(viewName);\n                    if (modelElement.hasAttribute('htmlCustomElementAttributes')) {\n                        setViewAttributes(writer, modelElement.getAttribute('htmlCustomElementAttributes'), viewElement);\n                    }\n                    return viewElement;\n                }\n            });\n            conversion.for('dataDowncast').elementToElement({\n                model: {\n                    name: definition.model,\n                    attributes: ['htmlElementName', 'htmlCustomElementAttributes', 'htmlContent']\n                },\n                view: (modelElement, { writer }) => {\n                    const viewName = modelElement.getAttribute('htmlElementName');\n                    const htmlContent = modelElement.getAttribute('htmlContent');\n                    const viewElement = writer.createRawElement(viewName, null, (domElement, domConverter) => {\n                        domConverter.setContentOf(domElement, htmlContent);\n                    });\n                    if (modelElement.hasAttribute('htmlCustomElementAttributes')) {\n                        setViewAttributes(writer, modelElement.getAttribute('htmlCustomElementAttributes'), viewElement);\n                    }\n                    return viewElement;\n                }\n            });\n        });\n    }\n}\n/**\n * Returns true if name is valid for a DOM element name.\n */\nfunction isValidElementName(name) {\n    try {\n        document.createElement(name);\n    }\n    catch (error) {\n        return false;\n    }\n    return true;\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module html-support/generalhtmlsupport\n */\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { toArray } from 'ckeditor5/src/utils.js';\nimport DataFilter from './datafilter.js';\nimport CodeBlockElementSupport from './integrations/codeblock.js';\nimport DualContentModelElementSupport from './integrations/dualcontent.js';\nimport HeadingElementSupport from './integrations/heading.js';\nimport ImageElementSupport from './integrations/image.js';\nimport MediaEmbedElementSupport from './integrations/mediaembed.js';\nimport ScriptElementSupport from './integrations/script.js';\nimport TableElementSupport from './integrations/table.js';\nimport StyleElementSupport from './integrations/style.js';\nimport ListElementSupport from './integrations/list.js';\nimport CustomElementSupport from './integrations/customelement.js';\nimport { getHtmlAttributeName, modifyGhsAttribute } from './utils.js';\n/**\n * The General HTML Support feature.\n *\n * This is a \"glue\" plugin which initializes the {@link module:html-support/datafilter~DataFilter data filter} configuration\n * and features integration with the General HTML Support.\n */\nexport default class GeneralHtmlSupport extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'GeneralHtmlSupport';\n    }\n    /**\n     * @inheritDoc\n     */\n    static get requires() {\n        return [\n            DataFilter,\n            CodeBlockElementSupport,\n            DualContentModelElementSupport,\n            HeadingElementSupport,\n            ImageElementSupport,\n            MediaEmbedElementSupport,\n            ScriptElementSupport,\n            TableElementSupport,\n            StyleElementSupport,\n            ListElementSupport,\n            CustomElementSupport\n        ];\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const dataFilter = editor.plugins.get(DataFilter);\n        // Load the allowed empty inline elements' configuration.\n        // Note that this modifies DataSchema so must be loaded before registering filtering rules.\n        dataFilter.loadAllowedEmptyElementsConfig(editor.config.get('htmlSupport.allowEmpty') || []);\n        // Load the filtering configuration.\n        dataFilter.loadAllowedConfig(editor.config.get('htmlSupport.allow') || []);\n        dataFilter.loadDisallowedConfig(editor.config.get('htmlSupport.disallow') || []);\n    }\n    /**\n     * Returns a GHS model attribute name related to a given view element name.\n     *\n     * @internal\n     * @param viewElementName A view element name.\n     */\n    getGhsAttributeNameForElement(viewElementName) {\n        const dataSchema = this.editor.plugins.get('DataSchema');\n        const definitions = Array.from(dataSchema.getDefinitionsForView(viewElementName, false));\n        const inlineDefinition = definitions.find(definition => (definition.isInline && !definitions[0].isObject));\n        if (inlineDefinition) {\n            return inlineDefinition.model;\n        }\n        return getHtmlAttributeName(viewElementName);\n    }\n    /**\n     * Updates GHS model attribute for a specified view element name, so it includes the given class name.\n     *\n     * @internal\n     * @param viewElementName A view element name.\n     * @param className The css class to add.\n     * @param selectable The selection or element to update.\n     */\n    addModelHtmlClass(viewElementName, className, selectable) {\n        const model = this.editor.model;\n        const ghsAttributeName = this.getGhsAttributeNameForElement(viewElementName);\n        model.change(writer => {\n            for (const item of getItemsToUpdateGhsAttribute(model, selectable, ghsAttributeName)) {\n                modifyGhsAttribute(writer, item, ghsAttributeName, 'classes', classes => {\n                    for (const value of toArray(className)) {\n                        classes.add(value);\n                    }\n                });\n            }\n        });\n    }\n    /**\n     * Updates GHS model attribute for a specified view element name, so it does not include the given class name.\n     *\n     * @internal\n     * @param viewElementName A view element name.\n     * @param className The css class to remove.\n     * @param selectable The selection or element to update.\n     */\n    removeModelHtmlClass(viewElementName, className, selectable) {\n        const model = this.editor.model;\n        const ghsAttributeName = this.getGhsAttributeNameForElement(viewElementName);\n        model.change(writer => {\n            for (const item of getItemsToUpdateGhsAttribute(model, selectable, ghsAttributeName)) {\n                modifyGhsAttribute(writer, item, ghsAttributeName, 'classes', classes => {\n                    for (const value of toArray(className)) {\n                        classes.delete(value);\n                    }\n                });\n            }\n        });\n    }\n    /**\n     * Updates GHS model attribute for a specified view element name, so it includes the given attribute.\n     *\n     * @param viewElementName A view element name.\n     * @param attributes The object with attributes to set.\n     * @param selectable The selection or element to update.\n     */\n    setModelHtmlAttributes(viewElementName, attributes, selectable) {\n        const model = this.editor.model;\n        const ghsAttributeName = this.getGhsAttributeNameForElement(viewElementName);\n        model.change(writer => {\n            for (const item of getItemsToUpdateGhsAttribute(model, selectable, ghsAttributeName)) {\n                modifyGhsAttribute(writer, item, ghsAttributeName, 'attributes', attributesMap => {\n                    for (const [key, value] of Object.entries(attributes)) {\n                        attributesMap.set(key, value);\n                    }\n                });\n            }\n        });\n    }\n    /**\n     * Updates GHS model attribute for a specified view element name, so it does not include the given attribute.\n     *\n     * @param viewElementName A view element name.\n     * @param attributeName The attribute name (or names) to remove.\n     * @param selectable The selection or element to update.\n     */\n    removeModelHtmlAttributes(viewElementName, attributeName, selectable) {\n        const model = this.editor.model;\n        const ghsAttributeName = this.getGhsAttributeNameForElement(viewElementName);\n        model.change(writer => {\n            for (const item of getItemsToUpdateGhsAttribute(model, selectable, ghsAttributeName)) {\n                modifyGhsAttribute(writer, item, ghsAttributeName, 'attributes', attributesMap => {\n                    for (const key of toArray(attributeName)) {\n                        attributesMap.delete(key);\n                    }\n                });\n            }\n        });\n    }\n    /**\n     * Updates GHS model attribute for a specified view element name, so it includes a given style.\n     *\n     * @param viewElementName A view element name.\n     * @param styles The object with styles to set.\n     * @param selectable The selection or element to update.\n     */\n    setModelHtmlStyles(viewElementName, styles, selectable) {\n        const model = this.editor.model;\n        const ghsAttributeName = this.getGhsAttributeNameForElement(viewElementName);\n        model.change(writer => {\n            for (const item of getItemsToUpdateGhsAttribute(model, selectable, ghsAttributeName)) {\n                modifyGhsAttribute(writer, item, ghsAttributeName, 'styles', stylesMap => {\n                    for (const [key, value] of Object.entries(styles)) {\n                        stylesMap.set(key, value);\n                    }\n                });\n            }\n        });\n    }\n    /**\n     * Updates GHS model attribute for a specified view element name, so it does not include a given style.\n     *\n     * @param viewElementName A view element name.\n     * @param properties The style (or styles list) to remove.\n     * @param selectable The selection or element to update.\n     */\n    removeModelHtmlStyles(viewElementName, properties, selectable) {\n        const model = this.editor.model;\n        const ghsAttributeName = this.getGhsAttributeNameForElement(viewElementName);\n        model.change(writer => {\n            for (const item of getItemsToUpdateGhsAttribute(model, selectable, ghsAttributeName)) {\n                modifyGhsAttribute(writer, item, ghsAttributeName, 'styles', stylesMap => {\n                    for (const key of toArray(properties)) {\n                        stylesMap.delete(key);\n                    }\n                });\n            }\n        });\n    }\n}\n/**\n * Returns an iterator over an items in the selectable that accept given GHS attribute.\n */\nfunction* getItemsToUpdateGhsAttribute(model, selectable, ghsAttributeName) {\n    if (!selectable) {\n        return;\n    }\n    if (!(Symbol.iterator in selectable) && selectable.is('documentSelection') && selectable.isCollapsed) {\n        if (model.schema.checkAttributeInSelection(selectable, ghsAttributeName)) {\n            yield selectable;\n        }\n    }\n    else {\n        for (const range of getValidRangesForSelectable(model, selectable, ghsAttributeName)) {\n            yield* range.getItems({ shallow: true });\n        }\n    }\n}\n/**\n * Translates a given selectable to an iterable of ranges.\n */\nfunction getValidRangesForSelectable(model, selectable, ghsAttributeName) {\n    if (!(Symbol.iterator in selectable) &&\n        (selectable.is('node') ||\n            selectable.is('$text') ||\n            selectable.is('$textProxy'))) {\n        if (model.schema.checkAttribute(selectable, ghsAttributeName)) {\n            return [model.createRangeOn(selectable)];\n        }\n        else {\n            return [];\n        }\n    }\n    else {\n        return model.schema.getValidRanges(model.createSelection(selectable).getRanges(), ghsAttributeName);\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { uid } from 'ckeditor5/src/utils.js';\n/**\n * The HTML comment feature. It preserves the HTML comments (`<!-- -->`) in the editor data.\n *\n * For a detailed overview, check the {@glink features/html/html-comments HTML comment feature documentation}.\n */\nexport default class HtmlComment extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'HtmlComment';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const loadedCommentsContent = new Map();\n        editor.data.processor.skipComments = false;\n        // Allow storing comment's content as the $root attribute with the name `$comment:<unique id>`.\n        editor.model.schema.addAttributeCheck((context, attributeName) => {\n            if (context.endsWith('$root') && attributeName.startsWith('$comment')) {\n                return true;\n            }\n        });\n        // Convert the `$comment` view element to `$comment:<unique id>` marker and store its content (the comment itself) as a $root\n        // attribute. The comment content is needed in the `dataDowncast` pipeline to re-create the comment node.\n        editor.conversion.for('upcast').elementToMarker({\n            view: '$comment',\n            model: viewElement => {\n                const markerUid = uid();\n                const markerName = `$comment:${markerUid}`;\n                const commentContent = viewElement.getCustomProperty('$rawContent');\n                loadedCommentsContent.set(markerName, commentContent);\n                return markerName;\n            }\n        });\n        // Convert the `$comment` marker to `$comment` UI element with `$rawContent` custom property containing the comment content.\n        editor.conversion.for('dataDowncast').markerToElement({\n            model: '$comment',\n            view: (modelElement, { writer }) => {\n                let root = undefined;\n                for (const rootName of this.editor.model.document.getRootNames()) {\n                    root = this.editor.model.document.getRoot(rootName);\n                    if (root.hasAttribute(modelElement.markerName)) {\n                        break;\n                    }\n                }\n                const markerName = modelElement.markerName;\n                const commentContent = root.getAttribute(markerName);\n                const comment = writer.createUIElement('$comment');\n                writer.setCustomProperty('$rawContent', commentContent, comment);\n                return comment;\n            }\n        });\n        // Remove comments' markers and their corresponding $root attributes, which are moved to the graveyard.\n        editor.model.document.registerPostFixer(writer => {\n            let changed = false;\n            const markers = editor.model.document.differ.getChangedMarkers().filter(marker => marker.name.startsWith('$comment:'));\n            for (const marker of markers) {\n                const { oldRange, newRange } = marker.data;\n                if (oldRange && newRange && oldRange.root == newRange.root) {\n                    // The marker was moved in the same root. Don't do anything.\n                    continue;\n                }\n                if (oldRange) {\n                    // The comment marker was moved from one root to another (most probably to the graveyard).\n                    // Remove the related attribute from the previous root.\n                    const oldRoot = oldRange.root;\n                    if (oldRoot.hasAttribute(marker.name)) {\n                        writer.removeAttribute(marker.name, oldRoot);\n                        changed = true;\n                    }\n                }\n                if (newRange) {\n                    const newRoot = newRange.root;\n                    if (newRoot.rootName == '$graveyard') {\n                        // Comment marker was moved to the graveyard -- remove it entirely.\n                        writer.removeMarker(marker.name);\n                        changed = true;\n                    }\n                    else if (!newRoot.hasAttribute(marker.name)) {\n                        // Comment marker was just added or was moved to another root - updated roots attributes.\n                        //\n                        // Added fallback to `''` for the comment content in case if someone incorrectly added just the marker \"by hand\"\n                        // and forgot to add the root attribute or add them in different change blocks.\n                        //\n                        // It caused an infinite loop in one of the unit tests.\n                        writer.setAttribute(marker.name, loadedCommentsContent.get(marker.name) || '', newRoot);\n                        changed = true;\n                    }\n                }\n            }\n            return changed;\n        });\n        // Delete all comment markers from the document before setting new data.\n        editor.data.on('set', () => {\n            for (const commentMarker of editor.model.markers.getMarkersGroup('$comment')) {\n                this.removeHtmlComment(commentMarker.name);\n            }\n        }, { priority: 'high' });\n        // Delete all comment markers that are within a removed range.\n        // Delete all comment markers at the limit element boundaries if the whole content of the limit element is removed.\n        editor.model.on('deleteContent', (evt, [selection]) => {\n            for (const range of selection.getRanges()) {\n                const limitElement = editor.model.schema.getLimitElement(range);\n                const firstPosition = editor.model.createPositionAt(limitElement, 0);\n                const lastPosition = editor.model.createPositionAt(limitElement, 'end');\n                let affectedCommentIDs;\n                if (firstPosition.isTouching(range.start) && lastPosition.isTouching(range.end)) {\n                    affectedCommentIDs = this.getHtmlCommentsInRange(editor.model.createRange(firstPosition, lastPosition));\n                }\n                else {\n                    affectedCommentIDs = this.getHtmlCommentsInRange(range, { skipBoundaries: true });\n                }\n                for (const commentMarkerID of affectedCommentIDs) {\n                    this.removeHtmlComment(commentMarkerID);\n                }\n            }\n        }, { priority: 'high' });\n    }\n    /**\n     * Creates an HTML comment on the specified position and returns its ID.\n     *\n     * *Note*: If two comments are created at the same position, the second comment will be inserted before the first one.\n     *\n     * @returns Comment ID. This ID can be later used to e.g. remove the comment from the content.\n     */\n    createHtmlComment(position, content) {\n        const id = uid();\n        const editor = this.editor;\n        const model = editor.model;\n        const root = model.document.getRoot(position.root.rootName);\n        const markerName = `$comment:${id}`;\n        return model.change(writer => {\n            const range = writer.createRange(position);\n            writer.addMarker(markerName, {\n                usingOperation: true,\n                affectsData: true,\n                range\n            });\n            writer.setAttribute(markerName, content, root);\n            return markerName;\n        });\n    }\n    /**\n     * Removes an HTML comment with the given comment ID.\n     *\n     * It does nothing and returns `false` if the comment with the given ID does not exist.\n     * Otherwise it removes the comment and returns `true`.\n     *\n     * Note that a comment can be removed also by removing the content around the comment.\n     *\n     * @param commentID The ID of the comment to be removed.\n     * @returns `true` when the comment with the given ID was removed, `false` otherwise.\n     */\n    removeHtmlComment(commentID) {\n        const editor = this.editor;\n        const marker = editor.model.markers.get(commentID);\n        if (!marker) {\n            return false;\n        }\n        editor.model.change(writer => {\n            writer.removeMarker(marker);\n        });\n        return true;\n    }\n    /**\n     * Gets the HTML comment data for the comment with a given ID.\n     *\n     * Returns `null` if the comment does not exist.\n     */\n    getHtmlCommentData(commentID) {\n        const editor = this.editor;\n        const marker = editor.model.markers.get(commentID);\n        if (!marker) {\n            return null;\n        }\n        let content = '';\n        for (const root of this.editor.model.document.getRoots()) {\n            if (root.hasAttribute(commentID)) {\n                content = root.getAttribute(commentID);\n                break;\n            }\n        }\n        return {\n            content,\n            position: marker.getStart()\n        };\n    }\n    /**\n     * Gets all HTML comments in the given range.\n     *\n     * By default, it includes comments at the range boundaries.\n     *\n     * @param range\n     * @param options.skipBoundaries When set to `true` the range boundaries will be skipped.\n     * @returns HTML comment IDs\n     */\n    getHtmlCommentsInRange(range, { skipBoundaries = false } = {}) {\n        const includeBoundaries = !skipBoundaries;\n        // Unfortunately, MarkerCollection#getMarkersAtPosition() filters out collapsed markers.\n        return Array.from(this.editor.model.markers.getMarkersGroup('$comment'))\n            .filter(marker => isCommentMarkerInRange(marker, range))\n            .map(marker => marker.name);\n        function isCommentMarkerInRange(commentMarker, range) {\n            const position = commentMarker.getRange().start;\n            return ((position.isAfter(range.start) || (includeBoundaries && position.isEqual(range.start))) &&\n                (position.isBefore(range.end) || (includeBoundaries && position.isEqual(range.end))));\n        }\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module html-support/htmlpagedataprocessor\n */\nimport { HtmlDataProcessor, UpcastWriter } from 'ckeditor5/src/engine.js';\n/**\n * The full page HTML data processor class.\n * This data processor implementation uses HTML as input and output data.\n */\nexport default class HtmlPageDataProcessor extends HtmlDataProcessor {\n    /**\n     * @inheritDoc\n     */\n    toView(data) {\n        // Ignore content that is not a full page source.\n        if (!data.match(/<(?:html|body|head|meta)(?:\\s[^>]*)?>/i)) {\n            return super.toView(data);\n        }\n        // Store doctype and xml declaration in a separate properties as they can't be stringified later.\n        let docType = '';\n        let xmlDeclaration = '';\n        data = data.replace(/<!DOCTYPE[^>]*>/i, match => {\n            docType = match;\n            return '';\n        });\n        data = data.replace(/<\\?xml\\s[^?]*\\?>/i, match => {\n            xmlDeclaration = match;\n            return '';\n        });\n        // Convert input HTML data to DOM DocumentFragment.\n        const domFragment = this._toDom(data);\n        // Convert DOM DocumentFragment to view DocumentFragment.\n        const viewFragment = this.domConverter.domToView(domFragment, { skipComments: this.skipComments });\n        const writer = new UpcastWriter(viewFragment.document);\n        // Using the DOM document with body content extracted as a skeleton of the page.\n        writer.setCustomProperty('$fullPageDocument', domFragment.ownerDocument.documentElement.outerHTML, viewFragment);\n        if (docType) {\n            writer.setCustomProperty('$fullPageDocType', docType, viewFragment);\n        }\n        if (xmlDeclaration) {\n            writer.setCustomProperty('$fullPageXmlDeclaration', xmlDeclaration, viewFragment);\n        }\n        return viewFragment;\n    }\n    /**\n     * @inheritDoc\n     */\n    toData(viewFragment) {\n        let data = super.toData(viewFragment);\n        const page = viewFragment.getCustomProperty('$fullPageDocument');\n        const docType = viewFragment.getCustomProperty('$fullPageDocType');\n        const xmlDeclaration = viewFragment.getCustomProperty('$fullPageXmlDeclaration');\n        if (page) {\n            data = page.replace(/<\\/body\\s*>/, data + '$&');\n            if (docType) {\n                data = docType + '\\n' + data;\n            }\n            if (xmlDeclaration) {\n                data = xmlDeclaration + '\\n' + data;\n            }\n        }\n        return data;\n    }\n}\n", "/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module html-support/fullpage\n */\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { UpcastWriter } from 'ckeditor5/src/engine.js';\nimport HtmlPageDataProcessor from './htmlpagedataprocessor.js';\n/**\n * The full page editing feature. It preserves the whole HTML page in the editor data.\n */\nexport default class FullPage extends Plugin {\n    /**\n     * @inheritDoc\n     */\n    static get pluginName() {\n        return 'FullPage';\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        const editor = this.editor;\n        const properties = ['$fullPageDocument', '$fullPageDocType', '$fullPageXmlDeclaration'];\n        editor.data.processor = new HtmlPageDataProcessor(editor.data.viewDocument);\n        editor.model.schema.extend('$root', {\n            allowAttributes: properties\n        });\n        // Apply custom properties from view document fragment to the model root attributes.\n        editor.data.on('toModel', (evt, [viewElementOrFragment]) => {\n            const root = editor.model.document.getRoot();\n            editor.model.change(writer => {\n                for (const name of properties) {\n                    const value = viewElementOrFragment.getCustomProperty(name);\n                    if (value) {\n                        writer.setAttribute(name, value, root);\n                    }\n                }\n            });\n        }, { priority: 'low' });\n        // Apply root attributes to the view document fragment.\n        editor.data.on('toView', (evt, [modelElementOrFragment]) => {\n            if (!modelElementOrFragment.is('rootElement')) {\n                return;\n            }\n            const root = modelElementOrFragment;\n            const viewFragment = evt.return;\n            if (!root.hasAttribute('$fullPageDocument')) {\n                return;\n            }\n            const writer = new UpcastWriter(viewFragment.document);\n            for (const name of properties) {\n                const value = root.getAttribute(name);\n                if (value) {\n                    writer.setCustomProperty(name, value, viewFragment);\n                }\n            }\n        }, { priority: 'low' });\n        // Clear root attributes related to full page editing on editor content reset.\n        editor.data.on('set', () => {\n            const root = editor.model.document.getRoot();\n            editor.model.change(writer => {\n                for (const name of properties) {\n                    if (root.hasAttribute(name)) {\n                        writer.removeAttribute(name, root);\n                    }\n                }\n            });\n        }, { priority: 'high' });\n        // Make sure that document is returned even if there is no content in the page body.\n        editor.data.on('get', (evt, args) => {\n            if (!args[0]) {\n                args[0] = {};\n            }\n            args[0].trim = false;\n        }, { priority: 'high' });\n    }\n}\n"],
  "mappings": "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",
  "names": ["values", "definitions", "pattern", "splitRules", "viewToModelFigureAttributeConverter", "range"]
}
